{
    "version": "https://jsonfeed.org/version/1",
    "title": "Vegetable Blog • All posts by \"android\" category",
    "description": "",
    "home_page_url": "http://ericcd.com",
    "items": [
        {
            "id": "http://ericcd.com/2022/03/31/Android-Framework-init-rc/",
            "url": "http://ericcd.com/2022/03/31/Android-Framework-init-rc/",
            "title": "Android 框架 - init.rc 文件",
            "date_published": "2022-03-31T03:26:29.000Z",
            "content_html": "<p>Android 框架中 init.rc 文件的相关知识。<br />\n<span id=\"more\"></span><br />\ninit.rc 文件不同于 init 进程，init 进程仅当编译完 Android 后才会生成，而 init.rc 文件存在于源码中。init 文件大致分为两部分，一部分是以 on 关键字开头的动作列表，一部分是以 service 关键字开头的服务列表。</p>\n",
            "tags": [
                "Knowledge"
            ]
        },
        {
            "id": "http://ericcd.com/2022/03/23/AndroidFramework-init/",
            "url": "http://ericcd.com/2022/03/23/AndroidFramework-init/",
            "title": "Android 框架 - init 进程",
            "date_published": "2022-03-23T03:25:48.000Z",
            "content_html": "<p>Android 框架中 init 进程的相关知识。<br />\n<span id=\"more\"></span><br />\ninit 进程是 Android 启动后，由内核启动的第一个用户级进程。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 内核启动过程：</span><br><span class=\"line\">#    start_kernel ()</span><br><span class=\"line\">#    init_post ()</span><br><span class=\"line\">#    run_init_process ()</span><br><span class=\"line\">#</span><br><span class=\"line\">#     static in noinline init_post (void)</span><br><span class=\"line\">#     &#123;</span><br><span class=\"line\">#               if (execute_command)&#123;</span><br><span class=\"line\">#                          run_init_process (execute_command);</span><br><span class=\"line\">#               &#125;</span><br><span class=\"line\">#               run_init_process (&quot;/sbin/init&quot;);</span><br><span class=\"line\">#               run_init_process (&quot;/etc/init&quot;);</span><br><span class=\"line\">#               run_init_process (&quot;/bin/init&quot;);</span><br><span class=\"line\">#               run_init_process (&quot;/bin/sh&quot;);</span><br><span class=\"line\">#     &#125;</span><br></pre></td></tr></table></figure><br />\ninit_post () 函数调用 run_init_process () 函数，获取注册在 execute_command 中的进程文件路径，执行 execve () 系统调用，execve () 函数执行参数传递过来的文件路径下的进程 。<br />\n当跟文件系统顶层目录中不存在 init 进程或未指定启动选项 &quot;init=&quot; 时，内核会到 /sbin,/etc,/bin 目录下查找 init 文件，如果仍未找到，则 init 进程停止，引发 Kernel Panic。</p>\n<h2 id=\"init-工作流程\"><a class=\"anchor\" href=\"#init-工作流程\">#</a> init 工作流程</h2>\n<h3 id=\"sigchld-注册信号处理器\"><a class=\"anchor\" href=\"#sigchld-注册信号处理器\">#</a> SIGCHLD 注册信号处理器</h3>\n<p>当子进程终止时，会产生 SIGCHLD 信号，init 进程调用信号安装函数 sigaction ()，并通过参数传递至 sigaction 结构体中，完成信号处理器安装。<br />\ninit 进程通过相关代码注册与子进程相关的 SIGCHLD 信号处理器，并把 sigaction 结构体中的 sa_flags 设置为 SA_NOCLDSTOP，该值表示仅当进程终止时才接受 SIGCHLD 信号。sigchld_handler 函数用于通知全局变量 signal_fd，SIGCHLD 信号已经发生。</p>\n<h3 id=\"main-目录生成与挂载\"><a class=\"anchor\" href=\"#main-目录生成与挂载\">#</a> main () 目录生成与挂载</h3>\n<p>init 在注册完信号处理器后，创建并挂在启动所需目录。</p>\n<h3 id=\"初始化-log-输出设备\"><a class=\"anchor\" href=\"#初始化-log-输出设备\">#</a> 初始化 log 输出设备</h3>\n<p>通过调用 log_init () 函数初始化 log 输出设备。</p>\n<h3 id=\"解析-initrc-文件\"><a class=\"anchor\" href=\"#解析-initrc-文件\">#</a> 解析 init.rc 文件</h3>\n<p>init.rc 文件是 init 启动后执行的启动脚本，文件中记录着 init 进程执行的功能。在 Linux 系统中，它被定义在根文件系统的 /etc/rc.d/ 目录下，是启动时的可执行文件。<br />\ninit.rc 文件在 Android 系统运行过程中用于通用的环境设置以及进程相关的定义，init.{hardware}.rc 用于定义 Android 在不同平台下的特定进程和环境设置等。<br />\nparse_config_file () 文件用于分析.rc 配置文件，参数为文件路径。读取 init.rc 文件后，生成动作列表与服务列表。根据 init.{hardware}.rc 生成的动作列表和服务列表会被添加到已生成的对应列表中去。</p>\n<h3 id=\"执行-early-init-动作\"><a class=\"anchor\" href=\"#执行-early-init-动作\">#</a> 执行 early-init 动作</h3>\n<p>init 进程会依次执行 &quot;early-init , init ,early-boot , boot&quot; 片段中的命令。<br />\n通过 action_for_each_trigger () 将 early-init 中的命令保存到队列 action_add_queue_tail 中，之后通过 drain_action_queue () 函数将运行队列中的命令逐一取出执行。</p>\n<h3 id=\"创建定义好的设备节点文件\"><a class=\"anchor\" href=\"#创建定义好的设备节点文件\">#</a> 创建定义好的设备节点文件</h3>\n<p>通过 device_init () 生成静态设备节点。</p>\n<h3 id=\"初始化属性服务\"><a class=\"anchor\" href=\"#初始化属性服务\">#</a> 初始化属性服务</h3>\n<p>调用 property_init () 函数，在共享内存区域中，创建并初始化属性域。而后通过执行中的进程所提供的 API，访问属性域中的设置值。但更改属性值操作只能在 init 进程中运行，当修改属性值时，要预先向 init 进程提交值变更申请，然后 init 进程处理该申请，并修改属性值。</p>\n<h3 id=\"显示启动-logo\"><a class=\"anchor\" href=\"#显示启动-logo\">#</a> 显示启动 logo</h3>\n<p>使用 load_565rle_image () 函数将文件显示在屏幕上，只需修改 INIT_IMAGE_FILE 即可更改启动 Logo。</p>\n<h3 id=\"属性初始设置\"><a class=\"anchor\" href=\"#属性初始设置\">#</a> 属性初始设置</h3>\n<p>通过 property_set () 函数向属性域设置系统所需的一些初始值。这些设置的属性值由执行中的多种进程通过 property_get () API 来访问。</p>\n<h3 id=\"执行-init-动作\"><a class=\"anchor\" href=\"#执行-init-动作\">#</a> 执行 init 动作</h3>\n<p>同 early-init。</p>\n<h3 id=\"启动属性服务\"><a class=\"anchor\" href=\"#启动属性服务\">#</a> 启动属性服务</h3>\n<p>除了先前设置的属性外，start_property_service () 还会读取几个设置文件，并对属性进行初始化。在根文件系统的 /data/property 目录下，保存着进程生成或修改的属性值。向 init 提交修改申请后，init 进程生成 /dev/socket/property_service 来接受其它进程提交的申请。</p>\n<h3 id=\"创建套接字\"><a class=\"anchor\" href=\"#创建套接字\">#</a> 创建套接字</h3>\n<p>用于 init 进程在收到子进程终止的信号时调用相应的 handler。</p>\n<h3 id=\"执行与-action-list-的-early-bootbootproperty-相关的命令\"><a class=\"anchor\" href=\"#执行与-action-list-的-early-bootbootproperty-相关的命令\">#</a> 执行与 Action List 的 early-boot,boot,property 相关的命令</h3>\n<p>在 init.rc 文件的 boot 区段有一条 class_start 命令，用来逐一执行存在于服务列表中的进程列表。</p>\n<h3 id=\"设置事件处理循环的监视事件\"><a class=\"anchor\" href=\"#设置事件处理循环的监视事件\">#</a> 设置事件处理循环的监视事件</h3>\n<p>注册在 POLL 中的文件描述符会在 poll () 函数中等待事件发生，若事件发生，则从 poll 函数中跳出并处理事件。<br />\n在确认事件发生前，先要在 action list 的命令中确认是否有尚未执行的命令，并执行这些命令。起初，在事件处理循环中，action list 与 service list 未含有需要执行的事情，但是在处理过注册的事件后，init 进程要做的事情会重新注册到 action list 与 service list 中。<br />\n当事件发生时，事件信息会保存在 pollfd 结构体的 udfs.revents 变量中，当 poll () 函数返回后，可以在 udfs 数组中的 revents 中查看哪些事件已经发生。<br />\n当子进程终止时，会产生 SIGCHLD 信号，POLLIN 事件会被注册到 udfs [2],revents 中。<br />\n在 Android 系统运行过程中，插入热的拔插设备时，将生成设备节点文件。<br />\n这部分函数还会处理属性变更请求。</p>\n",
            "tags": [
                "Knowledge"
            ]
        },
        {
            "id": "http://ericcd.com/2022/03/23/Android-framework/",
            "url": "http://ericcd.com/2022/03/23/Android-framework/",
            "title": "Android 框架概述",
            "date_published": "2022-03-23T02:57:28.000Z",
            "content_html": "<p>Android 框架相关知识概述。<br />\n<span id=\"more\"></span></p>\n<h2 id=\"android-启动过程\"><a class=\"anchor\" href=\"#android-启动过程\">#</a> Android 启动过程</h2>\n<p>Android 启动时，首先通过 bootloader (系统加载器) 加载 Linux 内核。Linux 加载启动时，先初始化内核，再调用 init 进程。</p>\n<h2 id=\"init-进程\"><a class=\"anchor\" href=\"#init-进程\">#</a> init 进程</h2>\n<p>init 进程会运行 Android Framework 所需的 Daemon, Context Manager, Media Server, Zygote 等。</p>\n<h3 id=\"daemon\"><a class=\"anchor\" href=\"#daemon\">#</a> Daemon</h3>\n<p>以下是 init 进程执行的 Daemon 进程。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#          USB Daemon (usbd): 管理 USB 连接。</span><br><span class=\"line\">#          Android Debug Bridge Daemon (adbd): Android Debug Brige 连接管理。</span><br><span class=\"line\">#          Debugger Daemon (debuggerd): 启动 Debugger 系统。</span><br><span class=\"line\">#          Radio Interface Layer Daemon (rild): 管理无线通信连接。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"context-manager\"><a class=\"anchor\" href=\"#context-manager\">#</a> Context Manager</h3>\n<p>Context Manager 是一个管理 Android 系统服务的重要进程，系统服务提供从相机，音频，视频处理到各种应用程序制作所需要的 API。<br />\nContext Manager 还提供用于 Android 内的各种系统服务信息。应用程序或 Frameword 内部模块在调用系统服务时，需要先向服务管理器申请，再通过 Binder IPC 调用系统服务。<br />\n系统启动时，Android 所有系统服务都要把各自的 handle 注册到 Context Manager。</p>\n<h3 id=\"media-server\"><a class=\"anchor\" href=\"#media-server\">#</a> Media Server</h3>\n<p>Media Server 用于运行基于 C/C++ 的本地系统服务，如 Audio Flinger,Camera 等。</p>\n<h3 id=\"zygote\"><a class=\"anchor\" href=\"#zygote\">#</a> Zygote</h3>\n<p>Zygote 进程用于缩短 Android 应用程序加载时间，每当执行 java 应用程序时，Zygote 会派生一个子进程来执行程序，该子进程就是虚拟机。</p>\n<h3 id=\"system-server\"><a class=\"anchor\" href=\"#system-server\">#</a> System Server</h3>\n<p>Syetem Server 是 Android 系统的一个核心进程，它有 Zygote 创建，所以启动过程位于 Zygote 之后。在 System Server 中可以看到它建立的 Android 中的大部分服务，为了将运行在 System Server 中的 java 系统服务提供给 Android 程序或 Framework 内部模块调用，需要先将它们注册到 Context Manager 中。</p>\n",
            "tags": [
                "Knowledge"
            ]
        },
        {
            "id": "http://ericcd.com/2022/03/18/dex-structure/",
            "url": "http://ericcd.com/2022/03/18/dex-structure/",
            "title": "dex 文件结构",
            "date_published": "2022-03-18T02:42:11.000Z",
            "content_html": "<p>dex 文件结构学习。<br />\n<span id=\"more\"></span></p>\n<h2 id=\"dex-整体结构\"><a class=\"anchor\" href=\"#dex-整体结构\">#</a> dex 整体结构</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#       struct dex&#123;</span><br><span class=\"line\">#        Header;</span><br><span class=\"line\">#        string_ids;</span><br><span class=\"line\">#        type_ids;</span><br><span class=\"line\">#        proto_ids;</span><br><span class=\"line\">#        field_ids;</span><br><span class=\"line\">#        methods_ids;</span><br><span class=\"line\">#        class_defs;</span><br><span class=\"line\">#        data;</span><br><span class=\"line\">#        link_data;&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"header\"><a class=\"anchor\" href=\"#header\">#</a> Header</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#      struct  DexHeader&#123;</span><br><span class=\"line\">#              magic [8];</span><br><span class=\"line\">#              checksum;</span><br><span class=\"line\">#              signature [kSHA1DigestLen];</span><br><span class=\"line\">#              fileSize;</span><br><span class=\"line\">#              headerSize;</span><br><span class=\"line\">#              endianTag;</span><br><span class=\"line\">#              linkSize;</span><br><span class=\"line\">#              linkOff;</span><br><span class=\"line\">#              mapOff;</span><br><span class=\"line\">#              stringIdsSize;</span><br><span class=\"line\">#              stringIdsOff;</span><br><span class=\"line\">#              typeIdsSize;</span><br><span class=\"line\">#              typeIdsOff;</span><br><span class=\"line\">#              protoIdsSize;</span><br><span class=\"line\">#              protoIdsOff;</span><br><span class=\"line\">#              fieldIdsSize;</span><br><span class=\"line\">#              fieldIdsOff;</span><br><span class=\"line\">#              methodIdsSize;</span><br><span class=\"line\">#              methodIdsOff;</span><br><span class=\"line\">#              classDefsSize;</span><br><span class=\"line\">#              classDefsOff;</span><br><span class=\"line\">#              dataSize;</span><br><span class=\"line\">#              dataOff;&#125;</span><br></pre></td></tr></table></figure><br />\n1.checksum：dex 文件校验和。<br />\n2. signature [kSHA1DigestLen]：整个 dex 文件通过 SHA-1 签名得到的值，占用 20 字节，用于检验 dex 文件。<br />\n3.endianTag: 字节序标记，用于指定 dex 运行环境的 cpu。<br />\n4.linkSzie 和 linkOff：指定链接段大小和文件偏移，通常情况下都为 0.linkSize 为 0 的话表示静态链接。<br />\n5.mapOff：指定 DexMapList 的文件偏移。<br />\n6.stringIdsSize 和 stringIdsOff：指定了 dex 文件中所有用到的字符串的个数和 string_ids 结构位置偏移。<br />\n7.typeIdsSize 和 TypeIdsOff：表示类的类型的数量和 type_ids 结构位置偏移。<br />\n8.protoIdsSize 和 protoIdsOff：表示 dex 文件中方法原型的个数和 proto_ids 结构位置偏移。<br />\n9.fieldIdsSize 和 fieldsIdsOff：表示 dex 文件中字段个数和 field_ids 结构位置偏移。<br />\n10.methodIdsSize 和 methodIdsOff：表示 dex 文件中的方法数量和 methods_ids 结构位置偏移。<br />\n11.classDefsSize 和 classDefsOff：指明 dex 文件中类的定义的相关信息。</p>\n<h2 id=\"string_ids\"><a class=\"anchor\" href=\"#string_ids\">#</a> string_ids</h2>\n<p>string_ids 结构中，每 4 字节表示一个位置偏移，该偏移指向真正字符串的偏移地址，真正的字符串存在 data 中。</p>\n<h2 id=\"type_ids\"><a class=\"anchor\" href=\"#type_ids\">#</a> type_ids</h2>\n<p>types_ids 中只存在一种数据 descriptorIdx，它的值为 string_ids 结构的索引。</p>\n<h2 id=\"proto_ids\"><a class=\"anchor\" href=\"#proto_ids\">#</a> proto_ids</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#     struct proto_ids&#123;</span><br><span class=\"line\">#              shortyIdx;   // 指向 string_Ids 列表的索引 </span><br><span class=\"line\">#              returnTypeIdx;  // 指向 type_Id 列表的索引 </span><br><span class=\"line\">#              parametersOff;  // 指向 type_list 的位置偏移 </span><br><span class=\"line\">#              &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"type_list\"><a class=\"anchor\" href=\"#type_list\">#</a> type_list</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#     struct type_list&#123;</span><br><span class=\"line\">#             size; //type_Item 的个数 </span><br><span class=\"line\">#             type_item  list [1];  //type_Item 结构，只有一个 type_id 参数，指向 type_id 列表 </span><br><span class=\"line\">#             &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"field_ids\"><a class=\"anchor\" href=\"#field_ids\">#</a> field_ids</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#        struct field_ids&#123;</span><br><span class=\"line\">#             classIdx;  // 类的类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#             typeIdx;  // 字段类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#             nameIdx;  // 字段名，指向 string_Id 列表的索引 </span><br><span class=\"line\">#             &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"methods_ids\"><a class=\"anchor\" href=\"#methods_ids\">#</a> methods_ids</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#      struct method_id&#123;</span><br><span class=\"line\">#             classIdx;   // 类的类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#             protoIdx;  // 声明类型，指向 proto_Id 列表的索引 </span><br><span class=\"line\">#             nameIdx;  // 方法名，指向 string_Id 列表的索引 </span><br><span class=\"line\">#             &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"class_defs\"><a class=\"anchor\" href=\"#class_defs\">#</a> class_defs</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#           struct    class_defs&#123;</span><br><span class=\"line\">#                   classIdx;  // 类的类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#                   accessFlags;  // 访问标志 </span><br><span class=\"line\">#                   superclassIdx;  // 父类类型，指向 type_Id 列表的索引 </span><br><span class=\"line\">#                   interfacesOff;  // 接口，指向 type_list 的偏移 </span><br><span class=\"line\">#                   sourceFileIdx;  // 源文件名，指向 string_Ids 列表的索引 </span><br><span class=\"line\">#                   annotationsOff;  // 注解，指向 annotationsDirectory_Item 结构 </span><br><span class=\"line\">#                   classDataOff;  // 指向 class_data 结构的偏移 </span><br><span class=\"line\">#                   staticValuesOff;  // 指向 encoded_array 结构的偏移 </span><br><span class=\"line\">#                   &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"class_data\"><a class=\"anchor\" href=\"#class_data\">#</a> class_data</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#        struct DexClassData&#123;</span><br><span class=\"line\">#              classDataHeader\theader;\t     // 指定字段与方法的个数 </span><br><span class=\"line\">#              Field* \t\tstaticFields;   // 静态字段，Field 结构 </span><br><span class=\"line\">#              Field*\t\tinstanceFields;  // 实例字段，Field 结构 </span><br><span class=\"line\">#              Method*\t\tdirectMethods;  // 直接方法，Method 结构 </span><br><span class=\"line\">#              Method*\t\tvirtualMethods;  // 虚方法，Method 结构 </span><br><span class=\"line\">#              &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"classdataheader\"><a class=\"anchor\" href=\"#classdataheader\">#</a> classDataHeader</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#   struct classDataHeader&#123;</span><br><span class=\"line\">#               staticFieldsSize;  // 静态字段个数 </span><br><span class=\"line\">#               instanceFieldsSize;  // 实例字段个数 </span><br><span class=\"line\">#               directMethodsSize;  // 直接方法个数 </span><br><span class=\"line\">#               virtualMethodsSize;  // 虚方法个数 </span><br><span class=\"line\">#               &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"field\"><a class=\"anchor\" href=\"#field\">#</a> Field</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#       struct DexField&#123;</span><br><span class=\"line\">#            field_Idx;  // 指向 field_Ids 的索引 </span><br><span class=\"line\">#            accessFlags;  // 访问标志 </span><br><span class=\"line\">#            &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"method\"><a class=\"anchor\" href=\"#method\">#</a> Method</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#           struct DexMethod&#123;</span><br><span class=\"line\">#                   method_Idx;  // 指向 method_Ids 的索引 </span><br><span class=\"line\">#                   accessFlags;  // 访问标志 </span><br><span class=\"line\">#                   codeOff;  // 指向 code 结构的偏移 </span><br><span class=\"line\">#                   &#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Knowledge"
            ]
        },
        {
            "id": "http://ericcd.com/2022/02/27/Android-Knowledge/",
            "url": "http://ericcd.com/2022/02/27/Android-Knowledge/",
            "title": "Android 知识",
            "date_published": "2022-02-27T08:26:04.000Z",
            "content_html": "<p>记录一些学习到的 Android 相关知识。<br />\n<span id=\"more\"></span><br />\n1.application 中的 android:name 属性用来指定 app 启动时关联的 application，默认关联的为 android.app.Application。也可以将其设置为一个我们自己编辑的 class，该 class 将被 application 下的所有 activity 共享。<br />\n2.android.intent.action.MAIN 用于决定程序最先启动的 Activity，android.intent.category.LAUNCHER 用于决定程序是否显示在程序列表（桌面）里。没有 android.intent.action.MAIN，能够安装程序，但桌面不会显示启动器，程序也无法运行。<br />\n没有 android.intent.category.LAUNCHER，程序可以正常运行，但是桌面不会显示启动器。一个 apk 中有多个 activity 中存在 android.intent.action.MAIN 和 android.intent.category.LAUNCHER，桌面上会显示复数个应用图标，但是对应的为同一应用文件。<br />\n3. 在 Android 中使用 android.os.build 来获取设备相关信息，而 android.os.build 通过 SystemProperties.getString 来获取静态字段值，Systemproperties 是 android.os 中标记为 hide 的类，无法直接访问，但是可以通过反射的方式获取。该类使用 native 方法 native_get 来后去系统属性值，该方法的源代码在 android_os_SystemProperties.cpp 文件中。<br />\n4. 将 android.intent.category.LAUNCHER 改为 <span class=\"exturl\" data-url=\"aHR0cDovL2FuZHJvaWQuaW50ZW50LmNhdGVnb3J5LklORk8=\">android.intent.category.INFO</span> 或 android.intent.category.FRAMEWORK_INSTRUMENTATION_TEST, 能够实现在桌面上隐藏程序同时不影响程序正常运行。并且因为没有了 android.inntent.category.LAUNCHER 作为特征，一些 apk 分析工具就无法定位 MainActivity。<br />\n5. 可以将 Androidmanifest 中的一些非必要标签的资源 ID 改为 0，从而屏蔽实现该标签的作用。</p>\n",
            "tags": [
                "Knowledge"
            ]
        }
    ]
}