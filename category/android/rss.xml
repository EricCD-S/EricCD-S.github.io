<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Vegetable Blog • Posts by &#34;android&#34; category</title>
        <link>http://ericcd.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Thu, 31 Mar 2022 11:26:29 +0800</pubDate>
        <lastBuildDate>Thu, 31 Mar 2022 11:26:29 +0800</lastBuildDate>
        <category>Knowledge</category>
        <category>ddms</category>
        <category>jni</category>
        <category>ndk</category>
        <category>静态注册</category>
        <category>JEB</category>
        <category>Android逆向</category>
        <category>apktool</category>
        <category>jarsign</category>
        <category>010Editor</category>
        <category>Android Studio</category>
        <category>Frida</category>
        <category>apk脱壳</category>
        <category>bugs</category>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/31/Android-Framework-init-rc/</guid>
            <title>Android 框架 - init.rc 文件</title>
            <link>http://ericcd.com/2022/03/31/Android-Framework-init-rc/</link>
            <category>Knowledge</category>
            <pubDate>Thu, 31 Mar 2022 11:26:29 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Android 框架中 init.rc 文件的相关知识。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
init.rc 文件不同于 init 进程，init 进程仅当编译完 Android 后才会生成，而 init.rc 文件存在于源码中。init 文件大致分为两部分，一部分是以 on 关键字开头的动作列表，一部分是以 service 关键字开头的服务列表。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/23/AndroidFramework-init/</guid>
            <title>Android 框架 - init 进程</title>
            <link>http://ericcd.com/2022/03/23/AndroidFramework-init/</link>
            <category>Knowledge</category>
            <pubDate>Wed, 23 Mar 2022 11:25:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Android 框架中 init 进程的相关知识。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
init 进程是 Android 启动后，由内核启动的第一个用户级进程。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 内核启动过程：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#    start_kernel ()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#    init_post ()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#    run_init_process ()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#     static in noinline init_post (void)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               if (execute_command)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                          run_init_process (execute_command);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               run_init_process (&amp;quot;/sbin/init&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               run_init_process (&amp;quot;/etc/init&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               run_init_process (&amp;quot;/bin/init&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               run_init_process (&amp;quot;/bin/sh&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
init_post () 函数调用 run_init_process () 函数，获取注册在 execute_command 中的进程文件路径，执行 execve () 系统调用，execve () 函数执行参数传递过来的文件路径下的进程 。&lt;br /&gt;
当跟文件系统顶层目录中不存在 init 进程或未指定启动选项 &amp;quot;init=&amp;quot; 时，内核会到 /sbin,/etc,/bin 目录下查找 init 文件，如果仍未找到，则 init 进程停止，引发 Kernel Panic。&lt;/p&gt;
&lt;h2 id=&#34;init-工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#init-工作流程&#34;&gt;#&lt;/a&gt; init 工作流程&lt;/h2&gt;
&lt;h3 id=&#34;sigchld-注册信号处理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sigchld-注册信号处理器&#34;&gt;#&lt;/a&gt; SIGCHLD 注册信号处理器&lt;/h3&gt;
&lt;p&gt;当子进程终止时，会产生 SIGCHLD 信号，init 进程调用信号安装函数 sigaction ()，并通过参数传递至 sigaction 结构体中，完成信号处理器安装。&lt;br /&gt;
init 进程通过相关代码注册与子进程相关的 SIGCHLD 信号处理器，并把 sigaction 结构体中的 sa_flags 设置为 SA_NOCLDSTOP，该值表示仅当进程终止时才接受 SIGCHLD 信号。sigchld_handler 函数用于通知全局变量 signal_fd，SIGCHLD 信号已经发生。&lt;/p&gt;
&lt;h3 id=&#34;main-目录生成与挂载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#main-目录生成与挂载&#34;&gt;#&lt;/a&gt; main () 目录生成与挂载&lt;/h3&gt;
&lt;p&gt;init 在注册完信号处理器后，创建并挂在启动所需目录。&lt;/p&gt;
&lt;h3 id=&#34;初始化-log-输出设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化-log-输出设备&#34;&gt;#&lt;/a&gt; 初始化 log 输出设备&lt;/h3&gt;
&lt;p&gt;通过调用 log_init () 函数初始化 log 输出设备。&lt;/p&gt;
&lt;h3 id=&#34;解析-initrc-文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解析-initrc-文件&#34;&gt;#&lt;/a&gt; 解析 init.rc 文件&lt;/h3&gt;
&lt;p&gt;init.rc 文件是 init 启动后执行的启动脚本，文件中记录着 init 进程执行的功能。在 Linux 系统中，它被定义在根文件系统的 /etc/rc.d/ 目录下，是启动时的可执行文件。&lt;br /&gt;
init.rc 文件在 Android 系统运行过程中用于通用的环境设置以及进程相关的定义，init.{hardware}.rc 用于定义 Android 在不同平台下的特定进程和环境设置等。&lt;br /&gt;
parse_config_file () 文件用于分析.rc 配置文件，参数为文件路径。读取 init.rc 文件后，生成动作列表与服务列表。根据 init.{hardware}.rc 生成的动作列表和服务列表会被添加到已生成的对应列表中去。&lt;/p&gt;
&lt;h3 id=&#34;执行-early-init-动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行-early-init-动作&#34;&gt;#&lt;/a&gt; 执行 early-init 动作&lt;/h3&gt;
&lt;p&gt;init 进程会依次执行 &amp;quot;early-init , init ,early-boot , boot&amp;quot; 片段中的命令。&lt;br /&gt;
通过 action_for_each_trigger () 将 early-init 中的命令保存到队列 action_add_queue_tail 中，之后通过 drain_action_queue () 函数将运行队列中的命令逐一取出执行。&lt;/p&gt;
&lt;h3 id=&#34;创建定义好的设备节点文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建定义好的设备节点文件&#34;&gt;#&lt;/a&gt; 创建定义好的设备节点文件&lt;/h3&gt;
&lt;p&gt;通过 device_init () 生成静态设备节点。&lt;/p&gt;
&lt;h3 id=&#34;初始化属性服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化属性服务&#34;&gt;#&lt;/a&gt; 初始化属性服务&lt;/h3&gt;
&lt;p&gt;调用 property_init () 函数，在共享内存区域中，创建并初始化属性域。而后通过执行中的进程所提供的 API，访问属性域中的设置值。但更改属性值操作只能在 init 进程中运行，当修改属性值时，要预先向 init 进程提交值变更申请，然后 init 进程处理该申请，并修改属性值。&lt;/p&gt;
&lt;h3 id=&#34;显示启动-logo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示启动-logo&#34;&gt;#&lt;/a&gt; 显示启动 logo&lt;/h3&gt;
&lt;p&gt;使用 load_565rle_image () 函数将文件显示在屏幕上，只需修改 INIT_IMAGE_FILE 即可更改启动 Logo。&lt;/p&gt;
&lt;h3 id=&#34;属性初始设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性初始设置&#34;&gt;#&lt;/a&gt; 属性初始设置&lt;/h3&gt;
&lt;p&gt;通过 property_set () 函数向属性域设置系统所需的一些初始值。这些设置的属性值由执行中的多种进程通过 property_get () API 来访问。&lt;/p&gt;
&lt;h3 id=&#34;执行-init-动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行-init-动作&#34;&gt;#&lt;/a&gt; 执行 init 动作&lt;/h3&gt;
&lt;p&gt;同 early-init。&lt;/p&gt;
&lt;h3 id=&#34;启动属性服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动属性服务&#34;&gt;#&lt;/a&gt; 启动属性服务&lt;/h3&gt;
&lt;p&gt;除了先前设置的属性外，start_property_service () 还会读取几个设置文件，并对属性进行初始化。在根文件系统的 /data/property 目录下，保存着进程生成或修改的属性值。向 init 提交修改申请后，init 进程生成 /dev/socket/property_service 来接受其它进程提交的申请。&lt;/p&gt;
&lt;h3 id=&#34;创建套接字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建套接字&#34;&gt;#&lt;/a&gt; 创建套接字&lt;/h3&gt;
&lt;p&gt;用于 init 进程在收到子进程终止的信号时调用相应的 handler。&lt;/p&gt;
&lt;h3 id=&#34;执行与-action-list-的-early-bootbootproperty-相关的命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行与-action-list-的-early-bootbootproperty-相关的命令&#34;&gt;#&lt;/a&gt; 执行与 Action List 的 early-boot,boot,property 相关的命令&lt;/h3&gt;
&lt;p&gt;在 init.rc 文件的 boot 区段有一条 class_start 命令，用来逐一执行存在于服务列表中的进程列表。&lt;/p&gt;
&lt;h3 id=&#34;设置事件处理循环的监视事件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置事件处理循环的监视事件&#34;&gt;#&lt;/a&gt; 设置事件处理循环的监视事件&lt;/h3&gt;
&lt;p&gt;注册在 POLL 中的文件描述符会在 poll () 函数中等待事件发生，若事件发生，则从 poll 函数中跳出并处理事件。&lt;br /&gt;
在确认事件发生前，先要在 action list 的命令中确认是否有尚未执行的命令，并执行这些命令。起初，在事件处理循环中，action list 与 service list 未含有需要执行的事情，但是在处理过注册的事件后，init 进程要做的事情会重新注册到 action list 与 service list 中。&lt;br /&gt;
当事件发生时，事件信息会保存在 pollfd 结构体的 udfs.revents 变量中，当 poll () 函数返回后，可以在 udfs 数组中的 revents 中查看哪些事件已经发生。&lt;br /&gt;
当子进程终止时，会产生 SIGCHLD 信号，POLLIN 事件会被注册到 udfs [2],revents 中。&lt;br /&gt;
在 Android 系统运行过程中，插入热的拔插设备时，将生成设备节点文件。&lt;br /&gt;
这部分函数还会处理属性变更请求。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/23/Android-framework/</guid>
            <title>Android 框架概述</title>
            <link>http://ericcd.com/2022/03/23/Android-framework/</link>
            <category>Knowledge</category>
            <pubDate>Wed, 23 Mar 2022 10:57:28 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Android 框架相关知识概述。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;android-启动过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#android-启动过程&#34;&gt;#&lt;/a&gt; Android 启动过程&lt;/h2&gt;
&lt;p&gt;Android 启动时，首先通过 bootloader (系统加载器) 加载 Linux 内核。Linux 加载启动时，先初始化内核，再调用 init 进程。&lt;/p&gt;
&lt;h2 id=&#34;init-进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#init-进程&#34;&gt;#&lt;/a&gt; init 进程&lt;/h2&gt;
&lt;p&gt;init 进程会运行 Android Framework 所需的 Daemon, Context Manager, Media Server, Zygote 等。&lt;/p&gt;
&lt;h3 id=&#34;daemon&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#daemon&#34;&gt;#&lt;/a&gt; Daemon&lt;/h3&gt;
&lt;p&gt;以下是 init 进程执行的 Daemon 进程。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#          USB Daemon (usbd): 管理 USB 连接。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#          Android Debug Bridge Daemon (adbd): Android Debug Brige 连接管理。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#          Debugger Daemon (debuggerd): 启动 Debugger 系统。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#          Radio Interface Layer Daemon (rild): 管理无线通信连接。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;context-manager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#context-manager&#34;&gt;#&lt;/a&gt; Context Manager&lt;/h3&gt;
&lt;p&gt;Context Manager 是一个管理 Android 系统服务的重要进程，系统服务提供从相机，音频，视频处理到各种应用程序制作所需要的 API。&lt;br /&gt;
Context Manager 还提供用于 Android 内的各种系统服务信息。应用程序或 Frameword 内部模块在调用系统服务时，需要先向服务管理器申请，再通过 Binder IPC 调用系统服务。&lt;br /&gt;
系统启动时，Android 所有系统服务都要把各自的 handle 注册到 Context Manager。&lt;/p&gt;
&lt;h3 id=&#34;media-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#media-server&#34;&gt;#&lt;/a&gt; Media Server&lt;/h3&gt;
&lt;p&gt;Media Server 用于运行基于 C/C++ 的本地系统服务，如 Audio Flinger,Camera 等。&lt;/p&gt;
&lt;h3 id=&#34;zygote&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zygote&#34;&gt;#&lt;/a&gt; Zygote&lt;/h3&gt;
&lt;p&gt;Zygote 进程用于缩短 Android 应用程序加载时间，每当执行 java 应用程序时，Zygote 会派生一个子进程来执行程序，该子进程就是虚拟机。&lt;/p&gt;
&lt;h3 id=&#34;system-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#system-server&#34;&gt;#&lt;/a&gt; System Server&lt;/h3&gt;
&lt;p&gt;Syetem Server 是 Android 系统的一个核心进程，它有 Zygote 创建，所以启动过程位于 Zygote 之后。在 System Server 中可以看到它建立的 Android 中的大部分服务，为了将运行在 System Server 中的 java 系统服务提供给 Android 程序或 Framework 内部模块调用，需要先将它们注册到 Context Manager 中。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/18/dex-structure/</guid>
            <title>dex 文件结构</title>
            <link>http://ericcd.com/2022/03/18/dex-structure/</link>
            <category>Knowledge</category>
            <pubDate>Fri, 18 Mar 2022 10:42:11 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;dex 文件结构学习。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;dex-整体结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dex-整体结构&#34;&gt;#&lt;/a&gt; dex 整体结构&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#       struct dex&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        Header;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        string_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        type_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        proto_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        field_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        methods_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        class_defs;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        link_data;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;header&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#header&#34;&gt;#&lt;/a&gt; Header&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#      struct  DexHeader&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              magic [8];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              checksum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              signature [kSHA1DigestLen];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              fileSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              headerSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              endianTag;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              linkSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              linkOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              mapOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              stringIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              stringIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              typeIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              typeIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              protoIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              protoIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              fieldIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              fieldIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              methodIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              methodIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              classDefsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              classDefsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              dataSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              dataOff;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
1.checksum：dex 文件校验和。&lt;br /&gt;
2. signature [kSHA1DigestLen]：整个 dex 文件通过 SHA-1 签名得到的值，占用 20 字节，用于检验 dex 文件。&lt;br /&gt;
3.endianTag: 字节序标记，用于指定 dex 运行环境的 cpu。&lt;br /&gt;
4.linkSzie 和 linkOff：指定链接段大小和文件偏移，通常情况下都为 0.linkSize 为 0 的话表示静态链接。&lt;br /&gt;
5.mapOff：指定 DexMapList 的文件偏移。&lt;br /&gt;
6.stringIdsSize 和 stringIdsOff：指定了 dex 文件中所有用到的字符串的个数和 string_ids 结构位置偏移。&lt;br /&gt;
7.typeIdsSize 和 TypeIdsOff：表示类的类型的数量和 type_ids 结构位置偏移。&lt;br /&gt;
8.protoIdsSize 和 protoIdsOff：表示 dex 文件中方法原型的个数和 proto_ids 结构位置偏移。&lt;br /&gt;
9.fieldIdsSize 和 fieldsIdsOff：表示 dex 文件中字段个数和 field_ids 结构位置偏移。&lt;br /&gt;
10.methodIdsSize 和 methodIdsOff：表示 dex 文件中的方法数量和 methods_ids 结构位置偏移。&lt;br /&gt;
11.classDefsSize 和 classDefsOff：指明 dex 文件中类的定义的相关信息。&lt;/p&gt;
&lt;h2 id=&#34;string_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string_ids&#34;&gt;#&lt;/a&gt; string_ids&lt;/h2&gt;
&lt;p&gt;string_ids 结构中，每 4 字节表示一个位置偏移，该偏移指向真正字符串的偏移地址，真正的字符串存在 data 中。&lt;/p&gt;
&lt;h2 id=&#34;type_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#type_ids&#34;&gt;#&lt;/a&gt; type_ids&lt;/h2&gt;
&lt;p&gt;types_ids 中只存在一种数据 descriptorIdx，它的值为 string_ids 结构的索引。&lt;/p&gt;
&lt;h2 id=&#34;proto_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#proto_ids&#34;&gt;#&lt;/a&gt; proto_ids&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#     struct proto_ids&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              shortyIdx;   // 指向 string_Ids 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              returnTypeIdx;  // 指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              parametersOff;  // 指向 type_list 的位置偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;type_list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#type_list&#34;&gt;#&lt;/a&gt; type_list&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#     struct type_list&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             size; //type_Item 的个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             type_item  list [1];  //type_Item 结构，只有一个 type_id 参数，指向 type_id 列表 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;field_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#field_ids&#34;&gt;#&lt;/a&gt; field_ids&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#        struct field_ids&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             classIdx;  // 类的类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             typeIdx;  // 字段类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             nameIdx;  // 字段名，指向 string_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;methods_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#methods_ids&#34;&gt;#&lt;/a&gt; methods_ids&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#      struct method_id&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             classIdx;   // 类的类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             protoIdx;  // 声明类型，指向 proto_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             nameIdx;  // 方法名，指向 string_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;class_defs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class_defs&#34;&gt;#&lt;/a&gt; class_defs&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#           struct    class_defs&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   classIdx;  // 类的类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   accessFlags;  // 访问标志 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   superclassIdx;  // 父类类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   interfacesOff;  // 接口，指向 type_list 的偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   sourceFileIdx;  // 源文件名，指向 string_Ids 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   annotationsOff;  // 注解，指向 annotationsDirectory_Item 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   classDataOff;  // 指向 class_data 结构的偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   staticValuesOff;  // 指向 encoded_array 结构的偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;class_data&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class_data&#34;&gt;#&lt;/a&gt; class_data&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#        struct DexClassData&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              classDataHeader	header;	     // 指定字段与方法的个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              Field* 		staticFields;   // 静态字段，Field 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              Field*		instanceFields;  // 实例字段，Field 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              Method*		directMethods;  // 直接方法，Method 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              Method*		virtualMethods;  // 虚方法，Method 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;classdataheader&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#classdataheader&#34;&gt;#&lt;/a&gt; classDataHeader&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#   struct classDataHeader&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               staticFieldsSize;  // 静态字段个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               instanceFieldsSize;  // 实例字段个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               directMethodsSize;  // 直接方法个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               virtualMethodsSize;  // 虚方法个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;field&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#field&#34;&gt;#&lt;/a&gt; Field&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#       struct DexField&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#            field_Idx;  // 指向 field_Ids 的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#            accessFlags;  // 访问标志 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;method&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#method&#34;&gt;#&lt;/a&gt; Method&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#           struct DexMethod&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   method_Idx;  // 指向 method_Ids 的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   accessFlags;  // 访问标志 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   codeOff;  // 指向 code 结构的偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/02/27/Android-Knowledge/</guid>
            <title>Android 知识</title>
            <link>http://ericcd.com/2022/02/27/Android-Knowledge/</link>
            <category>Knowledge</category>
            <pubDate>Sun, 27 Feb 2022 16:26:04 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;记录一些学习到的 Android 相关知识。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
1.application 中的 android:name 属性用来指定 app 启动时关联的 application，默认关联的为 android.app.Application。也可以将其设置为一个我们自己编辑的 class，该 class 将被 application 下的所有 activity 共享。&lt;br /&gt;
2.android.intent.action.MAIN 用于决定程序最先启动的 Activity，android.intent.category.LAUNCHER 用于决定程序是否显示在程序列表（桌面）里。没有 android.intent.action.MAIN，能够安装程序，但桌面不会显示启动器，程序也无法运行。&lt;br /&gt;
没有 android.intent.category.LAUNCHER，程序可以正常运行，但是桌面不会显示启动器。一个 apk 中有多个 activity 中存在 android.intent.action.MAIN 和 android.intent.category.LAUNCHER，桌面上会显示复数个应用图标，但是对应的为同一应用文件。&lt;br /&gt;
3. 在 Android 中使用 android.os.build 来获取设备相关信息，而 android.os.build 通过 SystemProperties.getString 来获取静态字段值，Systemproperties 是 android.os 中标记为 hide 的类，无法直接访问，但是可以通过反射的方式获取。该类使用 native 方法 native_get 来后去系统属性值，该方法的源代码在 android_os_SystemProperties.cpp 文件中。&lt;br /&gt;
4. 将 android.intent.category.LAUNCHER 改为 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FuZHJvaWQuaW50ZW50LmNhdGVnb3J5LklORk8=&#34;&gt;android.intent.category.INFO&lt;/span&gt; 或 android.intent.category.FRAMEWORK_INSTRUMENTATION_TEST, 能够实现在桌面上隐藏程序同时不影响程序正常运行。并且因为没有了 android.inntent.category.LAUNCHER 作为特征，一些 apk 分析工具就无法定位 MainActivity。&lt;br /&gt;
5. 可以将 Androidmanifest 中的一些非必要标签的资源 ID 改为 0，从而屏蔽实现该标签的作用。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
