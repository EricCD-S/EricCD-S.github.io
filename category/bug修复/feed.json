{
    "version": "https://jsonfeed.org/version/1",
    "title": "Vegetable Blog • All posts by \"bug修复\" category",
    "description": "",
    "home_page_url": "http://ericcd.com",
    "items": [
        {
            "id": "http://ericcd.com/2022/02/28/bugs/",
            "url": "http://ericcd.com/2022/02/28/bugs/",
            "title": "日常遇到的 BUG 及其修复方式",
            "date_published": "2022-02-28T15:15:24.000Z",
            "content_html": "<p>记录遇到过的 bug。<br />\n<span id=\"more\"></span></p>\n<h2 id=\"打开-monitorbat-时报错an-error-occured\"><a class=\"anchor\" href=\"#打开-monitorbat-时报错an-error-occured\">#</a> 打开 monitor.bat 时报错：An error occured。</h2>\n<p>jdk 版本太高了，改成了 1.8 版本顺利运行。</p>\n<h2 id=\"夜神模拟器无法自动连接-android-studio\"><a class=\"anchor\" href=\"#夜神模拟器无法自动连接-android-studio\">#</a> 夜神模拟器无法自动连接 Android Studio。</h2>\n<p>切换到夜神模拟器安装目录下的 bin 文件夹，执行以下指令：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用-android-killer-重打包失败\"><a class=\"anchor\" href=\"#使用-android-killer-重打包失败\">#</a> 使用 Android Killer 重打包失败</h2>\n<p>更换成最新的 apktool。</p>\n<h2 id=\"找不到-ddms\"><a class=\"anchor\" href=\"#找不到-ddms\">#</a> 找不到 ddms</h2>\n<p>ddms 已经更名成 monitor，并且使用前最好将 java 版本降为 javaSE1.8，否则可能报错。</p>\n<h2 id=\"使用-ddms-查看不了夜神模拟器的日志输出\"><a class=\"anchor\" href=\"#使用-ddms-查看不了夜神模拟器的日志输出\">#</a> 使用 ddms 查看不了夜神模拟器的日志输出</h2>\n<p>换成雷神模拟器。</p>\n<h2 id=\"使用-android-studio-时代码补全功能消失\"><a class=\"anchor\" href=\"#使用-android-studio-时代码补全功能消失\">#</a> 使用 Android Studio 时代码补全功能消失</h2>\n<ol>\n<li>关闭省电模式。</li>\n<li>重新进行以便 Grald Sync</li>\n</ol>\n<h2 id=\"在-android-studio-中加载动态库时提示找不到动态库\"><a class=\"anchor\" href=\"#在-android-studio-中加载动态库时提示找不到动态库\">#</a> 在 Android studio 中加载动态库时提示找不到动态库</h2>\n<p>在 build.gralde 中的 android {} 里添加以下代码。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$      sourceSets &#123;</span><br><span class=\"line\">$                             main&#123;</span><br><span class=\"line\">$                                         jniLibs.srcDirs=[&#x27;src/main/libs&#x27;]</span><br><span class=\"line\">$                                      &#125;</span><br><span class=\"line\">$                           &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"提示在动态库中找不到函数\"><a class=\"anchor\" href=\"#提示在动态库中找不到函数\">#</a> 提示在动态库中找不到函数</h2>\n<p>确定动态库已经加载，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1qdnZ4cy5zbw==\">检查.so</span> 文件，发现其中没有我自己编写的代码。查看 ndk-build 的 log，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1waHFzM2xrNGpxMmRodmE1MDJiczdiZDRvOXdmYjRkZTY5ZG53eWIuc28=\">发现虽然没报错且正常生成.so</span> 文件，但是没有编译.c 文件的步骤。检查 <span class=\"exturl\" data-url=\"aHR0cDovL0FuZHJvaWQubWs=\">Android.mk</span> 文件，发现 LOCAL_SRC_FILES 标签少写了最后的 S，导致 ndk-build 没有编译指定文件。</p>\n<h2 id=\"使用-ndk-build-编译时提示-jniexport-后面缺少符号\"><a class=\"anchor\" href=\"#使用-ndk-build-编译时提示-jniexport-后面缺少符号\">#</a> 使用 ndk-build 编译时提示 JNIEXPORT 后面缺少；符号</h2>\n<p>自动生成的.h 文件中，函数定义末尾少了；符号，加上就不报错了。</p>\n<h2 id=\"使用-frida-dexdump-脱壳时报错script-has-been-destroyed\"><a class=\"anchor\" href=\"#使用-frida-dexdump-脱壳时报错script-has-been-destroyed\">#</a> 使用 Frida-dexdump 脱壳时报错：script has been destroyed</h2>\n<p>可能是框架问题，但在本次实践中是由于 app 不稳定崩溃导致的。</p>\n<h2 id=\"使用-class-结构时发现该结构实际长度比其中的数据长度长\"><a class=\"anchor\" href=\"#使用-class-结构时发现该结构实际长度比其中的数据长度长\">#</a> 使用 class 结构时，发现该结构实际长度比其中的数据长度长</h2>\n<p>因为编译器按照 4 字节对 class 进行对齐，不足的补 0，可以在代码开头加上以下声明来取消对齐。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#    pragma pack (1)  // 按照 1 字节对齐，等于没对齐。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用-malloc-分配空间后向其中写入-char但是发现-cout-时后续跟了许多脏字符\"><a class=\"anchor\" href=\"#使用-malloc-分配空间后向其中写入-char但是发现-cout-时后续跟了许多脏字符\">#</a> 使用 malloc 分配空间后，向其中写入 char，但是发现 cout 时后续跟了许多脏字符</h2>\n<p>如果 malloc 申请的空间长度等于需要写入的字符长度，那么 cout 时在字符末尾找不到终止符，会继续读，直到遇见终止符为止。建议使用 calloc 来分配空间，该函数能将分配的空间初始化为 0，并且申请的空间长度应该为字符长度 + 1。</p>\n",
            "tags": [
                "bugs"
            ]
        }
    ]
}