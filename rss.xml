<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Vegetable Blog</title>
        <subtitle></subtitle>
        <icon>http://ericcd.com/images/favicon.ico</icon>
        <link>http://ericcd.com</link>
        <author>
          <name>EricCD</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 17 Jul 2022 15:14:42 +0800</pubDate>
        <lastBuildDate>Sun, 17 Jul 2022 15:14:42 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/07/17/url-log/</guid>
            <title>web 安全相关网站资源记录</title>
            <link>http://ericcd.com/2022/07/17/url-log/</link>
            <category term="web" scheme="http://ericcd.com/categories/web/" />
            <category term="web" scheme="http://ericcd.com/tags/web/" />
            <pubDate>Sun, 17 Jul 2022 15:14:42 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;记录一些学习到的 web 安全相关网站。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;搜索引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索引擎&#34;&gt;#&lt;/a&gt; 搜索引擎&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc2hvZGFuLmlvLw==&#34;&gt;https://www.shodan.io/&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2Vic2Nhbi5jYy8=&#34;&gt;https://www.webscan.cc/&lt;/span&gt; （同 ip 查询）&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcnQuc2gv&#34;&gt;https://crt.sh/&lt;/span&gt; （子域名查询）&lt;/p&gt;
&lt;h1 id=&#34;学习资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学习资源&#34;&gt;#&lt;/a&gt; 学习资源&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93ZWJzZWMucmVhZHRoZWRvY3MuaW8vemgvbGF0ZXN0L2luZGV4Lmh0bWw=&#34;&gt;https://websec.readthedocs.io/zh/latest/index.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;扫描工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扫描工具&#34;&gt;#&lt;/a&gt; 扫描工具&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ubWFwLm9yZy8=&#34;&gt;https://nmap.org/&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hlbGxvZ29sZHNuYWtlbWFuL21hc25tYXBzY2FuLVYxLjA=&#34;&gt;https://github.com/hellogoldsnakeman/masnmapscan-V1.0&lt;/span&gt;  （端口扫描器）&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0VuYWJsZVNlY3VyaXR5L3dhZncwMGY=&#34;&gt;https://github.com/EnableSecurity/wafw00f&lt;/span&gt;  （WAF 扫描工具）&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpdDR3b28vdGVlbW8=&#34;&gt;https://github.com/bit4woo/teemo&lt;/span&gt; （域名枚举工具）&lt;/p&gt;
&lt;h1 id=&#34;相关资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关资源&#34;&gt;#&lt;/a&gt; 相关资源&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0x1Y2lmZXIxOTkzL2Ntc3ByaW50&#34;&gt;https://github.com/Lucifer1993/cmsprint&lt;/span&gt;  （CMS 指纹库）&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL000dGlyL0dpdGh1Yi1Nb25pdG9y&#34;&gt;https://github.com/M4tir/Github-Monitor&lt;/span&gt; （漏洞发布监控工具）&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYm1qb2tlci9wLzkzMjYyNTguaHRtbA==&#34;&gt;https://www.cnblogs.com/bmjoker/p/9326258.html&lt;/span&gt; （sqlmap 思维导图）&lt;/p&gt;
&lt;h1 id=&#34;sql-注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-注入&#34;&gt;#&lt;/a&gt; SQL 注入&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3lvdW5neWFuZ3lhbmcwNC9Ob1NRTEF0dGFjaw==&#34;&gt;https://github.com/youngyangyang04/NoSQLAttack&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NxbG1hcHByb2plY3Qvc3FsbWFw&#34;&gt;https://github.com/sqlmapproject/sqlmap&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NleWUuaW8v&#34;&gt;http://ceye.io/&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0FET09PL0Ruc2xvZ1NxbGluag==&#34;&gt;https://github.com/ADOOO/DnslogSqlinj&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/31/Android-Framework-init-rc/</guid>
            <title>Android 框架 - init.rc 文件</title>
            <link>http://ericcd.com/2022/03/31/Android-Framework-init-rc/</link>
            <category term="Android" scheme="http://ericcd.com/categories/Android/" />
            <category term="Knowledge" scheme="http://ericcd.com/tags/Knowledge/" />
            <pubDate>Thu, 31 Mar 2022 11:26:29 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Android 框架中 init.rc 文件的相关知识。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
init.rc 文件不同于 init 进程，init 进程仅当编译完 Android 后才会生成，而 init.rc 文件存在于源码中。init 文件大致分为两部分，一部分是以 on 关键字开头的动作列表，一部分是以 service 关键字开头的服务列表。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/23/AndroidFramework-init/</guid>
            <title>Android 框架 - init 进程</title>
            <link>http://ericcd.com/2022/03/23/AndroidFramework-init/</link>
            <category term="Android" scheme="http://ericcd.com/categories/Android/" />
            <category term="Knowledge" scheme="http://ericcd.com/tags/Knowledge/" />
            <pubDate>Wed, 23 Mar 2022 11:25:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Android 框架中 init 进程的相关知识。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
init 进程是 Android 启动后，由内核启动的第一个用户级进程。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 内核启动过程：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#    start_kernel ()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#    init_post ()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#    run_init_process ()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#     static in noinline init_post (void)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               if (execute_command)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                          run_init_process (execute_command);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               run_init_process (&amp;quot;/sbin/init&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               run_init_process (&amp;quot;/etc/init&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               run_init_process (&amp;quot;/bin/init&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               run_init_process (&amp;quot;/bin/sh&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
init_post () 函数调用 run_init_process () 函数，获取注册在 execute_command 中的进程文件路径，执行 execve () 系统调用，execve () 函数执行参数传递过来的文件路径下的进程 。&lt;br /&gt;
当跟文件系统顶层目录中不存在 init 进程或未指定启动选项 &amp;quot;init=&amp;quot; 时，内核会到 /sbin,/etc,/bin 目录下查找 init 文件，如果仍未找到，则 init 进程停止，引发 Kernel Panic。&lt;/p&gt;
&lt;h1 id=&#34;init-工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#init-工作流程&#34;&gt;#&lt;/a&gt; init 工作流程&lt;/h1&gt;
&lt;h2 id=&#34;sigchld-注册信号处理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sigchld-注册信号处理器&#34;&gt;#&lt;/a&gt; SIGCHLD 注册信号处理器&lt;/h2&gt;
&lt;p&gt;当子进程终止时，会产生 SIGCHLD 信号，init 进程调用信号安装函数 sigaction ()，并通过参数传递至 sigaction 结构体中，完成信号处理器安装。&lt;br /&gt;
init 进程通过相关代码注册与子进程相关的 SIGCHLD 信号处理器，并把 sigaction 结构体中的 sa_flags 设置为 SA_NOCLDSTOP，该值表示仅当进程终止时才接受 SIGCHLD 信号。sigchld_handler 函数用于通知全局变量 signal_fd，SIGCHLD 信号已经发生。&lt;/p&gt;
&lt;h2 id=&#34;main-目录生成与挂载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#main-目录生成与挂载&#34;&gt;#&lt;/a&gt; main () 目录生成与挂载&lt;/h2&gt;
&lt;p&gt;init 在注册完信号处理器后，创建并挂在启动所需目录。&lt;/p&gt;
&lt;h2 id=&#34;初始化-log-输出设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化-log-输出设备&#34;&gt;#&lt;/a&gt; 初始化 log 输出设备&lt;/h2&gt;
&lt;p&gt;通过调用 log_init () 函数初始化 log 输出设备。&lt;/p&gt;
&lt;h2 id=&#34;解析-initrc-文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解析-initrc-文件&#34;&gt;#&lt;/a&gt; 解析 init.rc 文件&lt;/h2&gt;
&lt;p&gt;init.rc 文件是 init 启动后执行的启动脚本，文件中记录着 init 进程执行的功能。在 Linux 系统中，它被定义在根文件系统的 /etc/rc.d/ 目录下，是启动时的可执行文件。&lt;br /&gt;
init.rc 文件在 Android 系统运行过程中用于通用的环境设置以及进程相关的定义，init.{hardware}.rc 用于定义 Android 在不同平台下的特定进程和环境设置等。&lt;br /&gt;
parse_config_file () 文件用于分析.rc 配置文件，参数为文件路径。读取 init.rc 文件后，生成动作列表与服务列表。根据 init.{hardware}.rc 生成的动作列表和服务列表会被添加到已生成的对应列表中去。&lt;/p&gt;
&lt;h2 id=&#34;执行-early-init-动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行-early-init-动作&#34;&gt;#&lt;/a&gt; 执行 early-init 动作&lt;/h2&gt;
&lt;p&gt;init 进程会依次执行 &amp;quot;early-init , init ,early-boot , boot&amp;quot; 片段中的命令。&lt;br /&gt;
通过 action_for_each_trigger () 将 early-init 中的命令保存到队列 action_add_queue_tail 中，之后通过 drain_action_queue () 函数将运行队列中的命令逐一取出执行。&lt;/p&gt;
&lt;h2 id=&#34;创建定义好的设备节点文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建定义好的设备节点文件&#34;&gt;#&lt;/a&gt; 创建定义好的设备节点文件&lt;/h2&gt;
&lt;p&gt;通过 device_init () 生成静态设备节点。&lt;/p&gt;
&lt;h2 id=&#34;初始化属性服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化属性服务&#34;&gt;#&lt;/a&gt; 初始化属性服务&lt;/h2&gt;
&lt;p&gt;调用 property_init () 函数，在共享内存区域中，创建并初始化属性域。而后通过执行中的进程所提供的 API，访问属性域中的设置值。但更改属性值操作只能在 init 进程中运行，当修改属性值时，要预先向 init 进程提交值变更申请，然后 init 进程处理该申请，并修改属性值。&lt;/p&gt;
&lt;h2 id=&#34;显示启动-logo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示启动-logo&#34;&gt;#&lt;/a&gt; 显示启动 logo&lt;/h2&gt;
&lt;p&gt;使用 load_565rle_image () 函数将文件显示在屏幕上，只需修改 INIT_IMAGE_FILE 即可更改启动 Logo。&lt;/p&gt;
&lt;h2 id=&#34;属性初始设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性初始设置&#34;&gt;#&lt;/a&gt; 属性初始设置&lt;/h2&gt;
&lt;p&gt;通过 property_set () 函数向属性域设置系统所需的一些初始值。这些设置的属性值由执行中的多种进程通过 property_get () API 来访问。&lt;/p&gt;
&lt;h2 id=&#34;执行-init-动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行-init-动作&#34;&gt;#&lt;/a&gt; 执行 init 动作&lt;/h2&gt;
&lt;p&gt;同 early-init。&lt;/p&gt;
&lt;h2 id=&#34;启动属性服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动属性服务&#34;&gt;#&lt;/a&gt; 启动属性服务&lt;/h2&gt;
&lt;p&gt;除了先前设置的属性外，start_property_service () 还会读取几个设置文件，并对属性进行初始化。在根文件系统的 /data/property 目录下，保存着进程生成或修改的属性值。向 init 提交修改申请后，init 进程生成 /dev/socket/property_service 来接受其它进程提交的申请。&lt;/p&gt;
&lt;h2 id=&#34;创建套接字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建套接字&#34;&gt;#&lt;/a&gt; 创建套接字&lt;/h2&gt;
&lt;p&gt;用于 init 进程在收到子进程终止的信号时调用相应的 handler。&lt;/p&gt;
&lt;h2 id=&#34;执行与-action-list-的-early-bootbootproperty-相关的命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行与-action-list-的-early-bootbootproperty-相关的命令&#34;&gt;#&lt;/a&gt; 执行与 Action List 的 early-boot,boot,property 相关的命令&lt;/h2&gt;
&lt;p&gt;在 init.rc 文件的 boot 区段有一条 class_start 命令，用来逐一执行存在于服务列表中的进程列表。&lt;/p&gt;
&lt;h2 id=&#34;设置事件处理循环的监视事件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置事件处理循环的监视事件&#34;&gt;#&lt;/a&gt; 设置事件处理循环的监视事件&lt;/h2&gt;
&lt;p&gt;注册在 POLL 中的文件描述符会在 poll () 函数中等待事件发生，若事件发生，则从 poll 函数中跳出并处理事件。&lt;br /&gt;
在确认事件发生前，先要在 action list 的命令中确认是否有尚未执行的命令，并执行这些命令。起初，在事件处理循环中，action list 与 service list 未含有需要执行的事情，但是在处理过注册的事件后，init 进程要做的事情会重新注册到 action list 与 service list 中。&lt;br /&gt;
当事件发生时，事件信息会保存在 pollfd 结构体的 udfs.revents 变量中，当 poll () 函数返回后，可以在 udfs 数组中的 revents 中查看哪些事件已经发生。&lt;br /&gt;
当子进程终止时，会产生 SIGCHLD 信号，POLLIN 事件会被注册到 udfs [2],revents 中。&lt;br /&gt;
在 Android 系统运行过程中，插入热的拔插设备时，将生成设备节点文件。&lt;br /&gt;
这部分函数还会处理属性变更请求。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/23/Android-framework/</guid>
            <title>Android 框架概述</title>
            <link>http://ericcd.com/2022/03/23/Android-framework/</link>
            <category term="Android" scheme="http://ericcd.com/categories/Android/" />
            <category term="Knowledge" scheme="http://ericcd.com/tags/Knowledge/" />
            <pubDate>Wed, 23 Mar 2022 10:57:28 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Android 框架相关知识概述。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;android-启动过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#android-启动过程&#34;&gt;#&lt;/a&gt; Android 启动过程&lt;/h1&gt;
&lt;p&gt;Android 启动时，首先通过 bootloader (系统加载器) 加载 Linux 内核。Linux 加载启动时，先初始化内核，再调用 init 进程。&lt;/p&gt;
&lt;h1 id=&#34;init-进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#init-进程&#34;&gt;#&lt;/a&gt; init 进程&lt;/h1&gt;
&lt;p&gt;init 进程会运行 Android Framework 所需的 Daemon, Context Manager, Media Server, Zygote 等。&lt;/p&gt;
&lt;h2 id=&#34;daemon&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#daemon&#34;&gt;#&lt;/a&gt; Daemon&lt;/h2&gt;
&lt;p&gt;以下是 init 进程执行的 Daemon 进程。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#          USB Daemon (usbd): 管理 USB 连接。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#          Android Debug Bridge Daemon (adbd): Android Debug Brige 连接管理。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#          Debugger Daemon (debuggerd): 启动 Debugger 系统。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#          Radio Interface Layer Daemon (rild): 管理无线通信连接。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;context-manager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#context-manager&#34;&gt;#&lt;/a&gt; Context Manager&lt;/h2&gt;
&lt;p&gt;Context Manager 是一个管理 Android 系统服务的重要进程，系统服务提供从相机，音频，视频处理到各种应用程序制作所需要的 API。&lt;br /&gt;
Context Manager 还提供用于 Android 内的各种系统服务信息。应用程序或 Frameword 内部模块在调用系统服务时，需要先向服务管理器申请，再通过 Binder IPC 调用系统服务。&lt;br /&gt;
系统启动时，Android 所有系统服务都要把各自的 handle 注册到 Context Manager。&lt;/p&gt;
&lt;h2 id=&#34;media-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#media-server&#34;&gt;#&lt;/a&gt; Media Server&lt;/h2&gt;
&lt;p&gt;Media Server 用于运行基于 C/C++ 的本地系统服务，如 Audio Flinger,Camera 等。&lt;/p&gt;
&lt;h2 id=&#34;zygote&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zygote&#34;&gt;#&lt;/a&gt; Zygote&lt;/h2&gt;
&lt;p&gt;Zygote 进程用于缩短 Android 应用程序加载时间，每当执行 java 应用程序时，Zygote 会派生一个子进程来执行程序，该子进程就是虚拟机。&lt;/p&gt;
&lt;h2 id=&#34;system-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#system-server&#34;&gt;#&lt;/a&gt; System Server&lt;/h2&gt;
&lt;p&gt;Syetem Server 是 Android 系统的一个核心进程，它有 Zygote 创建，所以启动过程位于 Zygote 之后。在 System Server 中可以看到它建立的 Android 中的大部分服务，为了将运行在 System Server 中的 java 系统服务提供给 Android 程序或 Framework 内部模块调用，需要先将它们注册到 Context Manager 中。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/18/dex-structure/</guid>
            <title>dex 文件结构</title>
            <link>http://ericcd.com/2022/03/18/dex-structure/</link>
            <category term="Android" scheme="http://ericcd.com/categories/Android/" />
            <category term="Knowledge" scheme="http://ericcd.com/tags/Knowledge/" />
            <pubDate>Fri, 18 Mar 2022 10:42:11 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;dex 文件结构学习。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;dex-整体结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dex-整体结构&#34;&gt;#&lt;/a&gt; dex 整体结构&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#       struct dex&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        Header;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        string_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        type_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        proto_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        field_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        methods_ids;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        class_defs;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#        link_data;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;header&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#header&#34;&gt;#&lt;/a&gt; Header&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#      struct  DexHeader&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              magic [8];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              checksum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              signature [kSHA1DigestLen];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              fileSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              headerSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              endianTag;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              linkSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              linkOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              mapOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              stringIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              stringIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              typeIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              typeIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              protoIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              protoIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              fieldIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              fieldIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              methodIdsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              methodIdsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              classDefsSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              classDefsOff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              dataSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              dataOff;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
1.checksum：dex 文件校验和。&lt;br /&gt;
2. signature [kSHA1DigestLen]：整个 dex 文件通过 SHA-1 签名得到的值，占用 20 字节，用于检验 dex 文件。&lt;br /&gt;
3.endianTag: 字节序标记，用于指定 dex 运行环境的 cpu。&lt;br /&gt;
4.linkSzie 和 linkOff：指定链接段大小和文件偏移，通常情况下都为 0.linkSize 为 0 的话表示静态链接。&lt;br /&gt;
5.mapOff：指定 DexMapList 的文件偏移。&lt;br /&gt;
6.stringIdsSize 和 stringIdsOff：指定了 dex 文件中所有用到的字符串的个数和 string_ids 结构位置偏移。&lt;br /&gt;
7.typeIdsSize 和 TypeIdsOff：表示类的类型的数量和 type_ids 结构位置偏移。&lt;br /&gt;
8.protoIdsSize 和 protoIdsOff：表示 dex 文件中方法原型的个数和 proto_ids 结构位置偏移。&lt;br /&gt;
9.fieldIdsSize 和 fieldsIdsOff：表示 dex 文件中字段个数和 field_ids 结构位置偏移。&lt;br /&gt;
10.methodIdsSize 和 methodIdsOff：表示 dex 文件中的方法数量和 methods_ids 结构位置偏移。&lt;br /&gt;
11.classDefsSize 和 classDefsOff：指明 dex 文件中类的定义的相关信息。&lt;/p&gt;
&lt;h1 id=&#34;string_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string_ids&#34;&gt;#&lt;/a&gt; string_ids&lt;/h1&gt;
&lt;p&gt;string_ids 结构中，每 4 字节表示一个位置偏移，该偏移指向真正字符串的偏移地址，真正的字符串存在 data 中。&lt;/p&gt;
&lt;h1 id=&#34;type_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#type_ids&#34;&gt;#&lt;/a&gt; type_ids&lt;/h1&gt;
&lt;p&gt;types_ids 中只存在一种数据 descriptorIdx，它的值为 string_ids 结构的索引。&lt;/p&gt;
&lt;h1 id=&#34;proto_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#proto_ids&#34;&gt;#&lt;/a&gt; proto_ids&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#     struct proto_ids&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              shortyIdx;   // 指向 string_Ids 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              returnTypeIdx;  // 指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              parametersOff;  // 指向 type_list 的位置偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;type_list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#type_list&#34;&gt;#&lt;/a&gt; type_list&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#     struct type_list&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             size; //type_Item 的个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             type_item  list [1];  //type_Item 结构，只有一个 type_id 参数，指向 type_id 列表 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;field_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#field_ids&#34;&gt;#&lt;/a&gt; field_ids&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#        struct field_ids&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             classIdx;  // 类的类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             typeIdx;  // 字段类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             nameIdx;  // 字段名，指向 string_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;methods_ids&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#methods_ids&#34;&gt;#&lt;/a&gt; methods_ids&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#      struct method_id&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             classIdx;   // 类的类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             protoIdx;  // 声明类型，指向 proto_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             nameIdx;  // 方法名，指向 string_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;class_defs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class_defs&#34;&gt;#&lt;/a&gt; class_defs&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#           struct    class_defs&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   classIdx;  // 类的类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   accessFlags;  // 访问标志 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   superclassIdx;  // 父类类型，指向 type_Id 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   interfacesOff;  // 接口，指向 type_list 的偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   sourceFileIdx;  // 源文件名，指向 string_Ids 列表的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   annotationsOff;  // 注解，指向 annotationsDirectory_Item 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   classDataOff;  // 指向 class_data 结构的偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   staticValuesOff;  // 指向 encoded_array 结构的偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;class_data&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class_data&#34;&gt;#&lt;/a&gt; class_data&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#        struct DexClassData&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              classDataHeader	header;	     // 指定字段与方法的个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              Field* 		staticFields;   // 静态字段，Field 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              Field*		instanceFields;  // 实例字段，Field 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              Method*		directMethods;  // 直接方法，Method 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              Method*		virtualMethods;  // 虚方法，Method 结构 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;classdataheader&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#classdataheader&#34;&gt;#&lt;/a&gt; classDataHeader&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#   struct classDataHeader&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               staticFieldsSize;  // 静态字段个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               instanceFieldsSize;  // 实例字段个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               directMethodsSize;  // 直接方法个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               virtualMethodsSize;  // 虚方法个数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;field&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#field&#34;&gt;#&lt;/a&gt; Field&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#       struct DexField&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#            field_Idx;  // 指向 field_Ids 的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#            accessFlags;  // 访问标志 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;method&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#method&#34;&gt;#&lt;/a&gt; Method&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#           struct DexMethod&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   method_Idx;  // 指向 method_Ids 的索引 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   accessFlags;  // 访问标志 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   codeOff;  // 指向 code 结构的偏移 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#                   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/04/Android-reverce-2022.3.4-1/</guid>
            <title>Android 逆向 - 2022.3.4-1</title>
            <link>http://ericcd.com/2022/03/04/Android-reverce-2022.3.4-1/</link>
            <category term="Android逆向知识" scheme="http://ericcd.com/categories/Android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/" />
            <category term="Android逆向" scheme="http://ericcd.com/tags/Android%E9%80%86%E5%90%91/" />
            <pubDate>Fri, 04 Mar 2022 09:34:29 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;记录一些常见的反调试策略。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
1.java 代码混淆。&lt;br /&gt;
2. 资源文件混淆：可以使用 MT 管理器来单独修改 apk 中的 dex 文件。&lt;br /&gt;
3. 签名验证。&lt;br /&gt;
4. 模拟器检测。&lt;br /&gt;
5. 关键文件检测。&lt;br /&gt;
6. 调试端口检测。&lt;br /&gt;
7. 进程名称检测。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/03/01/Androidmanifest-modify-2022.3.1-1/</guid>
            <title>Androidmanifest 修改实践</title>
            <link>http://ericcd.com/2022/03/01/Androidmanifest-modify-2022.3.1-1/</link>
            <category term="Android逆向实践" scheme="http://ericcd.com/categories/Android%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/" />
            <category term="Android逆向" scheme="http://ericcd.com/tags/Android%E9%80%86%E5%90%91/" />
            <category term="ddms" scheme="http://ericcd.com/tags/ddms/" />
            <category term="apktool" scheme="http://ericcd.com/tags/apktool/" />
            <category term="jarsign" scheme="http://ericcd.com/tags/jarsign/" />
            <category term="010Editor" scheme="http://ericcd.com/tags/010Editor/" />
            <category term="Android Studio" scheme="http://ericcd.com/tags/Android-Studio/" />
            <pubDate>Tue, 01 Mar 2022 21:09:53 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;在网上看见通过修改 Androidmanifest 来识别 apk 是否被重打包的方法，进行一次实践进行验证。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;工具准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具准备&#34;&gt;#&lt;/a&gt; 工具准备&lt;/h1&gt;
&lt;p&gt;本次实践使用 Android Studio 编写实验代码，通过 010Editor 对 Androidmanifest 文件进行修改，使用 jarsign 对修改后的 apk 进行签名。另外，还会使用到 apktool 来对修改后的 apk 进行重打包，进而判断 apktool 是否会对 apk 造成影响。本次实践还使用到了 ddms 来查看日志输出，判断关键代码是否被触发。&lt;/p&gt;
&lt;h1 id=&#34;实践过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实践过程&#34;&gt;#&lt;/a&gt; 实践过程&lt;/h1&gt;
&lt;p&gt;通过 Android Studio 编写 apk，为了实施方便，代码中仅包含.MainActivity 与.appApplication。其中，.appApplication 作为 application 中的 andtoid:name 标签值，其功能为输出一段日志信息。&lt;br /&gt;
进行第一次测试，ddms 能够准确捕获到该日志信息，确定函数顺利执行。&lt;br /&gt;
使用 Bandizip 提取 apk 中的 Androidmanifest.xml 文件（尝试过使用 winrar，但是该工具会破坏 apk 结构，造成无法进一步实验），使用 010Editor 对 Androidmanifest 进行修改，主要是对 stringChunk 与 resourceChunk 修改，将两段中存储的变量个数对齐，并将 string 值设置为 name，resourceID 设置为 0 (因为在 Android 标签的结构体中，使用同一索引值来寻找字符串与资源 ID。并且，不要动本来就有的 name 标签与 ID，后面的其它资源可能会用到，改了会报错)。此外，还要对 filesize 等部分进行相应的修改，此处不一一讨论。&lt;br /&gt;
将修改后的 Androidmanifest 放回 apk 中，删去 META-INF 文件，使用之前的签名文件 (keys.jks) 来对 apk 重新签名，签名使用到了 jarsign 工具，命令如下所示：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ jarsigner -keystore keys.jks -signedjar appsigned.apk appunsigned.apk key0 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之后将重新签名完成的 apk 放入模拟器运行，ddms 没有接收到任何日志信息，可以发现.appApplication 未被执行。&lt;br /&gt;
使用 apktool 对 apk 进行重打包，再将生成的 apk 放入模拟器运行，ddms 再次接收到日志信息。&lt;/p&gt;
&lt;h1 id=&#34;结论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结论&#34;&gt;#&lt;/a&gt; 结论&lt;/h1&gt;
&lt;p&gt;Android 在运行时使用 ID 来寻找资源，当资源 ID 违法时 (本次实践中值为 0)，Android 会忽略该 ID 对应的资源 (本次实践中的.appApplication)。但是一旦使用 apktool 对 apk 进行重打包，apktool 会对 Androidmanifest 进行修复，将非法 ID 改为正常 ID，使得.appApplication 能够重新运行。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/02/28/bugs/</guid>
            <title>日常遇到的 BUG 及其修复方式</title>
            <link>http://ericcd.com/2022/02/28/bugs/</link>
            <category term="BUG修复" scheme="http://ericcd.com/categories/BUG%E4%BF%AE%E5%A4%8D/" />
            <category term="bugs" scheme="http://ericcd.com/tags/bugs/" />
            <pubDate>Mon, 28 Feb 2022 23:15:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;记录遇到过的 bug。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;打开-monitorbat-时报错an-error-occured&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打开-monitorbat-时报错an-error-occured&#34;&gt;#&lt;/a&gt; 打开 monitor.bat 时报错：An error occured。&lt;/h1&gt;
&lt;p&gt;jdk 版本太高了，改成了 1.8 版本顺利运行。&lt;/p&gt;
&lt;h1 id=&#34;夜神模拟器无法自动连接-android-studio&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#夜神模拟器无法自动连接-android-studio&#34;&gt;#&lt;/a&gt; 夜神模拟器无法自动连接 Android Studio。&lt;/h1&gt;
&lt;p&gt;切换到夜神模拟器安装目录下的 bin 文件夹，执行以下指令：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ adb connect 127.0.0.1:62001&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;使用-android-killer-重打包失败&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-android-killer-重打包失败&#34;&gt;#&lt;/a&gt; 使用 Android Killer 重打包失败&lt;/h1&gt;
&lt;p&gt;更换成最新的 apktool。&lt;/p&gt;
&lt;h1 id=&#34;找不到-ddms&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找不到-ddms&#34;&gt;#&lt;/a&gt; 找不到 ddms&lt;/h1&gt;
&lt;p&gt;ddms 已经更名成 monitor，并且使用前最好将 java 版本降为 javaSE1.8，否则可能报错。&lt;/p&gt;
&lt;h1 id=&#34;使用-ddms-查看不了夜神模拟器的日志输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-ddms-查看不了夜神模拟器的日志输出&#34;&gt;#&lt;/a&gt; 使用 ddms 查看不了夜神模拟器的日志输出&lt;/h1&gt;
&lt;p&gt;换成雷神模拟器。&lt;/p&gt;
&lt;h1 id=&#34;使用-android-studio-时代码补全功能消失&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-android-studio-时代码补全功能消失&#34;&gt;#&lt;/a&gt; 使用 Android Studio 时代码补全功能消失&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;关闭省电模式。&lt;/li&gt;
&lt;li&gt;重新进行以便 Grald Sync&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;在-android-studio-中加载动态库时提示找不到动态库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在-android-studio-中加载动态库时提示找不到动态库&#34;&gt;#&lt;/a&gt; 在 Android studio 中加载动态库时提示找不到动态库&lt;/h1&gt;
&lt;p&gt;在 build.gralde 中的 android {} 里添加以下代码。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$      sourceSets &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$                             main&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$                                         jniLibs.srcDirs=[&amp;#x27;src/main/libs&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$                                      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$                           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;提示在动态库中找不到函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提示在动态库中找不到函数&#34;&gt;#&lt;/a&gt; 提示在动态库中找不到函数&lt;/h1&gt;
&lt;p&gt;确定动态库已经加载，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1qdnZ4cy5zbw==&#34;&gt;检查.so&lt;/span&gt; 文件，发现其中没有我自己编写的代码。查看 ndk-build 的 log，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1waHFzM2xrNGpxMmRodmE1MDJiczdiZDRvOXdmYjRkZTY5ZG53eWIuc28=&#34;&gt;发现虽然没报错且正常生成.so&lt;/span&gt; 文件，但是没有编译.c 文件的步骤。检查 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FuZHJvaWQubWs=&#34;&gt;Android.mk&lt;/span&gt; 文件，发现 LOCAL_SRC_FILES 标签少写了最后的 S，导致 ndk-build 没有编译指定文件。&lt;/p&gt;
&lt;h1 id=&#34;使用-ndk-build-编译时提示-jniexport-后面缺少符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-ndk-build-编译时提示-jniexport-后面缺少符号&#34;&gt;#&lt;/a&gt; 使用 ndk-build 编译时提示 JNIEXPORT 后面缺少；符号&lt;/h1&gt;
&lt;p&gt;自动生成的.h 文件中，函数定义末尾少了；符号，加上就不报错了。&lt;/p&gt;
&lt;h1 id=&#34;使用-frida-dexdump-脱壳时报错script-has-been-destroyed&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-frida-dexdump-脱壳时报错script-has-been-destroyed&#34;&gt;#&lt;/a&gt; 使用 Frida-dexdump 脱壳时报错：script has been destroyed&lt;/h1&gt;
&lt;p&gt;可能是框架问题，但在本次实践中是由于 app 不稳定崩溃导致的。&lt;/p&gt;
&lt;h1 id=&#34;使用-class-结构时发现该结构实际长度比其中的数据长度长&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-class-结构时发现该结构实际长度比其中的数据长度长&#34;&gt;#&lt;/a&gt; 使用 class 结构时，发现该结构实际长度比其中的数据长度长&lt;/h1&gt;
&lt;p&gt;因为编译器按照 4 字节对 class 进行对齐，不足的补 0，可以在代码开头加上以下声明来取消对齐。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#  pragma pack (1)  // 按照 1 字节对齐，等于没对齐。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;使用-malloc-分配空间后向其中写入-char但是发现-cout-时后续跟了许多脏字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-malloc-分配空间后向其中写入-char但是发现-cout-时后续跟了许多脏字符&#34;&gt;#&lt;/a&gt; 使用 malloc 分配空间后，向其中写入 char，但是发现 cout 时后续跟了许多脏字符&lt;/h1&gt;
&lt;p&gt;如果 malloc 申请的空间长度等于需要写入的字符长度，那么 cout 时在字符末尾找不到终止符，会继续读，直到遇见终止符为止。建议使用 calloc 来分配空间，该函数能将分配的空间初始化为 0，并且申请的空间长度应该为字符长度 + 1。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/02/28/Android-reverce-2022-28-1/</guid>
            <title>Android 逆向 - 2022.28-1</title>
            <link>http://ericcd.com/2022/02/28/Android-reverce-2022-28-1/</link>
            <category term="Android逆向知识" scheme="http://ericcd.com/categories/Android%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/" />
            <category term="jni" scheme="http://ericcd.com/tags/jni/" />
            <category term="ndk" scheme="http://ericcd.com/tags/ndk/" />
            <category term="静态注册" scheme="http://ericcd.com/tags/%E9%9D%99%E6%80%81%E6%B3%A8%E5%86%8C/" />
            <pubDate>Mon, 28 Feb 2022 09:34:57 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;记录一些 jni 中的函数使用与静态注册相关知识。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;可执行程序编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可执行程序编译&#34;&gt;#&lt;/a&gt; 可执行程序编译&lt;/h1&gt;
&lt;p&gt;首先准备 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FuZHJvaWQubWs=&#34;&gt;Android.mk&lt;/span&gt; 文件，文件内容如下所示：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_PATH := $(call my-dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ include $(CLEAR_VARS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_ARM_MODE := arm #确定编译后的指令集 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_MODULE := example #模块名称 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_SRC_FILES := JNI_example.c #c 源文件 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_LDLIBS += -llog #依赖库 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ include $(BUILD EXECUTABLE) #将.c 构建为可执行程序，使用 shared_library 则会生成动态链接库， 使用 static_library 会生成静态链接库 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 准备 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FwcGxpY2F0aW9uLm1r&#34;&gt;Application.mk&lt;/span&gt; 文件，文件内代码如下所示：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$  APP_API := x86 armeabi-v7a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 在以上文件存储处打开 cmd，执行 ndk-build 指令生成 linux 下的可执行程序。&lt;/p&gt;
&lt;h1 id=&#34;相关函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关函数&#34;&gt;#&lt;/a&gt; 相关函数&lt;/h1&gt;
&lt;p&gt;jni 中的函数可以在 /java/include 下的 jni.h 文件中查询，以下只列举了一些可能使用到的函数。&lt;/p&gt;
&lt;h2 id=&#34;调用-java-层普通方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用-java-层普通方法&#34;&gt;#&lt;/a&gt; 调用 java 层普通方法&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ （*CallObjectMethod) (JNIEnv*, jobject, jmethodID, ...);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 前两个为默认参数，第三个参数由以下方法获取。&lt;/p&gt;
&lt;h2 id=&#34;获取-java-层实例方法的值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取-java-层实例方法的值&#34;&gt;#&lt;/a&gt; 获取 java 层实例方法的值&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$  jmethodID (*GetMethodID) (JNIEnv*, jclass, const char*, const char*);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 其中，第一个 const char * 为 java 层方法名称，第二个 const char * 为 java 层方法的签名 (即方法返回类型)，而 jclass 由以下方法获取：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ jclass (*FindClass) (JNIEnv*, const char*)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 其中，const char * 为目标所在 class 的路径 (使用 \ 代替.)。&lt;/p&gt;
&lt;h2 id=&#34;获取-java-层实例字段的值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取-java-层实例字段的值&#34;&gt;#&lt;/a&gt; 获取 java 层实例字段的值&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ jobject (*GetObjectField) (JNIEnv*, jobject , jfieldID);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 其中，jfieldID 由以下代码获取：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ jfieldID (*GetFieldID) (JNIenv*, jclass, const char*, const char*);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 第一个 const char * 为实例字段的名称，第二个 const char * 为实例字段签名 (即实例字段类型)。&lt;/p&gt;
&lt;h2 id=&#34;设置-java-层实例字段的值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置-java-层实例字段的值&#34;&gt;#&lt;/a&gt; 设置 java 层实例字段的值&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ void (*SetObjectField) (JNIEnv*, jobject, jfieldID, jobject);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 第二个 jobject 为 java 层实例字段设置的值。&lt;/p&gt;
&lt;h1 id=&#34;静态注册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态注册&#34;&gt;#&lt;/a&gt; 静态注册&lt;/h1&gt;
&lt;h2 id=&#34;生成-jni-头文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成-jni-头文件&#34;&gt;#&lt;/a&gt; 生成 jni 头文件&lt;/h2&gt;
&lt;p&gt;在 class 代码中声明 native 方法，之后在 cmd 窗口中切换到源码目录处，执行以下代码生成 jni 头文件：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ javah -jni com.example.main.class&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;编写-c-代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写-c-代码&#34;&gt;#&lt;/a&gt; 编写 c 代码&lt;/h2&gt;
&lt;p&gt;在 c 文件中 include 之前生成的头文件，之后便能在 c 文件中具体实现在头文件中声明的函数。&lt;/p&gt;
&lt;h2 id=&#34;生成动态链接库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成动态链接库&#34;&gt;#&lt;/a&gt; 生成动态链接库&lt;/h2&gt;
&lt;p&gt;将之前的两个 mk 文件同.c 与.h 文件放在同一文件夹下，使用 ndk-build 生成动态链接库文件。&lt;/p&gt;
&lt;h2 id=&#34;调用动态链接库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用动态链接库&#34;&gt;#&lt;/a&gt; 调用动态链接库&lt;/h2&gt;
&lt;p&gt;在 java 代码中使用以下代码调用生成的动态链接库：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ System.loadLibrary (&amp;quot;Module&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h1&gt;
&lt;p&gt;将以上个部分内容相结合，即可实现在 native 层调用 java 函数或获取 java 变量值。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/02/27/Android-Knowledge/</guid>
            <title>Android 知识</title>
            <link>http://ericcd.com/2022/02/27/Android-Knowledge/</link>
            <category term="Android" scheme="http://ericcd.com/categories/Android/" />
            <category term="Knowledge" scheme="http://ericcd.com/tags/Knowledge/" />
            <pubDate>Sun, 27 Feb 2022 16:26:04 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;记录一些学习到的 Android 相关知识。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
1.application 中的 android:name 属性用来指定 app 启动时关联的 application，默认关联的为 android.app.Application。也可以将其设置为一个我们自己编辑的 class，该 class 将被 application 下的所有 activity 共享。&lt;br /&gt;
2.android.intent.action.MAIN 用于决定程序最先启动的 Activity，android.intent.category.LAUNCHER 用于决定程序是否显示在程序列表（桌面）里。没有 android.intent.action.MAIN，能够安装程序，但桌面不会显示启动器，程序也无法运行。&lt;br /&gt;
没有 android.intent.category.LAUNCHER，程序可以正常运行，但是桌面不会显示启动器。一个 apk 中有多个 activity 中存在 android.intent.action.MAIN 和 android.intent.category.LAUNCHER，桌面上会显示复数个应用图标，但是对应的为同一应用文件。&lt;br /&gt;
3. 在 Android 中使用 android.os.build 来获取设备相关信息，而 android.os.build 通过 SystemProperties.getString 来获取静态字段值，Systemproperties 是 android.os 中标记为 hide 的类，无法直接访问，但是可以通过反射的方式获取。该类使用 native 方法 native_get 来后去系统属性值，该方法的源代码在 android_os_SystemProperties.cpp 文件中。&lt;br /&gt;
4. 将 android.intent.category.LAUNCHER 改为 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FuZHJvaWQuaW50ZW50LmNhdGVnb3J5LklORk8=&#34;&gt;android.intent.category.INFO&lt;/span&gt; 或 android.intent.category.FRAMEWORK_INSTRUMENTATION_TEST, 能够实现在桌面上隐藏程序同时不影响程序正常运行。并且因为没有了 android.inntent.category.LAUNCHER 作为特征，一些 apk 分析工具就无法定位 MainActivity。&lt;br /&gt;
5. 可以将 Androidmanifest 中的一些非必要标签的资源 ID 改为 0，从而屏蔽实现该标签的作用。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/02/27/Frida-2022-2-27-1/</guid>
            <title>Frida-2022.2.27-1</title>
            <link>http://ericcd.com/2022/02/27/Frida-2022-2-27-1/</link>
            <category term="Android逆向工具" scheme="http://ericcd.com/categories/Android%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/" />
            <category term="Frida" scheme="http://ericcd.com/tags/Frida/" />
            <category term="apk脱壳" scheme="http://ericcd.com/tags/apk%E8%84%B1%E5%A3%B3/" />
            <pubDate>Sun, 27 Feb 2022 11:18:05 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;利用 Frida 进行脱壳的过程记录。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;工具准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具准备&#34;&gt;#&lt;/a&gt; 工具准备&lt;/h1&gt;
&lt;p&gt;通过以下命令安装 Frida 模块：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ pip install frida&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ pip install frida-tools&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 通过 github 下载 android 设备对应的 frida-server，通过以下命令将 frida-server 传输到 /data/local/tmp 目录下并设置可执行权限。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ adb push frida-server /data/local/tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ adb shell&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ cd /data/local/tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ chmod 777 frida-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 使用以下命令安装 frida-dexdump&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ pip install frida-dexdump&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;脱壳过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脱壳过程&#34;&gt;#&lt;/a&gt; 脱壳过程&lt;/h1&gt;
&lt;p&gt;首先将 apk 安装到设备中。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ adb install apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入 frida-server 的存放目录，运行 frida-server。&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ adb shell&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ cd /data/local/tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ ./frida-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 另外打开一个 cmd，执行以下命令进行脱壳：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ frida -dexdump -U -f apk.packagename distPath&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;apk.packagename 为需要脱壳的 apk 的包名，distPath 为用户指定的 dex 存放地址。&lt;br /&gt;
Frida 是一款很好用的工具，它的其它功能有待后续尝试。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/02/27/Android-reverce-2022.2.27-3/</guid>
            <title>Android 逆向学习 - 2022.2.27-3</title>
            <link>http://ericcd.com/2022/02/27/Android-reverce-2022.2.27-3/</link>
            <category term="Android逆向工具" scheme="http://ericcd.com/categories/Android%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/" />
            <category term="JEB" scheme="http://ericcd.com/tags/JEB/" />
            <pubDate>Sun, 27 Feb 2022 11:07:59 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;JEB 使用记录。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
1.ctrl+b 设置断点 (只能在 smali 中设置)。&lt;br /&gt;
2. 快捷键 q 切换代码界面。&lt;br /&gt;
3.Debugger-&amp;gt;start-&amp;gt;attach。选择 Process 附加，之后程序开始运行。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/02/27/Android-reverce-2022.2.27-2/</guid>
            <title>Android 逆向学习 - 2022.2.27-2</title>
            <link>http://ericcd.com/2022/02/27/Android-reverce-2022.2.27-2/</link>
            <category term="Android逆向工具" scheme="http://ericcd.com/categories/Android%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/" />
            <category term="ddms" scheme="http://ericcd.com/tags/ddms/" />
            <pubDate>Sun, 27 Feb 2022 10:34:09 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;ddms 工具使用记录。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;打开-ddms&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打开-ddms&#34;&gt;#&lt;/a&gt; 打开 ddms&lt;/h1&gt;
&lt;p&gt;在配置好 sdk 环境的前提下，通过命令行输入 ddms 直接打开。&lt;/p&gt;
&lt;h1 id=&#34;过滤器使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤器使用&#34;&gt;#&lt;/a&gt; 过滤器使用&lt;/h1&gt;
&lt;p&gt;通 apk 报名设置过滤器。&lt;/p&gt;
&lt;h1 id=&#34;配合插桩调试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配合插桩调试&#34;&gt;#&lt;/a&gt; 配合插桩调试&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;通过 Android Killer 在代码中插入日志输出代码。&lt;/li&gt;
&lt;li&gt;通过 ddms 查看输出的日志信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为需要使用寄存器存放输出的日志字符串，所以需要确定声明的寄存器数量 (.locals) 是否足够。&lt;/p&gt;
&lt;h1 id=&#34;栈跟踪&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈跟踪&#34;&gt;#&lt;/a&gt; 栈跟踪&lt;/h1&gt;
&lt;p&gt;通过插桩找到目标，之后往上分析堆栈确定调用过程。&lt;/p&gt;
&lt;h1 id=&#34;方法刨析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法刨析&#34;&gt;#&lt;/a&gt; 方法刨析&lt;/h1&gt;
&lt;p&gt;设置方法刨析，开始刨析后运行 app 中想要分析的功能，之后立即停止方法刨析。凭此获得方法调用表。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/02/27/android-reverce-2022.2.27-1/</guid>
            <title>Android 逆向学习 - 2022.2.27-1</title>
            <link>http://ericcd.com/2022/02/27/android-reverce-2022.2.27-1/</link>
            <category term="Android逆向工具" scheme="http://ericcd.com/categories/Android%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/" />
            <category term="Android Studio" scheme="http://ericcd.com/tags/Android-Studio/" />
            <pubDate>Sun, 27 Feb 2022 09:52:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;使用 Android Studio 进行动态调试。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;br /&gt;
1.File-&amp;gt;settings-&amp;gt;plugins-&amp;gt;install plugin from disk。通过以上步骤导入 smalidea。&lt;br /&gt;
2. 使用 Android Killer 打开目标 apk，右键注册机，进入文件路径，将 Project 文件通过 AS 的 import settings 导入。&lt;br /&gt;
3. 右键 smali 文件，选择 make directory as test sources root，赋予文件权限。&lt;br /&gt;
4. 进入 File-&amp;gt;project structure，选择 sdk 版本。&lt;br /&gt;
5.Run-&amp;gt;edit configurations，添加一个 Remote 调试器，设置端口号与 module。&lt;br /&gt;
6. 使用 adb shell ps 查看进程信息。&lt;br /&gt;
7.adb forward tcp: 调试器端口号 jdwp: 待调试进程 ID。&lt;/p&gt;
&lt;p&gt;接下来就能开始进行动态调试。（Androidmanifest 中的 android:debuggable 需要设置为 true)&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
