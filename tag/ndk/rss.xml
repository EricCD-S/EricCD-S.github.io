<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Vegetable Blog • Posts by &#34;ndk&#34; tag</title>
        <link>http://ericcd.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 28 Feb 2022 09:34:57 +0800</pubDate>
        <lastBuildDate>Mon, 28 Feb 2022 09:34:57 +0800</lastBuildDate>
        <category>Knowledge</category>
        <category>ddms</category>
        <category>jni</category>
        <category>ndk</category>
        <category>静态注册</category>
        <category>JEB</category>
        <category>Android逆向</category>
        <category>apktool</category>
        <category>jarsign</category>
        <category>010Editor</category>
        <category>Android Studio</category>
        <category>Frida</category>
        <category>apk脱壳</category>
        <category>bugs</category>
        <item>
            <guid isPermalink="true">http://ericcd.com/2022/02/28/Android-reverce-2022-28-1/</guid>
            <title>Android 逆向 - 2022.28-1</title>
            <link>http://ericcd.com/2022/02/28/Android-reverce-2022-28-1/</link>
            <category>jni</category>
            <category>ndk</category>
            <category>静态注册</category>
            <pubDate>Mon, 28 Feb 2022 09:34:57 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;记录一些 jni 中的函数使用与静态注册相关知识。&lt;br /&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;可执行程序编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可执行程序编译&#34;&gt;#&lt;/a&gt; 可执行程序编译&lt;/h2&gt;
&lt;p&gt;首先准备 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FuZHJvaWQubWs=&#34;&gt;Android.mk&lt;/span&gt; 文件，文件内容如下所示：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_PATH := $(call my-dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ include $(CLEAR_VARS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_ARM_MODE := arm #确定编译后的指令集 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_MODULE := example #模块名称 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_SRC_FILES := JNI_example.c #c 源文件 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ LOCAL_LDLIBS += -llog #依赖库 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ include $(BUILD EXECUTABLE) #将.c 构建为可执行程序，使用 shared_library 则会生成动态链接库， 使用 static_library 会生成静态链接库 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 准备 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FwcGxpY2F0aW9uLm1r&#34;&gt;Application.mk&lt;/span&gt; 文件，文件内代码如下所示：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$  APP_API := x86 armeabi-v7a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 在以上文件存储处打开 cmd，执行 ndk-build 指令生成 linux 下的可执行程序。&lt;/p&gt;
&lt;h2 id=&#34;相关函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关函数&#34;&gt;#&lt;/a&gt; 相关函数&lt;/h2&gt;
&lt;p&gt;jni 中的函数可以在 /java/include 下的 jni.h 文件中查询，以下只列举了一些可能使用到的函数。&lt;/p&gt;
&lt;h3 id=&#34;调用-java-层普通方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用-java-层普通方法&#34;&gt;#&lt;/a&gt; 调用 java 层普通方法&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ （*CallObjectMethod) (JNIEnv*, jobject, jmethodID, ...);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 前两个为默认参数，第三个参数由以下方法获取。&lt;/p&gt;
&lt;h3 id=&#34;获取-java-层实例方法的值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取-java-层实例方法的值&#34;&gt;#&lt;/a&gt; 获取 java 层实例方法的值&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$  jmethodID (*GetMethodID) (JNIEnv*, jclass, const char*, const char*);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 其中，第一个 const char * 为 java 层方法名称，第二个 const char * 为 java 层方法的签名 (即方法返回类型)，而 jclass 由以下方法获取：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ jclass (*FindClass) (JNIEnv*, const char*)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 其中，const char * 为目标所在 class 的路径 (使用 \ 代替.)。&lt;/p&gt;
&lt;h3 id=&#34;获取-java-层实例字段的值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取-java-层实例字段的值&#34;&gt;#&lt;/a&gt; 获取 java 层实例字段的值&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ jobject (*GetObjectField) (JNIEnv*, jobject , jfieldID);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 其中，jfieldID 由以下代码获取：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ jfieldID (*GetFieldID) (JNIenv*, jclass, const char*, const char*);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 第一个 const char * 为实例字段的名称，第二个 const char * 为实例字段签名 (即实例字段类型)。&lt;/p&gt;
&lt;h3 id=&#34;设置-java-层实例字段的值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置-java-层实例字段的值&#34;&gt;#&lt;/a&gt; 设置 java 层实例字段的值&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ void (*SetObjectField) (JNIEnv*, jobject, jfieldID, jobject);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 第二个 jobject 为 java 层实例字段设置的值。&lt;/p&gt;
&lt;h2 id=&#34;静态注册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态注册&#34;&gt;#&lt;/a&gt; 静态注册&lt;/h2&gt;
&lt;h3 id=&#34;生成-jni-头文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成-jni-头文件&#34;&gt;#&lt;/a&gt; 生成 jni 头文件&lt;/h3&gt;
&lt;p&gt;在 class 代码中声明 native 方法，之后在 cmd 窗口中切换到源码目录处，执行以下代码生成 jni 头文件：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ javah -jni com.example.main.class&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;编写-c-代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写-c-代码&#34;&gt;#&lt;/a&gt; 编写 c 代码&lt;/h3&gt;
&lt;p&gt;在 c 文件中 include 之前生成的头文件，之后便能在 c 文件中具体实现在头文件中声明的函数。&lt;/p&gt;
&lt;h3 id=&#34;生成动态链接库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成动态链接库&#34;&gt;#&lt;/a&gt; 生成动态链接库&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS01aHFtMWg4OXBzN295dzJiLm1r&#34;&gt;将之前的两个.mk&lt;/span&gt; 文件同.c 与.h 文件放在同一文件夹下，使用 ndk-build 生成动态链接库文件。&lt;/p&gt;
&lt;h3 id=&#34;调用动态链接库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调用动态链接库&#34;&gt;#&lt;/a&gt; 调用动态链接库&lt;/h3&gt;
&lt;p&gt;在 java 代码中使用以下代码调用生成的动态链接库：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ System.loadLibrary (&amp;quot;Module&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;将以上个部分内容相结合，即可实现在 native 层调用 java 函数或获取 java 变量值。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
